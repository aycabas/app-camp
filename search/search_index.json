{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Did you miss the App Camp webinar? No problem - there are more on the way, along with a recording of the one you missed. You can find it all at https://aka.ms/TeamsAppCamp. See you there!"},{"location":"#microsoft-teams-app-camp","title":"Microsoft Teams App Camp","text":"<p>Migrate applications into Microsoft Teams</p> <p>Welcome to App Camp! In this on-demand workshop, you'll learn how to build Teams applications without special tools, which is important for developers who already have an application they want to extend into Microsoft Teams, or for developers who have a specific toolchain in mind. If you're starting a new application and you're open to building a React application with NodeJS/Express support, we recommend you use the Teams Toolkit.</p> <p>This web site will guide you through a set of videos and hands-on lab exercises in which you will port a simple web application to being a full-featured Teams application. The initial core labs will bring the web application into Teams as a personal tab with Azure AD Single Sign-on. Then the \"extended\" labs are available to teach you how to add features such as message extensions, adaptive cards, deep linking, and more. One of the extended labs even shows you how to monetize your application in the Teams app store!</p> <p>App Camp is not a starting application</p> <p>The App Camp solution is designed to be simple and easy to understand; it is NOT production ready and should not be used as the basis for your coding project. App Camp teaches the concepts that allow Teams apps to be built on existing apps or app frameworks. If you want to get started quickly on a new application, please use Teams Toolkit.</p> <p>If you're starting from scratch, you still can learn a lot about Teams applications and monetization here! Just don't use it as a code base!</p>"},{"location":"#video-briefings","title":"Video Briefings","text":"<p>These videos will help you understand the business of Teams applications, and will lay a foundation for understanding the technical aspects of the labs. You don't need to watch them in order to complete the labs, but they will help you understand.</p> Video Briefings <p> Welcome to Microsoft Teams App Camp! <p>Business Briefing</p> <p>What's the business case for building Teams applications? How can putting your app in the Teams app store generate revenue for you? What benefits does Microsoft offer ISV's who build Teams applications? How will my application appear to Teams users, and how will it help them? These questions and more are answered in these videos.</p> Opportunity for Startups to Build and Grow on Microsoft Teams Microsoft Teams Marketplace Strategy Buying a Teams application Teams app capabilities with doodles! Success story: DecisionPoint brings conversational BI to Teams Success story: My Serious Game brings their EdMill app to Teams <p>For more video case studies about successful Teams apps, please visit the Modern Work ISV Program page.</p> <p>Technical Briefing: Building your Teams application</p> <p>These videos will help you understand how Teams applications and Azure AD SSO work, so you can better understand the labs as you do them.</p> Get started building Microsoft Teams apps Understanding Single Sign-On (SSO) with Azure AD Multi-tenant architecture for SaaS apps with Microsoft 365 and Azure Active Directory <p>Technical Briefing: Monetizing your Teams application</p> <p>These videos explain the Microsoft Commercial Marketplace and how to integrate your application with the ecommerce system that drives it</p> 5 Steps to monetize your Teams application Anatomy of a SaaS Application Publish your app in the Microsoft Teams app store </p> Lab videos <p><p>If you'd like to watch the labs before doing them, they are here. They're also posted at the beginning of each lab. The instructions should stand on their own - you don't need to watch in order to complete the labs - but they can help if you get stuck or want to understand the labs more deeply.</p> <p>Start with the \"core application\"</p> Lab A01: Start with a simple web app that uses Azure AD Lab A02: Create a Teams app with Azure AD Single Sign-On Lab A03: Teams styling and themes <p>Use this alternative path if you want to learn how to integrate an identity system other than Azure Active Directory:</p> Labs B01-B04: Linking your identity system to Azure AD SSO <p>Extended labs: Choose your own adventure!</p> Configurable Tab Deep Links Add a Dialog Add a Message Extension with Adaptive Cards Add Monetization </p> Key learning resource <p>For a complete on-demand workshop focused on Commercial Marketplace, complete with hands-on labs and videos, please visit Mastering the Marketplace. Monetized Teams Store Apps are \"SaaS Offers\", so the link will bring you directly into that section of the training.  </p>"},{"location":"#its-lab-time","title":"It's lab time!","text":"<p>In this series of labs, you will port a simple \"Northwind Orders\" web application to become a full-fledged Microsoft Teams application. The core labs will show you how to make the web application into a Teams application with a personal tab and Azure AD Single Sign-on. From there, you can choose extended labs depending on the features you need in your application. After completing each lab, the solution will still work as the original stand-alone web application as well as in Microsoft Teams. This is intended to show how to extend an existing SaaS application into Microsoft Teams without disrupting non-Teams other users.</p> <p></p> <p>Tip</p> <p> If in doubt, start here! \ud83d\udeb6\ud83c\udfff\ud83d\udeb6\ud83c\udffd\u200d\u2640\ufe0f\ud83d\udeb6 </p> <p>To make the app understandable by a wide audience, it is written in vanilla JavaScript with no UI framework, however it does use modern browser capabilities such as web components, CSS variables, and ECMAScript modules. The server side is also in plain JavaScript, using Express, the most popular web server platform for NodeJS. While the code is not production quality, the writers tried to follow best practices with respect to the various API's and SDK's in use, or to call out any exceptions in comments. As for things like robust exception handling, unit testing, build pipeline, etc., those are left to you, the developer; you probably already have a setup you want to use anyway.</p>"},{"location":"#lab-prerequisites","title":"Lab Prerequisites \ud83d\udcc3","text":"<p>The labs are intended for developers. Most of the labs don't assume a lot of specialized knowledge; coding is in modern JavaScript without use of specialized frameworks or libraries. But if you're not comfortable with coding, you may find it a bit challenging. The idea is to teach developers the principles so they can apply them to their choice of toolsets.</p> <p>To complete the labs you will need:</p> <ul> <li>A computer with permission to install software (Windows, Mac, or Linux)</li> <li>NodeJS</li> <li>A code editor such as Visual Studio Code</li> <li>ngrok to simplify local debugging and allow debugging of bots and message extensions</li> <li>A Microsoft 365 tenant (available free!)</li> </ul> <p>Installation instructions are part of the first lab; additional details are here in the repo wiki</p> Tip <p>DON'T DEVELOP IN PRODUCTION</p> <p>It may be tempting to do labs or build solutions in the Microsoft 365 tenant where you work every day, but there are good reasons to have a dedicated dev tenant - and probably additional staging/test tenants as well. They're free, and you can safely experiment as a tenant admin without risking your production work.  Set up your new Microsoft 365 Developer Subscription </p>"},{"location":"#choose-a-path","title":"Choose a path \ud83d\udee3\ufe0f","text":"<p>There are two paths for doing the core application development labs:</p> <ul> <li> <p>Path \"A\" is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL). Path A includes optional modules for extending the core application; these all build on a correctly completed Lab A03, which is the last core lab for Azure AD.</p> </li> <li> <p>Path \"B\" is for developers with apps that use some other identity system. It includes a simple cookie-based auth system based on the Employees table in the Northwind database. This cookie-based system is not secure and should never be used in production! But it does serve to show how to map identities from an existing login system to Azure AD identities using Teams Single Sign-on. Path B does not include the optional modules but the Path A extended modules will probably work; we just don't have time to test all the permutations!</p> </li> </ul>"},{"location":"#labs","title":"Labs \ud83d\udcda","text":""},{"location":"#path-a-start-with-azure-ad","title":"Path A: Start with Azure AD","text":""},{"location":"#core-labs","title":"Core labs","text":"<p>In this series of labs, you'll begin with a working web application that uses the MSAL library to authorize Azure AD users. You'll extend this to also be a Teams application with Azure AD Single Sign-on. These core labs are the basis for the extended labs. These folders hold the completed source codes following each of the labs.</p> <ul> <li>A01 - Start with Azure Active Directory</li> <li>A02 - Create a Teams app with Azure AD Single Sign-On</li> <li>A03 - Teams styling and themes</li> </ul>"},{"location":"#extended-labs","title":"Extended Labs","text":"<p>Once you have successfully completed Lab A03, you're invited to choose your own adventure(s) and add features to your Teams application. The solution files for each lab are based on completing the lab directly on top of the Lab A03 solution. An \"All\" solution folder is provided showing all the extended labs completed on top of Lab A03.</p> <ul> <li>Add a Configurable Tab</li> <li>Add a Deep link to a personal Tab</li> <li>Add a Dialog </li> <li>Add a Meeting app</li> <li>Add a Message Extension</li> <li>Selling Your SaaS-based Teams Extension</li> </ul>"},{"location":"#path-b-start-with-a-non-azure-ad-identity-solution","title":"Path B: Start with a non-Azure AD identity solution","text":""},{"location":"#core-labs_1","title":"Core labs","text":"<p>In this series of labs, you'll begin with a working web application that uses the a simple bespoke authentication scheme to authorize users stored in a database. You'll extend this to also be a Teams application with Azure AD Single Sign-on, where Azure AD users are mapped to the application's users to minimize changes to the application. If you're extending an application into Teams which uses some identity system other than Azure AD yet want to gain the benefits of Azure AD SSO, this pattern may work for you. These folders hold the completed source codes following each of the labs.</p> <ul> <li>B01 - Start with a non-Azure Active Directory Identity System</li> <li>B02 - Teams App with Bespoke Authentication</li> <li>B03 - Enable Azure AD Single Sign-On</li> <li>B04 - Teams styling and themes</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>This project welcomes contributions and suggestions. Please file any issues or feature requests in the issues list for this repository. If you wish to contribute via a pull request, please fork the repo and make your PR against the main branch. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.</p> <p>When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.</p> <p>This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.</p>"},{"location":"#trademarks","title":"Trademarks","text":"<p>This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft  trademarks or logos is subject to and must follow  Microsoft's Trademark &amp; Brand Guidelines. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies.</p> <p></p> <p></p>"},{"location":"Resources/","title":"More Information","text":""},{"location":"Resources/#resources","title":"Resources","text":"<p>This page contains resources for the Microsoft Teams App Camp.</p> <p>For an overview of Teams app development, check out this video by Bob and Rabia!</p> <ul> <li>Free M365 Developer Tenant</li> <li>Targeted Release - set your developer tenant to get the latest features</li> <li>Microsoft 365 Developer Channel</li> <li>Microsoft 365 Community Channel</li> </ul>"},{"location":"Resources/#teams-development","title":"Teams Development","text":""},{"location":"Resources/#fundamentals","title":"Fundamentals","text":"<ul> <li>Get Started documentation</li> <li>Get started building Microsoft Teams apps (video)</li> </ul>"},{"location":"Resources/#documentation","title":"Documentation","text":"<ul> <li>Understand Teams app features - Tabs, Bots, etc.</li> <li>Teams developer documentation</li> <li>Adaptive Cards</li> <li>Dialog - Modal dialogs for Teams apps that can display a web page or adaptive card</li> <li>Microsoft 365 Groups and Microsoft Teams - There's an M365 Group inside every Team to provide membership, a SharePoint site for file storage, an Exchange shared mailbox and calendar, etc.</li> <li>Upload a Teams application</li> <li>App Store validation guidelines</li> <li>Teams app publishing</li> </ul>"},{"location":"Resources/#tools","title":"Tools","text":"<ul> <li>Teams Developer Portal</li> <li>Microsoft Teams Toolkit (Preview) - A Teams code generator and development tool set from Microsoft</li> <li>yo teams - A Teams code generator from the community, generates apps in TypeScript with React and Express</li> <li>ngrok tunneling tool</li> <li>Do you need ngrok? (video)</li> </ul>"},{"location":"Resources/#samples","title":"Samples","text":"<ul> <li>Teams app samples gallery</li> <li>HR Talent App sample</li> </ul>"},{"location":"Resources/#azure-ad-sso","title":"Azure AD SSO","text":"<ul> <li>Understanding SSO with Azure AD and Microsoft Teams</li> <li>Azure single vs. multitenant Apps</li> <li>Azure AD Postman Collection</li> <li>Authenticate users in Microsoft Teams</li> <li>Teams tab SSO</li> <li>Teams bot SSO</li> <li>Teams message extension SSO</li> <li>Claims in access tokens - When troubleshooting, paste an access token into https://jwt.ms; this document explains the claims within</li> <li>Multi-tenant architecture for SaaS apps with M365 and Azure AD (video)</li> <li>Single sign-on in Microsoft Teams tabs with Azure Active Directory</li> </ul>"},{"location":"Resources/#tabs","title":"Tabs","text":"<ul> <li>Build Tabs for Microsoft Teams</li> <li>Build a tab configuration page - These are required for tabs in Teams channels and Group conversations. They can also be used as settings pages for message extensions and connectors.</li> </ul>"},{"location":"Resources/#bots","title":"Bots","text":"<ul> <li>Bots in Microsoft Teams</li> <li>Bot Framework SDK - Use this to code your bot</li> <li>Bot Framework Composer - Use this to build a bot visually</li> <li>Power Virtual Agents - Use this to build a bot visually for use within an enterprise</li> <li>Consulting bot sample</li> <li>Bot Composer videos</li> </ul>"},{"location":"Resources/#sending-notifications","title":"Sending notifications","text":"<ul> <li>Webhooks and connectors - The easy way to send notifications but only works in a Teams channel, not personal or group chats</li> <li>Activity feed</li> <li>Proactive bots</li> </ul>"},{"location":"Resources/#message-extensions","title":"Message Extensions","text":"<ul> <li>Message extensions documentation</li> <li>Build a configuration page - These can be used as settings pages for message extensions</li> </ul>"},{"location":"Resources/#meeting-apps","title":"Meeting Apps","text":"<ul> <li>Apps for Teams meetings</li> <li>Enable and configure apps for Teams meetings</li> <li>Azure Communication Services - Azure services that allow apps outside of Teams to chat and have voice and video meetings</li> <li>Microsoft Teams Meeting App \u2013 Record and playback attendee names (video)</li> <li>Create interactive meeting apps for Microsoft Teams (video)</li> </ul>"},{"location":"Resources/#distributing-your-teams-apps","title":"Distributing Your Teams Apps","text":"<ul> <li>Publish Teams apps in Microsoft Teams store</li> </ul>"},{"location":"Resources/#teams-javascript-api","title":"Teams JavaScript API","text":"<ul> <li>Teams JavaScript SDK</li> <li>Teams JavaScript SDK v2 (Preview)</li> </ul>"},{"location":"Resources/#extend-teams-apps-across-microsoft-365","title":"Extend Teams apps across Microsoft 365","text":"<ul> <li>Teams apps in Outlook Web</li> <li>Teams Apps in Office.com &amp; Office App for Windows</li> </ul>"},{"location":"Resources/#microsoft-graph-api","title":"Microsoft Graph API","text":"<ul> <li>Getting Started with Microsoft Graph</li> <li>Microsoft Graph Explorer</li> <li>Microsoft Graph Postman Collection</li> <li>OData, the way to REST - Microsoft Graph uses OData conventions for access to collections of data</li> <li>Microsoft Graph Fundamentals lab</li> <li>Microsoft Graph Toolkit lab</li> <li>Microsoft Graph Scenarios lab</li> <li>Microsoft Graph SDK</li> </ul>"},{"location":"Resources/#commercial-marketplace","title":"Commercial Marketplace","text":"<ul> <li>What is the Microsoft commercial marketplace?</li> <li>Commercial marketplace documentation</li> <li>Microsoft partner network</li> <li>Microsoft Teams ISV app monetization - Preview program announcement</li> <li>SaaS fulfillment APIs in the Microsoft commercial marketplace</li> <li>Managing the SaaS subscription life cycle</li> <li>App Source simulator and monetized M365 app samples</li> </ul> <p>For a complete on-demand workshop focused on Commercial Marketplace, complete with hands-on labs and videos, please visit Mastering the Marketplace. Monetized Teams Store Apps are \"SaaS Offers\", so the link will bring you directly into that section of the training.</p> <p></p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#welcome-to-the-best-microsoft-teams-development-lab-ever","title":"Welcome to the best Microsoft Teams development lab ever!","text":"<p>At least we hope so! This is, as far as we know, the first and only lab about extending or migrating an existing application to Microsoft Teams, rather than starting from scratch. You will be provided with a simple, working web-based application in the very first lab, and as you go through the labs, you'll extend it into a full-featured Teams application.</p> <p>For you to succeed from day 1, we'd like you to be well prepared \ud83d\ude80. Here are some things you can set up before doing the labs. </p>"},{"location":"getting-started/#your-set-up","title":"Your set up","text":"<p>We are not talking about your workplace set up \ud83d\ude01 but about your development device and what you'll need to install in it. It could be your personal laptop, work laptop or a VM of your choice.</p> <p>To complete these labs you will need:</p> <ul> <li>NodeJS versions 14.17.4 and 16.14.2 tested</li> <li>A code editor of your choice, but if you ask us, we really like Visual Studio Code</li> <li>ngrok, which is a tunnelling program that allows you to access your local web server (running in NodeJS in this case) from the Internet. And we'll need this to test teams applications. NOTE: There are work-arounds for using ngrok in most of the labs but it's significantly easier if you use ngrok and the lab instructions all assume you're using it. For details, see this video.</li> </ul>"},{"location":"getting-started/#your-microsoft-365-tenant-related-prerequisites","title":"Your Microsoft 365 tenant related prerequisites","text":"<ul> <li>Get a (free!) Microsoft 365 tenant</li> </ul> <p>If you don't yet have a tenant, please join the Microsoft 365 Developer Program to get a free one. Your tenant includes 25 E5 user licenses and can be renewed as long as you keep developing!</p> <p>Click \"Join now\" to begin. </p> <p>Log in with any Microsoft personal or work and school account, enter your information, and click \"Next\". You will have an opportunity to choose what kind of \"sandbox\" you want; the \"Instant sandbox\" is recommended.</p> <p></p> <p>Follow the wizard and select your administrator username and password, tenant domain name, etc. The domain name you choose is just the left-most portion - for example if you enter \"Contoso\" your domain will be \"Contoso.onmicrosoft.com\".</p> <p>Remember this information as you'll need it throughout the labs! You will log in as @.onmicrosoft.com with the password your chose. You'll be prompted for your phone number and then the system will set up your subscription. <p>Eventually you'll be prompted to log into your new tenant. Be sure to use the new administrator credentials you just created, not the ones you used when you signed up for the developer program.</p> <p>\ud83d\ude0e DON'T DEVELOP IN PRODUCTION: It may be tempting to build solutions right where you work every day, but there are good reasons to have a dedicated dev tenant - and probably additional staging/test tenants. They're free, and you can safely experiment as a tenant admin without risking your production work. </p> <p>\ud83d\ude0e NAVIGATING MANY TENANTS: Consider creating a browser profile for each tenant that will have its own favorites, stored credentials, and cookies so you can easily switch between tenants as you work.</p> <p>\ud83d\ude0e CHANGES ROLL OUT FIRST TO \"TARGETED RELEASE\" TENANTS. You may want to enable Targeted Release in your developer tenant and keep production on Standard Release so you have a head start to test out new features.</p> <ul> <li>Enable Teams application uploads</li> </ul> <p>By default, end users can't upload Teams applications directly; instead an administrator needs to upload them into the enterprise app catalog. In this step you will enable direct uploads to make development easier and allow installation directly from the Teams user interface.</p> <p>a. In the left panel of the admin center, click \"Show all\" to open up the entire navigation</p> <p></p> <p>When the panel opens, click Teams to open the Microsoft Teams admin center.</p> <p></p> <p>b. In the left of the Microsoft Teams admin center, open the Teams apps accordion 1\ufe0f\u20e3 and select Setup Policies 2\ufe0f\u20e3. You will see a list of App setup policies. Click the Global (Org-wide default) policy 3\ufe0f\u20e3.</p> <p></p> <p>c. Ensure the first switch, \"Upload custom apps\" is turned On. And select Save button at the end of this page.</p> <p></p> <p>We have been working to get this enabled by default on developer tenants, so it may already be set for you. The change can take up to 24 hours to take effect, but usually it's much faster.</p> <p>Thanks and enjoy the labs!</p> <p></p>"},{"location":"aad/A01-begin-app/","title":"A01 - Start with Azure Active Directory","text":""},{"location":"aad/A01-begin-app/#lab-a01-start-with-azure-active-directory","title":"Lab A01: Start with Azure Active Directory","text":""},{"location":"aad/A01-begin-app/#overview","title":"Overview","text":"<p>This is the very first lab in Path A, which begins with an application that already uses Azure AD.</p> Are you on the right path? Expand these notes to find out! <p>There are two options for doing the labs:</p> <ul> <li> <p>The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL).</p> </li> <li> <p>the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On.</p> </li> </ul> <p>In this lab you will set up the Northwind Orders application, which can be found in the A01-begin-app folder. The labs that follow will lead you step by step into extending the web application to be a Microsoft Teams application as well. </p> <ul> <li>A01-begin-app: Setting up the application with Azure AD (\ud83d\udccdYou are here)</li> <li>A02-after-teams-sso: Creating a Teams app with Azure ADO SSO</li> <li>A03-after-apply-styling: Teams styling and themes</li> </ul> <p>In this lab you will learn to:</p> <ul> <li>Run a web application using NodeJS</li> <li>Expose a local web application using ngrok</li> <li>Register an application with the Microsoft identity platform</li> <li>How to use the Microsoft Authentication Library (MSAL)</li> <li>How to validate an Azure AD access token in a NodeJS application</li> </ul> Video briefing <p> Lab A01 Briefing </p> Table of Contents (open to display \u25ba) <ul> <li>Overview</li> <li>Features</li> <li>Exercise 1: Install prerequisites</li> <li>Step 1: Install NodeJS</li> <li>Step 2: Install a Code Editor</li> <li>Step 3: Install ngrok</li> <li>Exercise 2: Set up your Microsoft 365 Subscription</li> <li>Step 1: Get a tenant</li> <li>Step 2: Enable Teams application uploads</li> <li>Exercise 3: Assign users as Northwind \"Employees\"</li> <li>Step 1: Edit Azure AD users</li> <li>Step 2: Ensure the users have managers</li> <li>Step 3: Ensure the users are licensed for Microsoft 365</li> <li>Exercise 4: Register your application with Azure AD</li> <li>Step 1: Start ngrok</li> <li>Step 2: Register your application in Azure Active Directory</li> <li>Step 3: Grant your application permission to call the Microsoft Graph API</li> <li>Step 4: Consent to the permission</li> <li>Step 5: Expose an API</li> <li>Exercise 5: Configure and run the application</li> <li>Step 1: Download the starting application</li> <li>Step 2: Install the app's dependencies</li> <li>Step 3: Download the sample data</li> <li>Step 4: Configure the app settings</li> <li>Step 5: Run the application</li> <li>Known issues</li> <li>Next steps</li> </ul>"},{"location":"aad/A01-begin-app/#features","title":"Features","text":"<ul> <li>View orders associated with the logged-in user (sales representative)</li> <li>View products by category</li> <li>View product details and orders for a product</li> <li>View order details</li> </ul> <p>The application is based on the Northwind Traders Database, which is a sample relational database that originally shipped with Microsoft Access. The Northwind Traders Database is now available as a demonstration OData service, which is queried in this lab. This is a read-only data source; some of the later exercises appear to update the data but the changes are only stored in the server memory and will only persist until the server is restarted.</p>"},{"location":"aad/A01-begin-app/#exercise-1-install-prerequisites","title":"Exercise 1: Install prerequisites","text":"<p>You can complete these labs on a Windows, Mac, or Linux machine, but you do need the ability to install the prerequisites. If you are not permitted to install applications on your computer, you'll need to find another machine (or virtual machine) to use throughout the workshop.</p>"},{"location":"aad/A01-begin-app/#step-1-install-nodejs","title":"Step 1: Install NodeJS","text":"<p>NodeJS is a program that allows you to run JavaScript on your computer; it uses the open source \"V8\" engine, which is used in popular web browsers such as Microsoft Edge and Google Chrome. You will need NodeJS to run the web server code used throughout this workshop.</p> <p>Browse to https://nodejs.org/en/download/ and install the \"LTS\" (Long Term Support) version for your operating system. This lab has been tested using NodeJS version 14.17.4 and 16.14.0. If you already have another version of NodeJS installed, you may want to set up the Node Version Manager (or this variation for Microsoft Windows), which allows you to easily switch Node versions on the same computer.</p>"},{"location":"aad/A01-begin-app/#step-2-install-a-code-editor","title":"Step 2: Install a Code Editor","text":"<p>You can really use any code editor you wish, but we recommend Visual Studio Code.</p>"},{"location":"aad/A01-begin-app/#step-3-install-ngrok","title":"Step 3: Install ngrok","text":"<p>ngrok is a tunneling program that allows you to access your local web server (running in NodeJS in this case) from the Internet. To complete this exercise, sign up for a free ngrok account and install ngrok on your computer.</p> <p>Note</p> <p>Whether you choose a free or paid ngrok account plan, you be given an auth token that you'll need to install on your computer. Simply follow the instructions on the ngrok web site for details.</p> <p>The free version of ngrok will assign a URL similar to https://something.ngrok.io, where \"something\" is a random identifier. As long as ngrok is running (leave it going in a command or terminal window), you can browse your web site at that URL. If you start and stop ngrok, or try to keep it running for more than 8 hours, you'll get a new identifier and you'll need to update your app registration, environment variables, etc. The paid version of ngrok allows you to reserve the same URL for use over time, removing the need to update it when you return to the lab.</p> <p>Tip</p> <p>If you restart ngrok and get a new URL under the free plan, you can refer to this page for details on all the places in the labs where you need to update the URL.</p> <p>While ngrok isn't strictly required for developing Microsoft Teams applications, it makes things much easier, especially if Bots are involved. An example of this is the Message Extension lab since Message Extensions use a Bot to communicate with Microsoft Teams.</p> More information <p> What is ngrok and do you really need it? </p>"},{"location":"aad/A01-begin-app/#exercise-2-set-up-your-microsoft-365-subscription","title":"Exercise 2: Set up your Microsoft 365 Subscription","text":"<p>The initial Northwind Orders application doesn't require Microsoft 365, but it does use Azure AD. So let's set up a Microsoft 365 tenant now, which will give you an Azure AD instance where you're a full administrator so you can register the Northwind Orders application. In the labs which follow, you'll also use this tenant to run Microsoft Teams.</p>"},{"location":"aad/A01-begin-app/#step-1-get-a-tenant","title":"Step 1: Get a tenant","text":"<p>If you don't yet have a tenant, please join the Microsoft 365 Developer Program to get a free one. Your tenant includes 25 E5 user licenses and can be renewed as long as you keep developing!</p> <p>Select \"Join now\" to begin. </p> <p>Log in with any Microsoft personal or work and school account, enter your information, and select \"Next\". You will have an opportunity to choose what kind of \"sandbox\" you want; the \"Instant sandbox\" is recommended.</p> <p></p> <p>Follow the wizard and select your administrator username and password, tenant domain name, etc. The domain name you choose is just the left-most portion - for example if you enter \"Contoso\" your domain will be \"Contoso.onmicrosoft.com\".</p> <p>Remember this information as you'll need it throughout the labs! You will log in as &gt;username&lt;@&gt;domain&lt;.onmicrosoft.com with the password you chose. You'll be prompted for your phone number and then the system will set up your subscription.</p> <p>Eventually you'll be prompted to log into your new tenant. Be sure to use the new administrator credentials you just created, not the ones you used when you signed up for the developer program.</p> More information <p> Setting up your Microsoft 365 Development tenant </p> <p>Tip: Navigating many tenants</p> <p>Consider creating a browser profile for each tenant that will have its own favorites, stored credentials, and cookies so you can easily swtch between tenants as you work.</p> <p>You may be asked to enable multi-factor authentication (MFA)</p> <p>This is certainly a good idea! Just follow the instructions. If you really must turn off MFA, here are instructions. </p>"},{"location":"aad/A01-begin-app/#step-2-enable-teams-application-uploads","title":"Step 2: Enable Teams application uploads","text":"<p>By default, end users can't upload Teams applications directly; instead an administrator needs to upload them into the enterprise app catalog. In this step you will enable direct uploads to make developement easier and allow installation directly from the Teams user interface.</p> <p>a. Navigate to https://admin.microsoft.com/, which is the Microsoft 365 Admin Center.</p> <p>b. In the left panel of the admin center, select \"Show all\" to open up the entire navigation</p> <p></p> <p>When the panel opens, select Teams to open the Microsoft Teams admin center.</p> <p></p> <p>c. In the left of the Microsoft Teams admin center, open the Teams apps accordion 1\ufe0f\u20e3 and select Setup Policies 2\ufe0f\u20e3. You will see a list of App setup policies. Select the Global (Org-wide default) policy 3\ufe0f\u20e3.</p> <p></p> <p>d. Ensure the first switch, \"Upload custom apps\" is turned On.</p> <p></p> <p>Be sure to scroll down and select the \"Save\" button to persist your change.</p> <p></p> <p>We have been working to get this enabled by default on developer tenants, so it may already be set for you. The change can take up to 24 hours to take effect, but usually it's much faster.</p>"},{"location":"aad/A01-begin-app/#exercise-3-assign-users-as-northwind-employees","title":"Exercise 3: Assign users as Northwind \"Employees\"","text":"<p>The Northwind database contains 9 employees, so up to 9 users in your tenant will be able to use the application. (You'll only need two to complete the labs.)</p> <p>The Northwind Orders application expects each user's employee ID in Azure Active Directory to match their employee ID in the Northwind database. In this exercise you'll set up some test users accordingly.</p>"},{"location":"aad/A01-begin-app/#step-1-edit-azure-ad-users","title":"Step 1: Edit Azure AD users","text":"<ul> <li> <p>Navigate to the Microsoft 365 admin center at https://admin.microsoft.com/ and log in as the administrator of your new dev tenant.</p> </li> <li> <p>In the left navigation, select \"Show All\" to reveal the full list of admin centers, and then select \"Azure Active Directory\". This will bring you to the Azure AD admin center.</p> </li> </ul> <p></p> <p>Note</p> <p>The Users feature in the Microsoft 365 Admin site is useful for most things, but doesn't allow modifying some user properties such as the Employee ID. For that reason, you'll need to continue to the Users feature in the Azure Active Directory Admin Site.</p> <ul> <li>Select \"Azure Active Directory\" again in the left navigation bar.</li> </ul> <p></p> <ul> <li>This will bring you to the overview of your Azure AD tenant. Note that a \"tenant\" is a single instance of Azure Active Directory, with its own users, groups, and app registrations. Verify that you're in the developer tenant you just created, and select \"Users\" in the navigation bar.</li> </ul> <p></p> <p>You can use existing users to run the Northwind Orders application (the names may not match the Northwind database unless you change them, but you'll know what's going on), or create new ones. It's easiest if one of the users is the administrator account you're logged into right now, so you can test the application without logging on and off, but that's up to you. </p> <p>Note</p> <p>If you didn't select the \"Instant Sandbox\" option when you set up your Microsoft 365 developer subscription, you will be the only user on the list. That's OK; just add more users as needed.</p> <p>Select on the user to view their user profile, and then select the \"Edit\" button.</p> <p></p> <p>Change the Employee ID to the ID of one of the users in the Northwind datbase, which are:</p> Employee ID Name 1 Nancy Davolio 2 Andrew Fuller 3 Janet Leverling 4 Margaret Peacock 5 Steven Buchanan 6 Michael Suyama 7 Robert King 8 Laura Callahan 9 Anne Dodsworth <p>You may also choose to rename the users to match the database.</p> <p>Still on the edit screen, assign a manager for each user by clicking \"Edit\" again and then click \"Change\" next to the manager field and select a manager.</p> <p></p>"},{"location":"aad/A01-begin-app/#step-2-ensure-the-users-are-licensed-for-microsoft-365","title":"Step 2: Ensure the users are licensed for Microsoft 365","text":"<p>From the same user profile screen, select \"Licenses\" and ensure the user has an Office 365 license so they can run Microsoft Teams.</p> <p></p> <p>Note</p> <p>When you publish your application in the Microsoft Teams store, you will be responsible for your own license management and licenses for your application will not appear here along with the licenses for Microsoft products. In Lab 08, you will implement this strategy for the Northwind Orders app.</p>"},{"location":"aad/A01-begin-app/#exercise-4-register-your-application-with-azure-ad","title":"Exercise 4: Register your application with Azure AD","text":"<p>In order for users to log into your application with Azure AD, you need to register it. In this exercise you will register your application directly in the tenant you created in Exercise 2, however we'll set it up so it can be used from other tenants, such as those of customers who purchase your application in the Microsoft Teams store.</p> More information <p> Learn about multi-tenant applications </p>"},{"location":"aad/A01-begin-app/#step-1-start-ngrok","title":"Step 1: Start ngrok","text":"<p>Before you can register your application, you will need to start ngrok to obtain the URL for your application. In the command line tool of your choice, navigate to the folder where you've saved ngrok.exe and run this command:</p> <pre><code>ngrok http 3978\n</code></pre> <p>The terminal will display a screen like this; note the https forwarding URL for use in this lab. ngrok will tunnel requests on this URL to your local host on port 3978 for easy debugging.</p> <p>Save this URL for use throughout the labs.</p> <p></p> <p>Warning</p> <p>Do not stop ngrok for the duration of these labs. If you do stop ngrok and are assigned a new URL, this page lists all the exercises which involve the ngrok URL so you can easily update it.</p>"},{"location":"aad/A01-begin-app/#step-2-register-your-application-in-azure-active-directory","title":"Step 2: Register your application in Azure Active Directory","text":"<ul> <li> <p>Navigate to the Microsoft 365 admin center at https://admin.microsoft.com/ and log in as the administrator of your new dev tenant.</p> </li> <li> <p>In the left navigation, select \"Show More\" to reveal the full list of admin centers, and then select \"Azure Active Directory\". This will bring you to the Azure AD admin center.</p> </li> </ul> <p></p> <ul> <li>Select \"Azure Active Directory\" again in the left navigation bar.</li> </ul> <p></p> <ul> <li>This will bring you to the overview of your Azure AD tenant. Note that a \"tenant\" is a single instance of Azure Active Directory, with its own users, groups, and app registrations. Verify that you're in the developer tenant you just created, and select \"App Registrations\" in the navigation bar.</li> </ul> <p></p> <ul> <li>You will be shown a list of applications (if any) registered in the tenant. Select \"+ New Registration\" at the top to register a new application.</li> </ul> <p></p> <p>You will be presented with the \"Register an application\" form.</p> <p></p> <ul> <li>Enter a name for your application 1\ufe0f\u20e3.</li> <li>Under \"Supported account types\" select \"Accounts in any organizational directory\" 2\ufe0f\u20e3. This will allow your application to be used in your customer's tenants.</li> <li>Under \"Redirect URI\", select \"Single-page application (SPA)\" 3\ufe0f\u20e3 and enter the ngrok URL you saved earlier 4\ufe0f\u20e3.</li> <li>Select the \"Register\" button 5\ufe0f\u20e3</li> </ul> <p>You will be presented with the application overview. There are two values on this screen you need to copy for use later on; those are the Application (client) ID 1\ufe0f\u20e3 and the Directory (tenant) ID 2\ufe0f\u20e3.</p> <p></p> <p>When you've recorded these values, navigate to \"Certificates &amp; secrets\" 3\ufe0f\u20e3.</p> <p></p> <p>Now you will create a client secret, which is like a password for your application to use when it needs to authenticate with Azure AD.</p> <ul> <li>Select \"+ New client secret\" 1\ufe0f\u20e3</li> <li>Enter a description 2\ufe0f\u20e3 and select an expiration date 3\ufe0f\u20e3 for your secret </li> <li>Select \"Add\" to add your secret. 4\ufe0f\u20e3</li> </ul> <p>The secret will be displayed just this once on the \"Certificates and secrets\" screen. Copy it now and store it in a safe place.</p> <p></p> <p>Managing app secrets is an ongoing responsibility</p> <p>App secrets have a limited lifetime, and if they expire your application may stop working. You can have multiple secrets, so plan to roll them over as you would with a digital certificate.</p> <p>Keep your secrets secret!</p> <p>Give each developer a free developer tenant and register their apps in their tenants so each developer has his or her own app secrets. Limit who has access to app secrets for production. If you're running in Microsoft Azure, a great place to store your secrets is Azure KeyVault. You could deploy an app just like this one and store sensitive application settings in Keyvault. See this article for more information.</p>"},{"location":"aad/A01-begin-app/#step-3-verify-permission-to-call-the-microsoft-graph-api","title":"Step 3: Verify permission to call the Microsoft Graph API","text":"<p>The app registration created an identity for your application; now we need to add  permission to call the Microsoft Graph API. The Microsoft Graph is a RESTful API that allows you to access data in Azure AD and Microsoft 365, including Microsoft Teams.</p> <ul> <li>While still in the app registration, navigate to \"API Permissions\" 1\ufe0f\u20e3 and notice there is already a permission there, \"User.Read\" 2\ufe0f\u20e3.</li> </ul> <p></p> <p>The permission is for calling the Microsoft Graph, and it allows reading the logged-in user's profile, which includes the user's Employee ID. This permission is \"delegated\" (it acts on behalf of the logged-in user). For an explanation of application vs. delegated permissions, see this documentation or watch this video.</p> <p>Note</p> <p>If \"User.Read\" permission isn't already configured as in the screen shot above (it's included by default in newly registered applications), you need to click \"Add a permission\", then \"Microsoft Graph\", then \"Delegated permissions\", and then find and select the \"User.Read\" permission.</p> More information <p> Understanding Single Sign-On (SSO) with Azure AD Learn about multi-tenant applications </p> <p>The Northwind Orders application uses the Employee ID value in each users's Azure AD profile to locate the user in the Employees table in the Northwind database. The names probably won't match unless you rename them but in a real application the employees and Microsoft 365 users would be the same people.</p>"},{"location":"aad/A01-begin-app/#step-4-consent-to-the-permission","title":"Step 4: Consent to the permission","text":"<p>You have added the permission but nobody has consented to it. If you return to the permission page for your app, you can see that the new permission has not been granted. 1\ufe0f\u20e3 To fix this, select the \"Grant admin consent for \" button and then agree to grant the consent 2\ufe0f\u20e3. When this is complete, the message \"Granted for \" should be displayed for each permission. <p></p>"},{"location":"aad/A01-begin-app/#step-5-expose-an-api","title":"Step 5: Expose an API","text":"<p>The Northwind Orders app is a full stack application, with code running in the web browser and web server. The server code will validate each call from the browser using Azure Active Directory. To allow this, we need to expose an API in our Azure AD application. This will allow the server to validate Azure AD access tokens from the web browser.</p> <p>Select \"Expose an API\" 1\ufe0f\u20e3 and then \"Add a scope\"2\ufe0f\u20e3. Scopes expose an application's permissions; what you're doing here is adding a permission that your application's browser code can use it when calling the server. </p> <p></p> <p>On the \"Add a scope\" flyout, edit the Application ID URI to include your ngrok URL between the \"api://\" and the client ID. Select the \"Save and continue\" button to proceed.</p> <p></p> <p>Now that you've defined the application URI, the \"Add a scope\" flyout will allow you to set up the new permission scope. Fill in the form as follows: - Scope name: access_as_user - Who can consent: Admins only - Admin consent display name: Access as the logged in user - Admin consent description: Access Northwind services as the logged in user - (skip User consent fields) - Ensure the State is set to \"Enabled\" - Select \"Add scope\"</p> <p></p>"},{"location":"aad/A01-begin-app/#exercise-5-configure-and-run-the-application","title":"Exercise 5: Configure and run the application","text":""},{"location":"aad/A01-begin-app/#step-1-download-the-starting-application","title":"Step 1: Download the starting application","text":"<p>Begin by downloading the app-camp repository at https://github.com/microsoft/app-camp. Select the \"Code\" button and clone or download the content to your computer.</p> <p></p> <p>The starting code is in the <code>src/create-core-app/aad/A01-begin-app/</code> folder. Copy this folder to another location on your computer; this will be your working copy to keep the original source separate. Folders are also provided with the final code for the other labs.</p> <p>Note</p> <p>Be sure to copy the A01-begin-app folder to a working location where you can modify the contents as you complete the labs. That way you'll still have a clean copy to start from or to compare with your work.</p>"},{"location":"aad/A01-begin-app/#step-2-install-the-apps-dependencies","title":"Step 2: Install the app's dependencies","text":"<p>Using a command line tool of your choice, navigate to your working copy of the A01-begin-app directory and type the command:</p> <pre><code>npm install\n</code></pre> <p>This will install the libraries required to run the server side of your solution.</p> <p>Note</p> <p>The client-side code is not bundled as it uses JavaScript Modules (sometimes called ES Modules or ECMAScript Modules). The npm packages are used on the server side.</p>"},{"location":"aad/A01-begin-app/#step-3-download-the-sample-data","title":"Step 3: Download the sample data","text":"<p>The Northwind Orders application uses the venerable Northwind database for sample data. The Northwind Database originally shipped with Microsoft Access, then SQL Server, and now is available as a test OData service from the OData organization. In this step, you'll download the entire Northwind database from this test service to local JSON files, which are used by the Northwind Orders application.</p> <p>Using a command line tool in your working directory, type:</p> <pre><code>npm run db-download\n</code></pre> <p>This will create a JSON file in the northwindDB folder for each table in the Northwind database. The appliction reads and writes these JSON files. It's generous to call these files a \"database\", but it works well for a single-user lab environment.</p>"},{"location":"aad/A01-begin-app/#step-4-configure-the-app-settings","title":"Step 4: Configure the app settings","text":"<p>In a code editor, open the working folder you created in Step 2. Copy the .env_sample file to a new file called .env and open the new file. It will look like this:</p> <pre><code>COMPANY_NAME=Northwind Traders\nPORT=3978\n\nHOSTNAME=something.ngrok.io\nTENANT_ID=00000000-0000-0000-0000-000000000000\nCLIENT_ID=00000000-0000-0000-0000-000000000000\nCLIENT_SECRET=xxxxx\n</code></pre> <p>Fill in the information you've gathered so far, including your ngrok hostname and the information from the app registration.</p>"},{"location":"aad/A01-begin-app/#step-5-run-the-application","title":"Step 5: Run the application","text":"<p>To run the application, open a command line in your working folder and type:</p> <pre><code>npm start\n</code></pre> <p>At this point you should be able to browse to your ngrok URL and use the application. Note that due to the ngrok tunnel, you can try your app from anywhere on the Internet.</p> <p>You will quickly be directed to the Microsoft login page. </p> <p>Log in using one of the accounts you set up with an employee ID in Exercise 3, and you should be presented with the app's home page. The home page shows the employee name and picture from the Northwind database.</p> <p></p> <p>Select \"My Orders\" in the top navigation bar to view the employee's orders.</p> <p></p> <p>You can click on any order to view the details.</p> <p></p> <p>From here you can select on any product to view its details. Much of the data is hyperlinked in this fashion.</p> <p>You can also select on \"Products\" in the top navigation to view a list of product categories.</p> <p></p> <p>From there you can select into a product category to view a list of products, and then you can select into a product to see its details. The product detail page shows all the orders for the product, which leads to a list of orders, and so you can select your way around the sample data.</p> <p>Try logging out and logging in; you should be able to view the orders for another user in your developer tenant who has an employee ID set to a Northwind employee ID.</p>      function showCompletionPopup() {         let path = window.location.pathname;         path = path.endsWith('/') ? path.slice(0, -1) : path;         let pathArray = path.split('/');         let leafFolder = pathArray[pathArray.length-1];          let height = window.outerHeight / 1.5;         let width = window.outerWidth / 2;          window.open(`${window.origin}/app-camp/congrats/${leafFolder}`,                     'Congratulations!',                     `width=${width}, height=${height}, left=100, top=100,`);     }"},{"location":"aad/A01-begin-app/#congratulations","title":"Congratulations!","text":"<p>When you have finished this lab,please click this button to let us know!</p> <p>No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!</p>"},{"location":"aad/A01-begin-app/#known-issues","title":"Known issues","text":"<p>While it will work on mobile devices, the application is not responsive and will not look good on these devices. This may be addressed in a future version of the lab.</p> <p>For the latest issues, or to file a bug report, see the github issues list for this repository.</p>"},{"location":"aad/A01-begin-app/#next-steps","title":"Next steps","text":"<p>After completing this lab, you may continue to the next lab in this learning path, A02-after-teams-sso: Creating a Teams app with Azure ADO SSO.</p> <p></p>"},{"location":"aad/A02-after-teams-sso/","title":"A02 - Create a Teams app with Azure AD Teams SSO","text":""},{"location":"aad/A02-after-teams-sso/#lab-a02-create-a-teams-app-with-azure-ad-single-sign-on","title":"Lab A02: Create a Teams app with Azure AD Single Sign-On","text":""},{"location":"aad/A02-after-teams-sso/#overview","title":"Overview","text":"<p>This lab is part of Path A, which begins with a Northwind Orders application that already uses Azure AD.</p> Are you on the right path? Expand these notes to find out! <p>There are two options for doing the labs:</p> <ul> <li> <p>The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL).</p> </li> <li> <p>the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On.</p> </li> </ul> <p>In this lab you will extend the Northwind Orders application as a personal tab in a Teams application. That means the application needs to run in an IFrame; if your app includes code that prevents this, you may need to modify it to look for the Teams referrer URL.</p> <p>The Northwind Orders app doesn't check for IFrames, but Azure AD does, so the existing site won't work without modifications. To accomodate this and to prevent extra user logins, you'll set this tab up to use Teams' Azure AD Single Sign-on. </p> <p>The completed solution can be found in the A02-after-teams-sso folder, but the instructions will guide you through modifying the app running in your working folder. </p> <p>Note that as you complete the labs, the original app should still work outside of Teams! This is often a requirement of ISV's who have an app in market and need to serve an existing customer base outside of Teams.</p> <ul> <li>A01-begin-app: Setting up the application with Azure AD </li> <li>A02-after-teams-sso: Creating a Teams app with Azure ADO SSO (\ud83d\udccdYou are here)</li> <li>A03-after-apply-styling: Teams styling and themes</li> </ul> <p>In this lab you will learn to:</p> <ul> <li>Create an app manifest and package that can be installed into Teams</li> <li>Update your Azure AD app registration to allow Teams to issue tokens on behalf of your application</li> <li>Use the Microsoft Teams JavaScript SDK to request an Azure AD access token</li> <li>Install and test your application in Microsoft Teams</li> </ul> Video briefing <p> Lab A02 Briefing </p> Table of Contents (open to display \u25ba) <ul> <li>Overview</li> <li>Features</li> <li>Project structure</li> <li>Exercise 1: Authorize Microsoft Teams to log users into your application<ul> <li>Step 1: Return to your app registration</li> <li>Step 2: Add the Teams client applications</li> </ul> </li> <li>Exercise 2: Create the Teams application package<ul> <li>Step 1: Copy the manifest folder to your working directory</li> <li>Step 2: Examine the manifest template</li> <li>Step 3: Add the Teams App ID to the .env file</li> <li>Step 4: Add npm package to create .zip files</li> <li>Step 5: Build the package</li> </ul> </li> <li>Exercise 3: Modify the application source code<ul> <li>Step 1: Add a module with Teams helper functions</li> <li>Step 2: Update the login code for Teams SSO</li> <li>Step 3: Hide the navigation within Teams</li> <li>Exercise 4: Test your application in Microsoft Teams</li> <li>Step 1: Start the application</li> <li>Step 2: Upload the app package</li> </ul> </li> <li>Known issues</li> <li>References</li> <li>Next Steps</li> </ul>"},{"location":"aad/A02-after-teams-sso/#features","title":"Features","text":"<ul> <li>Microsoft Teams personal tab application displays the Northwind Orders web application</li> <li>Users sign into the Teams application transparently using Azure AD SSO</li> <li>Application alters its appearance (hides the top navigation) when running in Teams, allowing Teams tab navigation instead</li> </ul>"},{"location":"aad/A02-after-teams-sso/#project-structure","title":"Project structure","text":"Project files before and after this lab (open to display \u25ba) <p>The project structure when you start of this lab and end of this lab is as follows. Use this depiction for comparison. On your left is the contents of folder  <code>A01-begin-app</code> and on your right is the contents of folder <code>A02-after-teams-sso</code>.</p> <ul> <li> <p>\ud83c\udd95 New files/folders</p> </li> <li> <p>\ud83d\udd3aFiles changed</p> </li> </ul> <p> Project Structure Before  Project Structure After <pre>\nA01-begin-app\n    \u251c\u2500\u2500 client\n    \u2502   \u251c\u2500\u2500 components\n    \u2502       \u251c\u2500\u2500 \ud83d\udd3anavigation.js\n    \u2502   \u2514\u2500\u2500 identity\n    \u2502       \u251c\u2500\u2500 \ud83d\udd3aidentityClient.js\n    \u2502       \u2514\u2500\u2500 userPanel.js\n    \u251c\u2500\u2500 modules\n    \u2502   \u2514\u2500\u2500 env.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u251c\u2500\u2500 pages\n    \u2502   \u2514\u2500\u2500 categories.html\n    \u2502   \u2514\u2500\u2500 categories.js\n    \u2502   \u2514\u2500\u2500 categoryDetails.html\n    \u2502   \u2514\u2500\u2500 categoryDetails.js\n    \u2502   \u2514\u2500\u2500 myOrders.html\n    \u2502   \u2514\u2500\u2500 orderDetail.html\n    \u2502   \u2514\u2500\u2500 orderDetail.js\n    \u2502   \u2514\u2500\u2500 privacy.html\n    \u2502   \u2514\u2500\u2500 productDetail.html\n    \u2502   \u2514\u2500\u2500 productDetail.js\n    \u2502   \u2514\u2500\u2500 termsofuse.html\n    \u251c\u2500\u2500 index.html\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 northwind.css\n    \u251c\u2500\u2500 server\n    \u2502   \u2514\u2500\u2500 constants.js\n    \u2502   \u2514\u2500\u2500 identityService.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 server.js\n    \u251c\u2500\u2500 \ud83d\udd3a.env_Sample\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 \ud83d\udd3apackage.json\n    \u251c\u2500\u2500 README.md\n</pre> <pre>\nA02-after-teams-sso\n    \u251c\u2500\u2500 client\n    \u2502   \u251c\u2500\u2500 components\n    \u2502       \u251c\u2500\u2500 \ud83d\udd3anavigation.js\n    \u2502   \u2514\u2500\u2500 identity\n    \u2502       \u251c\u2500\u2500 \ud83d\udd3aidentityClient.js\n    \u2502       \u2514\u2500\u2500 userPanel.js\n    \u251c\u2500\u2500 modules\n    \u2502   \u2514\u2500\u2500 env.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 \ud83c\udd95teamsHelpers.js\n    \u251c\u2500\u2500 pages\n    \u2502   \u2514\u2500\u2500 categories.html\n    \u2502   \u2514\u2500\u2500 categories.js\n    \u2502   \u2514\u2500\u2500 categoryDetails.html\n    \u2502   \u2514\u2500\u2500 categoryDetails.js\n    \u2502   \u2514\u2500\u2500 myOrders.html\n    \u2502   \u2514\u2500\u2500 orderDetail.html\n    \u2502   \u2514\u2500\u2500 orderDetail.js\n    \u2502   \u2514\u2500\u2500 privacy.html\n    \u2502   \u2514\u2500\u2500 productDetail.html\n    \u2502   \u2514\u2500\u2500 productDetail.js\n    \u2502   \u2514\u2500\u2500 termsofuse.html\n    \u251c\u2500\u2500 index.html\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 northwind.css\n    \u251c\u2500\u2500 \ud83c\udd95manifest\n    \u2502   \u2514\u2500\u2500 \ud83c\udd95makePackage.js\n    \u2502   \u2514\u2500\u2500 \ud83c\udd95manifest.template.json\n    \u2502   \u2514\u2500\u2500 \ud83c\udd95northwind32.png\n    \u2502   \u2514\u2500\u2500 \ud83c\udd95northwind192.png\n    \u251c\u2500\u2500 server\n    \u2502   \u2514\u2500\u2500 constants.js\n    \u2502   \u2514\u2500\u2500 identityService.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 server.js\n    \u251c\u2500\u2500 \ud83d\udd3a.env_Sample\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 \ud83d\udd3apackage.json\n    \u251c\u2500\u2500 README.md\n</pre> </p>"},{"location":"aad/A02-after-teams-sso/#exercise-1-authorize-microsoft-teams-to-log-users-into-your-application","title":"Exercise 1: Authorize Microsoft Teams to log users into your application","text":"<p>The starting application logs users into Azure Active Directory using the Microsoft Authentication Library (MSAL). While this works well in a web browser, it won't work reliably in a Microsoft Teams application. Instead, Microsoft Teams provides a Single Sign-On (SSO) capability so users are silently logged into your application using the same credentials they used to log into Microsoft Teams. This requires giving Microsoft Teams permission to issue Azure AD tokens on behalf of your application. In this exercise, you'll provide that permission.</p>"},{"location":"aad/A02-after-teams-sso/#step-1-return-to-your-app-registration","title":"Step 1: Return to your app registration","text":"<p>Return to the Azure AD admin portal and make sure you're logged in as the administrator of your development tenant. Click \"Azure Active Directory\" 1\ufe0f\u20e3 and then \"App Registrations\" 2\ufe0f\u20e3.</p> <p></p> <p>Select the app you registered earlier to view the application overview.</p>"},{"location":"aad/A02-after-teams-sso/#step-2-add-the-teams-client-applications","title":"Step 2: Add the Teams client applications","text":"<p>Click \"Expose an API\" 1\ufe0f\u20e3 and then \"+ Add a client application\" 2\ufe0f\u20e3.</p> <p></p> <p>Paste the ID for the Teams mobile or desktop app, which is <code>1fec8e78-bce4-4aaf-ab1b-5451cc387264</code>, into the Client ID field in the flyout 1\ufe0f\u20e3 and check the scope you created earlier 2\ufe0f\u20e3 to allow Teams to issue tokens for that scope. Then click \"Add application\" 3\ufe0f\u20e3 to save your work.</p> <p>Repeat the process for the Teams web application, <code>5e3ce6c0-2b1f-4285-8d4b-75ee78787346</code>.</p> <p></p> <p>Warning</p> <p>These app ID's, <code>1fec8e78-bce4-4aaf-ab1b-5451cc387264</code> and <code>5e3ce6c0-2b1f-4285-8d4b-75ee78787346</code>, are the exact ID's you should use; they are not examples. These are the ID's for the Teams mobile/desktop app and Teams web app that are registered in Microsoft's tenant for use by every customer who uses Microsoft Teams.</p>"},{"location":"aad/A02-after-teams-sso/#exercise-2-create-the-teams-application-package","title":"Exercise 2: Create the Teams application package","text":"<p>Microsoft Teams applications don't run \"inside\" of Microsoft Teams, they just appear in the Teams user interface. A tab in Teams is just a web page, which could be hosted anywhere as long as the Teams client can reach it. </p> <p>To create a Teams application, you need to create a file called manifest.json which contains the information Teams needs to display the app, such as the URL of the Northwind Orders application. This file is placed in a .zip file along with the application icons, and the resulting application package is uploaded into Teams or distributed through the Teams app store.</p> <p>In this exercise you'll create a manifest.json file and application package for the Northwind Orders app and upload it into Microsoft Teams.</p>"},{"location":"aad/A02-after-teams-sso/#step-1-copy-the-manifest-folder-to-your-working-directory","title":"Step 1: Copy the manifest folder to your working directory","text":"<p>Many developers use the Teams Developer Portal to create an app package; this is preferred by many enterprise developer and systems integrators. However ISV's may want to keep the app package settings in their source control system, and that's the approach used in the lab. It's just a zip file; you can create it any way you want!</p> <p>The Teams developer portal is important even if you generate your own app package!</p> <p>Import your pacakge into the Teams Developer Portal to run validation checks prior to submitting it to the Teams app store! If you do this periodically during development you can catch issues earlier and avoid rework.</p> <p>Go to your local copy of the <code>A02-TeamsSSO</code> folder on your computer and copy the manifest folder into the working folder you used in the previous lab. This folder contains a template for building the manifest.json file.</p>"},{"location":"aad/A02-after-teams-sso/#step-2-examine-the-manifest-template","title":"Step 2: Examine the manifest template","text":"<p>In the manifest folder you just copied, open manifest.template.json in your code editor. This is the JSON that Teams needs to display your application.</p> <p>Notice that the template contains tokens such as<code>&lt;HOST_NAME&gt;</code> and <code>&lt;CLIENT_ID&gt;</code>. A small build script will take these values from your .env file and plug them into the manifest. However there's one token, <code>&lt;TEAMS_APP_ID&gt;</code> that's not yet in the .env file; we'll add that in the next step.</p> <p>Examine the <code>staticTabs</code> property in the manifest. It defines two tabs, one for the \"My Orders\" page and one for the \"Products\" page. The <code>contentUrl</code> is used within the Teams application, and <code>websiteUrl</code> is used if Teams can't render the tab and needs to launch it in a regular web browser. The Northwind Orders app will use the same code URL's for both.</p> <pre><code>\"staticTabs\": [\n  {\n    \"entityId\": \"Orders\",\n    \"name\": \"My Orders\",\n    \"contentUrl\": \"https://&lt;HOST_NAME&gt;/pages/myOrders.html\",\n    \"websiteUrl\": \"https://&lt;HOST_NAME&gt;/pages/myOrders.html\",\n    \"scopes\": [\n      \"personal\"\n    ]\n  },\n  {\n    \"entityId\": \"Products\",\n    \"name\": \"Products\",\n    \"contentUrl\": \"https://&lt;HOST_NAME&gt;/pages/categories.html\",\n    \"websiteUrl\": \"https://&lt;HOST_NAME&gt;/pages/categories.html\",\n    \"scopes\": [\n      \"personal\"\n    ]\n\n</code></pre> <p>Now examine the <code>webApplicationInfo</code> property. It contains the information Teams needs to obtain an access token using Single Sign On.</p> <pre><code>  \"webApplicationInfo\": {\n      \"id\": \"&lt;CLIENT_ID&gt;\",\n      \"resource\": \"api://&lt;HOST_NAME&gt;/&lt;CLIENT_ID&gt;\"\n  }\n</code></pre>"},{"location":"aad/A02-after-teams-sso/#step-3-add-the-teams-app-id-to-the-env-file","title":"Step 3: Add the Teams App ID to the .env file","text":"<p>Open the .env file in your working directory and add this line to the values from Lab A01:</p> <pre><code>TEAMS_APP_ID=1331dbd6-08eb-4123-9713-017d9e0fc04a\n</code></pre> <p>Be sure to complete the line by placing an end of line character at the end (using the enter key in your text editor).</p> <p>You should generate a different GUID for each application you register; this one is just here for your convenience. We could have hard-coded the app ID in the manifest.json template, but there are times when you need it in your code, so this will make that possible in the future. You can generate a new GUID at this website</p>"},{"location":"aad/A02-after-teams-sso/#step-4-add-npm-package-to-create-zip-files","title":"Step 4: Add npm package to create .zip files","text":"<p>Run this command in your working application folder:</p> <pre><code>npm install adm-zip --save-dev\n</code></pre>"},{"location":"aad/A02-after-teams-sso/#step-5-build-the-package","title":"Step 5: Build the package","text":"<p>Open the package.json file in your working directory and add a script that will generate the app package. The script code is in the manifest folder you just copied, so we just need to declare it in package.json. This is what <code>scripts</code> property should look like when you're done.</p> <pre><code>\"scripts\": {\n  \"start\": \"nodemon server/server.js\",\n  \"debug\": \"nodemon --inspect server/server.js\",\n  \"db-download\": \"node northwindDB/dbDownload.js\",\n  \"package\": \"node manifest/makePackage.js\"\n},\n</code></pre> <p>Now you can build a new package at any time with this command:</p> <pre><code>npm run package\n</code></pre> <p>Go ahead and run it, and two new files, manifest.json and northwind.zip (the app package) should appear in your manifest folder.</p>"},{"location":"aad/A02-after-teams-sso/#exercise-3-modify-the-application-source-code","title":"Exercise 3: Modify the application source code","text":""},{"location":"aad/A02-after-teams-sso/#step-1-add-a-module-with-teams-helper-functions","title":"Step 1: Add a module with Teams helper functions","text":"<p>Create a file called <code>teamsHelpers.js</code> in the <code>client/modules folder</code>, and paste in this code:</p> <pre><code>import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js';\n\n// Ensure that the Teams SDK is initialized once no matter how often this is called\nlet teamsInitPromise;\nexport function ensureTeamsSdkInitialized() {\n    if (!teamsInitPromise) {\n        teamsInitPromise = microsoftTeams.app.initialize();\n    }\n    return teamsInitPromise;\n}\n\n// Function returns a promise which resolves to true if we're running in Teams\nexport async function inTeams() {\n    try {\n        await ensureTeamsSdkInitialized();\n        const context = await microsoftTeams.app.getContext();\n        return (context.app.host.name === microsoftTeams.HostName.teams);\n    }\n    catch (e) {\n        console.log(`${e} from Teams SDK, may be running outside of Teams`);    \n        return false;\n    }\n}\n</code></pre> <p>These functions are used throughout the application to manage the Microsoft Teams JavaScript SDK.</p> <p>Before using the Microsoft Teams JavaScript SDK for the first time on a page, you need to call the <code>microsoftTeams.app.initialize()</code> function. The first function in teamsHelpers.js will ensure that <code>initialize()</code> has been called exactly once on the page.W</p> <p>The <code>inTeams()</code> function is used to determine if the application is running in Microsoft Teams or not. You may want to check out the <code>microsoftTeams.Hostname</code> enumeration to see other places where Teams applications will be able to run in the near future!</p>"},{"location":"aad/A02-after-teams-sso/#step-2-update-the-login-code-for-teams-sso","title":"Step 2: Update the login code for Teams SSO","text":"<p>Open the <code>client/identity/identityClient.js</code> file and add these import statements near the top.</p> <pre><code>import { ensureTeamsSdkInitialized, inTeams } from '/modules/teamsHelpers.js';\nimport 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js';\n</code></pre> <p>The first import, of course, is the Teams helper functions we just added. It's a JavaScript module so there is no bundling; the browser will resolve the import at runtime. </p> <p>The second import will load the Teams JavaScript SDK, which creates a global object <code>microsoftTeams</code> that we can use to access the SDK. You could also load it using a <code>&lt;script&gt;</code> tag or, if you bundle your client-side JavaScript, using the @microsoft/teams-js npm package.</p> <p>Now modify the <code>getAccessToken2()</code> function to include this code at the top:</p> <pre><code>    if (await inTeams()) {        \n\n        await ensureTeamsSdkInitialized();\n        return await microsoftTeams.authentication.getAuthToken();  \n\n    } else {\n      // existing code\n    }\n</code></pre> <p>This code checks to see if it's running in Teams and if so, uses the Teams JavaScript SDK's <code>getAuthToken()</code> function to get the access token needed to call the server.</p> <p>The completed <code>getAccessToken2()</code> function should look like this:</p> <pre><code>async function getAccessToken2() {\n\n    if (await inTeams()) {    \n\n        await ensureTeamsSdkInitialized();\n        return await microsoftTeams.authentication.getAuthToken();\n\n    } else {\n\n        // If we were waiting for a redirect with an auth code, handle it here\n        await msalClient.handleRedirectPromise();\n\n        try {\n            await msalClient.ssoSilent(msalRequest);\n        } catch (error) {\n            await msalClient.loginRedirect(msalRequest);\n        }\n\n        const accounts = msalClient.getAllAccounts();\n        if (accounts.length === 1) {\n            msalRequest.account = accounts[0];\n        } else {\n            throw (\"Error: Too many or no accounts logged in\");\n        }\n\n        let accessToken;\n        try {\n            const tokenResponse = await msalClient.acquireTokenSilent(msalRequest);\n            accessToken = tokenResponse.accessToken;\n            return accessToken;\n        } catch (error) {\n            if (error instanceof msal.InteractionRequiredAuthError) {\n                console.warn(\"Silent token acquisition failed; acquiring token using redirect\");\n                this.msalClient.acquireTokenRedirect(this.request);\n            } else {\n                throw (error);\n            }\n        }\n    }\n}\n</code></pre> <p>Finally, update the logoff function to disable logging off if it's running in Teams.</p> <pre><code>export async function logoff() {\n    getLoggedInEmployeeIdPromise = null;\n    getAccessTokenPromise = null;\n\n    if (!(await inTeams())) {\n        msalClient.logoutRedirect(msalRequest);\n    }\n}\n</code></pre>"},{"location":"aad/A02-after-teams-sso/#step-3-hide-the-navigation-within-teams","title":"Step 3: Hide the navigation within Teams","text":"<p>Microsoft Teams already has multiple levels of navigation, including multiple tabs as configured in the previous exercise. So the applications' built-in navigation is redundant in Teams.</p> <p>To hide the built-in navigation in Teams, open the <code>client/components/navigation.js</code> file and add this import statement at the top.</p> <pre><code>import { inTeams } from '../modules/teamsHelpers.js';\n</code></pre> <p>Now modify the <code>connectedCallback()</code> function, which displays the navigation web component, to skip rendering if it's running in Teams. The resulting function should look like this:</p> <pre><code>    async connectedCallback() {\n\n        if (!(await inTeams())) {\n            let listItemHtml = \"\";\n            topNavLinks.forEach(link =&gt; {\n                if (window.location.href.indexOf(link.url) &lt; 0) {\n                    listItemHtml += '&lt;li&gt;&lt;a href=\"' + link.url + '\"&gt;' + link.text + '&lt;/a&gt;&lt;/li&gt;';\n                } else {\n                    return listItemHtml += '&lt;li&gt;&lt;a href=\"' + link.url + '\" class=\"selected\"&gt;' + link.text + '&lt;/a&gt;&lt;/li&gt;';\n                }\n            });\n            this.innerHTML = `\n                &lt;ul class=\"topnav\"&gt;${listItemHtml}&lt;/ul&gt;\n            `;\n        }\n\n    }\n</code></pre> <p>About web components</p> <p>Web components are encapsulated custom HTML elements. They're not a Teams thing, nor do they use React or another UI library; they're built right into modern web browsers! You can learn more in this article</p>"},{"location":"aad/A02-after-teams-sso/#exercise-4-test-your-application-in-microsoft-teams","title":"Exercise 4: Test your application in Microsoft Teams","text":""},{"location":"aad/A02-after-teams-sso/#step-1-start-the-application","title":"Step 1: Start the application","text":"<p>Now it's time to run your updated application and run it in Microsoft Teams. Start the application with this command:</p> <pre><code>npm start\n</code></pre>"},{"location":"aad/A02-after-teams-sso/#step-2-upload-the-app-package","title":"Step 2: Upload the app package","text":"<p>In the Teams web or desktop UI, click \"Apps\" in the sidebar 1\ufe0f\u20e3, then \"Manage your apps\" 2\ufe0f\u20e3. At this point you have three choices:</p> <ul> <li>Upload a custom app (upload the app for yourself or a specific team or group chat) - this only appears if you have enabled \"Upload custom apps\" in your setup policy; this was a step in the previous lab</li> <li>Upload an app to your org's app catalog (upload the app for use within your organization) - this only appears if you are a tenant administrator</li> <li>Submit an app to your org (initiate a workflow asking a tenant administrator to install your app) - this appears for everyone</li> </ul> <p>In this case, choose the first option 3\ufe0f\u20e3.</p> <p></p> <p>Navigate to the Northwind.zip file in your manifest directory and upload it. Teams will display the application information; click the \"Add\" button to install it for your personal use.</p> <p></p>"},{"location":"aad/A02-after-teams-sso/#step-3-run-the-application","title":"Step 3: Run the application","text":"<p>The application should appear without any login prompt. The app's navigation should not be displayed; instead users can navigate to \"My Orders\" or \"Products\" using the tabs in the Teams app.</p> <p></p>      function showCompletionPopup() {         let path = window.location.pathname;         path = path.endsWith('/') ? path.slice(0, -1) : path;         let pathArray = path.split('/');         let leafFolder = pathArray[pathArray.length-1];          let height = window.outerHeight / 1.5;         let width = window.outerWidth / 2;          window.open(`${window.origin}/app-camp/congrats/${leafFolder}`,                     'Congratulations!',                     `width=${width}, height=${height}, left=100, top=100,`);     }"},{"location":"aad/A02-after-teams-sso/#congratulations","title":"Congratulations!","text":"<p>When you have finished this lab,please click this button to let us know!</p> <p>No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!</p> <p>Challenge</p> <p>You might have noticed the logout button doesn't do anything in Teams! If you wish, hide the logout button just as you hid the navigation bar. The code is in client/identity/userPanel.js.</p>"},{"location":"aad/A02-after-teams-sso/#known-issues","title":"Known issues","text":"<p>While it will work on mobile devices, the application is not responsive and will not look good on these devices. This may be addressed in a future version of the lab.</p> <p>For the latest issues, or to file a bug report, see the github issues list for this repository.</p>"},{"location":"aad/A02-after-teams-sso/#references","title":"References","text":"<p>Single sign-on (SSO) support for Tabs</p>"},{"location":"aad/A02-after-teams-sso/#next-steps","title":"Next Steps","text":"<p>After completing this lab, you may continue to the next lab in this learning path, A03-after-apply-styling: Teams styling and themes.</p> <p></p>"},{"location":"aad/A03-after-apply-styling/","title":"A03 - Teams styling and themes","text":""},{"location":"aad/A03-after-apply-styling/#lab-a03-teams-styling-and-themes","title":"Lab A03: Teams styling and themes","text":""},{"location":"aad/A03-after-apply-styling/#overview","title":"Overview","text":"<p>This lab is part of Path A, which begins with a Northwind Orders application that already uses Azure AD.</p> Are you on the right path? Expand these notes to find out! <p>There are two options for doing the labs:</p> <ul> <li> <p>The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL).</p> </li> <li> <p>the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On.</p> </li> </ul> <p>In this lab you will begin with the completed  with the application in folder <code>A02-after-teams-sso</code>, make changes as per the steps below to achieve what is in the folder <code>A03-after-apply-styling</code>.</p> <ul> <li>A01-begin-app: Setting up the application with Azure AD </li> <li>A02-after-teams-sso: Creating a Teams app with Azure ADO SSO</li> <li>A03-after-apply-styling: Teams styling and themes(\ud83d\udccdYou are here)</li> </ul> <p>In this lab you will learn to:</p> <ul> <li>Apply styles based on the Microsoft Teams figma to make your application look like it belongs in Microsoft Teams</li> <li>Display your application with the same color theme the user has selected in Microsoft Teams</li> <li>Switch your application's theme when the user changes the Microsoft Teams theme setting</li> </ul> Video briefing <p> Lab A03 Briefing </p> Table of Contents (open to display \u25ba) <ul> <li>Overview</li> <li>Features</li> <li>Exercise 1: Add CSS</li> <li>Step 1: Create a CSS file for Teams theme styles</li> <li>Step 2: Import the new CSS</li> <li>Exercise 2: Update and run the project</li> <li>Step 1: Modify modules\\teamsHelpers.js</li> <li>Step 2: Start your local project</li> <li>Step 3: Run the application in Teams client</li> <li>Next steps</li> </ul>"},{"location":"aad/A03-after-apply-styling/#features","title":"Features","text":"<ul> <li>Apply teams styling and themes to your existing application.</li> <li>Display and update themes along with the Microsoft Teams client</li> </ul>"},{"location":"aad/A03-after-apply-styling/#project-structure","title":"Project structure","text":"Project files before and after this lab (open to display \u25ba) <p>The project structure when you start of this lab and end of this lab is as follows. Use this depiction for comparison. On your left is the contents of folder  <code>A03-TeamsSSO</code> and on your right is the contents of folder <code>A04-StyleAndThemes</code>.</p> <ul> <li> <p>\ud83c\udd95 New files/folders</p> </li> <li> <p>\ud83d\udd3aFiles changed</p> </li> </ul> <p> Project Structure Before  Project Structure After <pre>\nA02-after-teams-sso\n    \u251c\u2500\u2500 client\n    \u2502   \u251c\u2500\u2500 components\n    \u2502       \u251c\u2500\u2500 navigation.js\n    \u2502   \u2514\u2500\u2500 identity\n    \u2502       \u251c\u2500\u2500 identityClient.js\n    \u2502       \u2514\u2500\u2500 userPanel.js\n    \u251c\u2500\u2500 modules\n    \u2502   \u2514\u2500\u2500 env.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 \ud83d\udd3ateamsHelpers.js\n    \u251c\u2500\u2500 pages\n    \u2502   \u2514\u2500\u2500 categories.html\n    \u2502   \u2514\u2500\u2500 categories.js\n    \u2502   \u2514\u2500\u2500 categoryDetails.html\n    \u2502   \u2514\u2500\u2500 categoryDetails.js\n    \u2502   \u2514\u2500\u2500 myOrders.html\n    \u2502   \u2514\u2500\u2500 orderDetail.html\n    \u2502   \u2514\u2500\u2500 orderDetail.js\n    \u2502   \u2514\u2500\u2500 privacy.html\n    \u2502   \u2514\u2500\u2500 productDetail.html\n    \u2502   \u2514\u2500\u2500 productDetail.js\n    \u2502   \u2514\u2500\u2500 termsofuse.html\n    \u251c\u2500\u2500 index.html\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 \ud83d\udd3anorthwind.css\n    \u251c\u2500\u2500 manifest\n    \u2502   \u2514\u2500\u2500 makePackage.js\n    \u2502   \u2514\u2500\u2500 \ud83d\udd3amanifest.template.json\n    \u2502   \u2514\u2500\u2500 northwind32.png\n    \u2502   \u2514\u2500\u2500 northwind192.png\n    \u2502   \u2514\u2500\u2500 constants.js\n    \u2502   \u2514\u2500\u2500 identityService.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 server.js\n    \u251c\u2500\u2500 .env_Sample\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 package.json\n    \u251c\u2500\u2500 README.md\n</pre> <pre>\nA03-after-apply-styling\n    \u251c\u2500\u2500 client\n    \u2502   \u251c\u2500\u2500 components\n    \u2502       \u251c\u2500\u2500 navigation.js\n    \u2502   \u2514\u2500\u2500 identity\n    \u2502       \u251c\u2500\u2500 identityClient.js\n    \u2502       \u2514\u2500\u2500 userPanel.js\n    \u251c\u2500\u2500 modules\n    \u2502   \u2514\u2500\u2500 env.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 \ud83d\udd3ateamsHelpers.js\n    \u251c\u2500\u2500 pages\n    \u2502   \u2514\u2500\u2500 categories.html\n    \u2502   \u2514\u2500\u2500 categories.js\n    \u2502   \u2514\u2500\u2500 categoryDetails.html\n    \u2502   \u2514\u2500\u2500 categoryDetails.js\n    \u2502   \u2514\u2500\u2500 myOrders.html\n    \u2502   \u2514\u2500\u2500 orderDetail.html\n    \u2502   \u2514\u2500\u2500 orderDetail.js\n    \u2502   \u2514\u2500\u2500 privacy.html\n    \u2502   \u2514\u2500\u2500 productDetail.html\n    \u2502   \u2514\u2500\u2500 productDetail.js\n    \u2502   \u2514\u2500\u2500 termsofuse.html\n    \u251c\u2500\u2500 index.html\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 \ud83d\udd3anorthwind.css\n    \u251c\u2500\u2500 \ud83c\udd95teamstyle.css\n    \u251c\u2500\u2500 manifest\n    \u2502   \u2514\u2500\u2500 makePackage.js\n    \u2502   \u2514\u2500\u2500 \ud83d\udd3amanifest.template.json\n    \u2502   \u2514\u2500\u2500 northwind32.png\n    \u2502   \u2514\u2500\u2500 northwind192.png\n    \u2502   \u2514\u2500\u2500 constants.js\n    \u2502   \u2514\u2500\u2500 identityService.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 server.js\n    \u251c\u2500\u2500 .env_Sample\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 package.json\n    \u251c\u2500\u2500 README.md\n</pre> </p> <p>In the project structure, on the right under <code>A03-after-apply-styling</code>, you will see emoji \ud83c\udd95 near the files &amp; folders. They are the new files and folders that you need to add into the project structure.</p>"},{"location":"aad/A03-after-apply-styling/#exercise-1-add-css","title":"Exercise 1: Add CSS","text":""},{"location":"aad/A03-after-apply-styling/#step-1-create-a-css-file-for-teams-theme-styles","title":"Step 1: Create a CSS file for Teams theme styles","text":"<p>Create a file <code>teamstyle.css</code> in the <code>client</code> folder and copy below code block into it. These styles are based on the Teams UI Toolkit Figma. If you're working in React, you may want to use the Teams UI Toolkit React Components.</p> <pre><code>:root {\n  /* common */\n  --brand-color: #6264A7;\n  --button-color: #6264A7;\n  --button-text-color: #fff;\n  --button-hover-color: rgb(88, 90, 150);\n  --button-hover-text-color: #fff;\n  --button-active-color: rgb(70, 71, 117);\n  --button-active-text-color: #fff;\n  --button-border: 1px solid hsla(0,0%,100%,.04);\n  --button-shadow: rgb(0 0 0 / 25%) 0px 0.2rem 0.4rem -0.075rem;\n  --button2-color: #fff;\n  --button2-text-color: rgb(37, 36, 35);\n  --button2-hover-color: rgb(237, 235, 233);\n  --button2-active-color: rgb(225, 223, 221);\n  --button2-border: 1px solid rgb(225, 223, 221);\n  --button2-shadow: rgb(0 0 0 / 10%) 0px 0.2rem 0.4rem -0.075rem;\n  --button-disabled-color: rgb(237, 235, 233);\n  --button-disabled-text-color: rgb(200, 198, 196);\n  --input-background-color: rgb(243, 242, 241);\n  --input-border-color: transparent;\n  --input-border-width: 0 0 0.1429rem 0;\n  --input-focus-border-color: transparent;\n  --input-focus-border-bottom-color: #6264A7;\n  --table-color: transparent;\n  --table-border: 1px solid rgb(237, 235, 233);\n  --border-color: rgb(237, 235, 233);\n\n  /* light theme */\n  --font-color: rgb(37, 36, 35);\n  --background-color: #fff;\n  --link-color: #6264A7;\n  --border-color: #E1DFDD;\n  --warning-color: #C4314B;\n}\n\n[data-theme=\"dark\"] {\n  --font-color: #fff;\n  --background-color: transparent;\n  --link-color: #A6A7DC;\n  --border-color: #605E5C;\n  --warning-color: #F9526B;\n}\n\n[data-theme=\"contrast\"] {\n  --brand-color: #ffff01;\n  --font-color: #fff;\n  --link-color: #ffff01;\n  --background-color: transparent;\n  --border-color: #fff;\n  --button-color: transparent;\n  --button-text-color: #fff;\n  --button-hover-color: #ffff01;\n  --button-hover-text-color: #000;\n  --button-active-color: #1aebff;\n  --button-active-text-color: #000;\n  --button-border: .2rem solid #fff;\n  --input-background-color: transparent;\n  --input-border-color: #fff;\n  --input-border-width: 1px;\n  --input-focus-border-color: #1aebff;\n  --input-focus-border-bottom-color: #1aebff;\n  --warning-color: #ffff01;\n}\n\nbody {\n  background-color: var(--background-color);\n  color: var(--font-color);\n  box-sizing: border-box;\n  font-size: 14px;\n}\n\na, a:visited {\n  color: var(--link-color);\n  text-decoration: none;\n}\n\na:hover, a:active {\n  text-decoration: underline;\n}\n\ntable, caption, tbody, tfoot, thead, tr, th, td { /*reset */\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: middle;\n  border-collapse: collapse;\n}\ntable {\n  display: table;\n  background-color: var(--table-color);\n  border-spacing: 0;\n}\ntr {\n  display: table-row;\n  border-bottom: var(--table-border);\n}\nth, td {\n  display: table-cell;\n  height: 3.4286rem;\n  padding: 0 0.5714rem;\n}\n\nth{\n  font-weight: 600;\n}\n\nbutton, input, optgroup, select, textarea {\n  font-family: inherit;\n  font-size: 100%;\n  line-height: 1.15;\n  margin: 0;\n}\n\nbutton {\n  min-width: 6rem;\n  font-weight: 600;\n  height: 2rem;\n  padding: 0 1.25rem;\n  vertical-align: middle;\n  border-radius: 2px;\n  background-color: var(--button-color);\n  color: var(--button-text-color);\n  border: var(--button-border);\n  box-shadow: var(--button-shadow);\n  overflow: visible;\n}\nbutton:hover {\n  background-color: var(--button-hover-color);\n  color: var(--button-active-text-color);\n}\nbutton:active {\n  background-color: var(--button-active-color);\n  color: var(--button-active-text-color);\n  box-shadow: none;\n}\nbutton[disabled] {\n  background-color: var(--button-disabled-color);\n  color: var(--button-disabled-text-color);\n  box-shadow: none;\n}\nbutton:not(:last-child) {\n    margin-right: 0.5rem;\n}\n\nbutton.secondary {\n  background: var(--button2-color);\n  border: var(--button2-border);\n  color: var(--button2-text-color);\n  box-shadow: var(--button2-shadow);\n}\nbutton.secondary:hover {\n  background-color: var(--button2-hover-color);\n}\nbutton.secondary:active {\n  background-color: var(--button2-active-color);\n}\n\nlabel {\n  margin: 0 0.7143rem 0.2857rem 0;\n}\n\ninput {\n  background-color: var(--input-background-color);\n  padding: 0.3571rem 0.8571rem;\n  line-height: unset;\n  border-width: var(--input-border-width);\n  border-radius: 0.2143rem 0.2143rem 0.1429rem 0.1429rem;\n  border-color: var(--input-border-color);\n  outline-style: none;\n  overflow: visible;\n  margin-bottom: 1.4286rem;\n}\ninput:focus {\n  border-color: var(--input-focus-border-color);\n  border-bottom-color: var(--input-focus-border-bottom-color);\n}\n\n[type=checkbox], [type=radio] {\n  padding: 0;\n  margin-right: 0.5rem;\n}\n\nhr {\n  border: 0;\n  height: 1px;\n  background: var(--border-color);\n}\n\n/* Text styling classes */\n\n.medium {\n  font-size: 1rem;\n}\n.small {\n  font-size: 0.8571rem;\n}\n.smaller {\n  font-size: 0.7143rem;\n}\n.large {\n  font-size: 1.2857rem;\n}\n.larger {\n  font-size: 1.7143rem;\n}\n.danger, .warning, .alert, .error {\n  color: var(--warning-color);\n}\n\n\n/* Font */\n\n@font-face {\n  font-family: 'Segoe UI Web';\n  src: url('https://static2.sharepointonline.com/files/fabric/assets/fonts/segoeui-westeuropean/segoeui-regular.woff2') format('woff2'), url('https://static2.sharepointonline.com/files/fabric/assets/fonts/segoeui-westeuropean/segoeui-regular.woff') format('woff');\n  font-weight: 400;\n  font-style: normal;\n}\n\nbody {\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  font-family: 'Segoe UI', 'Segoe UI Web', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif;\n}\n</code></pre> <p>This CSS contains basic stylings for Teams UI. After applying the styles, the existing web app gets more consistent look-and-feel to Teams client.</p> <p>The CSS also includes dark and high-contrast mode. The color switch is done with CSS variables. In the next exercise, you will enable the theme switching functionality in JavaScript.</p>"},{"location":"aad/A03-after-apply-styling/#step-2-import-the-new-css","title":"Step 2: Import the new CSS","text":"<p>To import the <code>teamstyle.css</code> so it is loaded in all pages, add this statement at the top of your northwind.css file.</p> <pre><code>@import \"teamstyle.css\";\n</code></pre>"},{"location":"aad/A03-after-apply-styling/#exercise-2-update-and-run-the-project","title":"Exercise 2: Update and run the project","text":""},{"location":"aad/A03-after-apply-styling/#step-1-modify-modulesteamshelpersjs","title":"Step 1: Modify modules\\teamsHelpers.js","text":"<p>The Teams client supports three themes: light mode, dark mode, and high contrast mode, which is an acceissibility feature for users with low visual acuity. As the users switch the themes, your application should also switch its theme so as to blend in. To detect theme switching in Teams client we'll have to use the global <code>microsoftTeams</code>'s context.</p> <p>We 'll add a function <code>setTheme()</code> to switch the css between the application's native style and the team's themes. Add this code to teamsHelpers.js:</p> <pre><code>// Set the CSS to reflect the desired theme\nfunction setTheme(theme) {\n    const el = document.documentElement;\n    el.setAttribute('data-theme', theme);\n};\n</code></pre> <p>In order to display the application in a particular theme, <code>setTheme()</code> applies a data-theme value in the root of the content, like, <code>&lt;html data-theme='dark'&gt;</code>, so the <code>teamstyle.css</code> will use a correct set of colors &amp; styles for each theme. The color change is done with the CSS variables.</p> <p>Now add in-line code into teamsHelpers.js to detect current context with <code>getContext()</code> and set the theme to match the current theme in Microsoft Teams. The code also registers an event handler that updates the application's theme when a user changes the theme in Microsoft Teams. Note that some browsers and the Teams desktop client will not honor the <code>await</code> keyword for inline code; therefore this code has been wrapped in an immediately-invoked function expression.</p> <p>Copy and paste below code block for this purpose:</p> <pre><code>// Inline code to set theme on any page using teamsHelpers\n(async () =&gt; {\n    await ensureTeamsSdkInitialized();\n    const context = await microsoftTeams.app.getContext();\n    setTheme(context.app.theme);\n\n    // When the theme changes, update the CSS again\n    microsoftTeams.registerOnThemeChangeHandler((theme) =&gt; {\n        setTheme(theme);\n    });    \n})();\n</code></pre>"},{"location":"aad/A03-after-apply-styling/#step-2-start-your-local-project","title":"Step 2: Start your local project","text":"<p>Now it's time to run your updated application and run it in Microsoft Teams. Start the application by running below command: </p> <pre><code>npm start\n</code></pre>"},{"location":"aad/A03-after-apply-styling/#step-3-run-the-application-in-teams-client","title":"Step 3: Run the application in Teams client","text":"<p>Once the teams tab app is added, the personal tab will open <code>My Orders</code> tab. The application will now have the team's native look and feel.</p> <p></p> <p>Here's how to change themes in teams client. Notice how the teams tab app also detects and changes its theme.</p> <p></p>      function showCompletionPopup() {         let path = window.location.pathname;         path = path.endsWith('/') ? path.slice(0, -1) : path;         let pathArray = path.split('/');         let leafFolder = pathArray[pathArray.length-1];          let height = window.outerHeight / 1.5;         let width = window.outerWidth / 2;          window.open(`${window.origin}/app-camp/congrats/${leafFolder}`,                     'Congratulations!',                     `width=${width}, height=${height}, left=100, top=100,`);     }"},{"location":"aad/A03-after-apply-styling/#congratulations","title":"Congratulations!","text":"<p>When you have finished this lab,please click this button to let us know!</p> <p>No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!</p>"},{"location":"aad/A03-after-apply-styling/#next-steps","title":"Next steps","text":"<p>Congratulations! You have completed all core application development labs in path A. It's time to choose your own adventure! Please continue with any of the following labs.</p> <ul> <li>Add a Configurable Tab</li> <li>Add a Deep link to a personal Tab</li> <li>Add a Dialog </li> <li>Add a Meeting app</li> <li>Add a Message Extension</li> <li>Selling Your SaaS-based Teams Extension</li> </ul> <p></p>"},{"location":"aad/ConfigurableTab/","title":"Add a configurable tab","text":""},{"location":"aad/ConfigurableTab/#add-a-configurable-tab","title":"Add a Configurable Tab","text":"<p>Important!</p> <p>This lab builds on the completed solution to lab A03-after-apply-styling.md, which is the last of the \"core\" labs. If you haven't done them, you can start here.</p> <p>Up to this point, the Northwind Teams application has had only \"static\" tabs. Static tabs are for personal use, and aren't part of a Teams channel or group chat. Each static tab has a single, static URL.</p> <p>\"Configurable\" tabs are for sharing; they run in Teams channels and group chats. The idea is that a group of people shares the configuration, so there's shared context. In this lab you will add a configurable tab that displays a specific product category so, for example, the Beverages product team can share a tab with a list of beverages. This saves them navigating through the app every time they want to see Beverages.</p> <p>The Teams manifest for a static tab includes the tab's URL, but for a configurable tab it includes the URL of the tab's configuration page.  The configuration page will allow users to configure what information is shown on the tab; based on this the configuration page saves the actual tab URL and a unique entity ID using the Teams JavaScript SDK. This URL can lead users directly to the information they want, or the tab to a page that looks at the entity ID to decide what to display. In this lab, the tab URL will display the product category directly, so the entity ID isn't really used. </p> <p>Configuration pages don't just work for tabs; they can also be used as setup pages for Message Extensions or Connectors, so they're worth learning about!</p> <p>In this lab you will learn to:</p> <ul> <li>Create a configurable tab with accompanying configuration page</li> <li>Add a configurable page to your Teams application</li> </ul> Video briefing <p> Configurable Tabs for Microsoft Teams </p>"},{"location":"aad/ConfigurableTab/#features","title":"Features","text":"<ul> <li>Microsoft Teams configurable tab to display a product category</li> </ul>"},{"location":"aad/ConfigurableTab/#exercise-1-create-a-configuration-page","title":"Exercise 1: Create a configuration page","text":""},{"location":"aad/ConfigurableTab/#step-1-add-the-configuration-page-markup","title":"Step 1: Add the configuration page markup","text":"<p>Create a new file /client/pages/tabconfig.html and add this markup (or copy it from here):</p> <pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Tab Configuration&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"/northwind.css\" /&gt;\n    &lt;link rel=\"icon\" href=\"data:;base64,=\"&gt; &lt;!-- Suppress favicon error --&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n    &lt;br /&gt;&lt;br /&gt;\n    &lt;p&gt;Please select a product category to display in this tab&lt;/p&gt;\n    &lt;select id=\"categorySelect\"&gt;\n        &lt;option disabled=\"disabled\" selected=\"selected\"&gt;Select a category&lt;/option&gt;\n    &lt;/select&gt;\n    &lt;div id=\"message\" class=\"errorMessage\"&gt;&lt;/div&gt;\n\n    &lt;script type=\"module\" src=\"tabConfig.js\"&gt;&lt;/script&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"aad/ConfigurableTab/#step-2-add-the-configuration-page-script","title":"Step 2: Add the configuration page script","text":"<p>Create a new file, /client/pages/tabconfig.js, and paste in this code (or copy it from here):</p> <pre><code>import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js';\nimport { ensureTeamsSdkInitialized } from '../modules/teamsHelpers.js';\nimport { getLoggedInEmployee } from '../identity/identityClient.js';\n\nimport {\n    getCategories\n} from '../modules/northwindDataService.js';\n\nasync function displayUI() {\n\n    const categorySelect = document.getElementById('categorySelect');\n    const messageDiv = document.getElementById('message');\n\n    try {\n\n        const employee = await getLoggedInEmployee();\n        if (!employee) {\n            // Nobody was logged in, redirect to login page\n            window.location.href = \"/identity/aadLogin.html\";\n        }\n        let selectedCategoryId = 0;\n        let selectedCategoryName = '';\n\n        if (employee) {\n\n            await ensureTeamsSdkInitialized();\n\n            // Set up the save handler for when they save the config\n            microsoftTeams.pages.config.registerOnSaveHandler((saveEvent) =&gt; {\n\n                const url = `${window.location.origin}/pages/categoryDetail.html?categoryId=${selectedCategoryId}`;\n                const entityId = `ProductCategory ${selectedCategoryId}`;\n                microsoftTeams.settings.setSettings({\n                    \"suggestedDisplayName\": selectedCategoryName,\n                    \"entityId\": entityId,\n                    \"contentUrl\": url,\n                    \"websiteUrl\": url\n                });\n                saveEvent.notifySuccess();\n            });\n\n            // Populate the dropdown so they can choose a config\n            const categories = await getCategories();\n            categories.forEach((category) =&gt; {\n                const option = document.createElement('option');\n                option.value = category.categoryId;\n                option.innerText = category.displayName;\n                categorySelect.appendChild(option);\n            });\n\n            // When a category is selected, it's OK to save\n            categorySelect.addEventListener('change', (ev) =&gt; {\n                selectedCategoryName = ev.target.options[ev.target.selectedIndex].innerText;\n                selectedCategoryId = ev.target.value;\n                microsoftTeams.settings.setValidityState(true);\n            });\n        }\n\n    }\n    catch (error) {            // If here, we had some other error\n        messageDiv.innerText = `Error: ${JSON.stringify(error.message)}`;\n    }\n}\n\ndisplayUI();\n</code></pre>"},{"location":"aad/ConfigurableTab/#exercise-2-add-the-configurable-tab-to-your-app-manifest","title":"Exercise 2: Add the configurable tab to your app manifest","text":""},{"location":"aad/ConfigurableTab/#step-1-update-the-manifest-template","title":"Step 1: Update the manifest template","text":"<p>In your code editor, open the manifest/manifest.template.json file.</p> <p>Update the version number so it's greater than it was; for example if your manifest was version 1.4, make it 1.4.1 or 1.5.0. This is required in order for you to update the app in Teams.</p> <pre><code>\"version\": \"1.5.0\"\n</code></pre> <p>NOTE: Make each new version greater than the last so you can update the application in Teams!</p> <p>Now, immediately under the \"accentColor\" property, add a new property for \"configurableTabs\":</p> <pre><code>  \"configurableTabs\": [\n    {\n        \"configurationUrl\": \"https://&lt;HOST_NAME&gt;/pages/tabConfig.html\",\n        \"canUpdateConfiguration\": true,\n        \"scopes\": [\n            \"team\",\n            \"groupchat\"\n        ]\n    }\n],\n</code></pre>"},{"location":"aad/ConfigurableTab/#step-2-rebuild-your-application-package","title":"Step 2: Rebuild your application package","text":"<p>Open a command line tool in your working folder and type</p> <pre><code>npm run package\n</code></pre> <p>This will generate a new manifest.json file and a new application package (northwind.zip).</p>"},{"location":"aad/ConfigurableTab/#exercise-3-test-your-configurable-tab","title":"Exercise 3: Test your configurable tab","text":""},{"location":"aad/ConfigurableTab/#step-1-ensure-you-have-a-team-to-test-in","title":"Step 1: Ensure you have a Team to test in","text":"<p>If you already have a Team you can test with, skip to the next step. If not, begin by clicking the \"Join or create a Team\" button 1\ufe0f\u20e3 and then \"Create a team\" 2\ufe0f\u20e3.</p> <p></p> <p>Click \"From scratch\".</p> <p></p> <p>Then click your choice of \"Private\" or \"Public\". \"Org-wide\" is OK too but be aware this only works for Teams administrators and you can only have 5 of them in your tenant.</p> <p></p> <p>Then follow the wizard to give your Team a name and description and optionally add some members so you don't have to collaborate all by yourself.</p>"},{"location":"aad/ConfigurableTab/#step-2-run-your-app","title":"Step 2: Run your app","text":"<p>In your working directory run this command to start the application </p> <pre><code>npm start\n</code></pre>"},{"location":"aad/ConfigurableTab/#step-3-upload-the-app-package","title":"Step 3: Upload the app package","text":"<p>In the Teams web or desktop UI, click \"Apps\" in the sidebar 1\ufe0f\u20e3, then \"Manage your apps\" 2\ufe0f\u20e3. At this point you have three choices:</p> <ul> <li>Upload a custom app (upload the app for yourself or a specific team or group chat) - this only appears if you have enabled \"Upload custom apps\" in your setup policy; this was a step in the previous lab</li> <li>Upload an app to your org's app catalog (upload the app for use within your organization) - this only appears if you are a tenant administrator</li> <li>Submit an app to your org (initiate a workflow asking a tenant administrator to install your app) - this appears for everyone</li> </ul> <p>In this case, choose the first option 3\ufe0f\u20e3.</p> <p></p> <p>Navigate to the Northwind.zip file in your manifest directory and upload it. Although the application is already installed, you are providing a newer version so it will update the application. </p> <p>This time the \"Add\" button will have a little arrow in it so you can add the app to a particular Team or Group Chat. Click the little arrow 1\ufe0f\u20e3 and then \"Add to a Team\" 2\ufe0f\u20e3.</p> <p></p> <p>Type the name of a Team or channel in the search box 1\ufe0f\u20e3 and select the one where you want to add the application 2\ufe0f\u20e3. This will enable the \"Set up\" button 3\ufe0f\u20e3; click it to add your app to the Team.</p> <p></p> <p>You should now see your configuration page, which provides the ability to select one product category 1\ufe0f\u20e3 from the Northwind database. When you select one, the save event handler you declared with <code>registerOnSaveHandler()</code> runs and validates the form. If it's valid (it will always be in this case), the code calls <code>notifySuccess()</code>. which enables the \"Save\" button 2\ufe0f\u20e3.</p> <p></p> <p>Click the Save button to view your new tab.</p> <p></p> <p>You can click the talk bubble in the upper left of the screen to open the chat; now people in the channel can chat about your app while they use it! This is a lot easier than navigating back and forth between the tab and the chat.</p>"},{"location":"aad/ConfigurableTab/#step-4-run-it-again","title":"Step 4: Run it again","text":"<p>If you click the small arrow to the right of the tab name and choose \"Settings\", Teams will open the configuration page again so you can change the settings. This is possible because in the the Teams app manifest the <code>\"canUpdateConfiguration\"</code> property is set to true; if you set it to false, the settings option will not be available.</p>      function showCompletionPopup() {         let path = window.location.pathname;         path = path.endsWith('/') ? path.slice(0, -1) : path;         let pathArray = path.split('/');         let leafFolder = pathArray[pathArray.length-1];          let height = window.outerHeight / 1.5;         let width = window.outerWidth / 2;          window.open(`${window.origin}/app-camp/congrats/${leafFolder}`,                     'Congratulations!',                     `width=${width}, height=${height}, left=100, top=100,`);     }"},{"location":"aad/ConfigurableTab/#congratulations","title":"Congratulations!","text":"<p>When you have finished this lab,please click this button to let us know!</p> <p>No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!</p>"},{"location":"aad/ConfigurableTab/#known-issues","title":"Known issues","text":"<p>For the latest issues, or to file a bug report, see the github issues list for this repository.</p>"},{"location":"aad/ConfigurableTab/#references","title":"References","text":"<ul> <li>Create a configuration page</li> </ul>"},{"location":"aad/ConfigurableTab/#next-steps","title":"Next steps","text":"<p>After completing this lab, you may continue with additional extended labs!</p> <ul> <li>Add a Configurable Tab</li> <li>Add a Deep link to a personal Tab</li> <li>Add a Dialog </li> <li>Add a Meeting app</li> <li>Add a Message Extension</li> <li>Selling Your SaaS-based Teams Extension</li> </ul> <p></p>"},{"location":"aad/Deeplink/","title":"Add a Deep link to a personal Tab","text":""},{"location":"aad/Deeplink/#add-a-deep-link-to-a-personal-tab","title":"Add a Deep link to a personal Tab","text":"<p>Important!</p> <p>This lab builds on the completed solution to lab A03-after-apply-styling.md, which is the last of the \"core\" labs. If you haven't done them, you can start here.</p> <p>Deep links help the user to directly navigate to the content. In this lab we will create deep link to entities in Teams so the user can navigate to contents within the app's tab.</p> <p>In this lab you will learn new concepts as below:</p> <ul> <li>Generating deep links that open your application in Teams</li> <li>Pass business context in deep links to your application using a the Teams SDK <code>context</code> object</li> </ul> Video briefing <p> Deep links to Microsoft Teams applications </p>"},{"location":"aad/Deeplink/#features","title":"Features","text":"<ul> <li>In the application's order details page, add a button to copy the order's tab link into clipboard, that helps users share the link via chat or outlook to colleague, for them to navigate easily to that specific order.</li> </ul>"},{"location":"aad/Deeplink/#how-to-build-the-deep-link","title":"How to build the deep link","text":"<p>You'll use this syntax to create the deep link for this lab:</p> <pre><code>https://teams.microsoft.com/l/entity/&lt;app-id&gt;/&lt;entitiyId&gt;?context={\"subEntityId\": \"&lt;subEntityId&gt;\"}\n</code></pre> <p>where:</p> <ul> <li>app-id - This teams app id from the manifest file</li> <li>entityId - This is defined in your manifest file in the <code>staticTabs</code> object for the particular entity (tab). In our case this is the entity id <code>Orders</code> of  <code>My Orders</code> tab.</li> <li>subEntityId - This is the ID for the item you are displaying information for. This is similar to query parameters. In our case in this lab, it will be the orderId. </li> </ul> <p>Note</p> <p>The subEntityId is the query parameter name. When you pass this value, the context will store this information in page.subPageId in Teams JS v2 of the SDK. Previously this was stored in the context as subEntityId. There has been a visual change.</p> <p>Full details are here in the documentation.</p>"},{"location":"aad/Deeplink/#exercise-1-code-changes","title":"Exercise 1: Code changes","text":""},{"location":"aad/Deeplink/#step-1-update-the-order-detail-page-html","title":"Step 1: Update the Order Detail page HTML","text":"<p>In this step, you will edit the Order Detail page to include a \"Copy Link\" button which copies a deep link to this order to the clipboard.</p> <p>In your working folder, open client/page/orderDetail.html.</p> <p>Let's add the copy to clipboard button and a div to display a message to show if the copy was successful.</p> <p>Copy this code code and paste it above <code>orderDetails</code> div element.</p> <pre><code>&lt;div id=\"copySection\" style=\"display: none;\"&gt;\n&lt;div&gt; &lt;button id=\"btnCopyOrderUrl\"&gt;Copy order url&lt;/button&gt;&lt;/div&gt;\n    &lt;div style=\"flex-grow: 1;padding:5px;\" id=\"copyMessage\"&gt;Copy to clipboard&lt;/div&gt;\n&lt;/div&gt; \n</code></pre>"},{"location":"aad/Deeplink/#step-2-update-the-order-detail-page-javascript","title":"Step 2: Update the Order Detail page JavaScript","text":"<p>In this step, you will add code to the Order Detail page that responds to click events on the \"Copy link\" button. When the button is pressed, the code will generate a deep link back to the currently displayed order.</p> <p>In your working folder, open client/page/orderDetail.js.</p> <p>Import the environment file from the server to get access to the Teams application ID, which is used in creating a deep link.</p> <p>Paste below code above the displayUI() function definition.</p> <pre><code>import { env } from '/modules/env.js';\n</code></pre> <p>Now replace the displayUI() function with below definition, which includes code to generate a deep link when the \"Copy URL\" button is pushed.</p> <pre><code>async function displayUI() {\n\n    const displayElement = document.getElementById('content');\n    const detailsElement = document.getElementById('orderDetails');\n    const copyUrlElement = document.getElementById('btnCopyOrderUrl');\n    const copyMsgElement = document.getElementById('copyMessage');\n    const copySectionElement = document.getElementById('copySection');\n    const errorMsgElement = document.getElementById('message');\n    try {\n\n        const searchParams = new URLSearchParams(window.location.search);\n        if (searchParams.has('orderId')) {\n            const orderId = searchParams.get('orderId');\n            const order = await getOrder(orderId);\n            displayElement.innerHTML = `\n                    &lt;h1&gt;Order ${order.orderId}&lt;/h1&gt;\n                    &lt;p&gt;Customer: ${order.customerName}&lt;br /&gt;\n                    Contact: ${order.contactName}, ${order.contactTitle}&lt;br /&gt;\n                    Date: ${new Date(order.orderDate).toDateString()}&lt;br /&gt;\n                    ${order.employeeTitle}: ${order.employeeName} (${order.employeeId})\n                    &lt;/p&gt;\n                `;\n            order.details.forEach(item =&gt; {\n                const orderRow = document.createElement('tr');\n                orderRow.innerHTML = `&lt;tr&gt;\n                        &lt;td&gt;${item.quantity}&lt;/td&gt;\n                        &lt;td&gt;&lt;a href=\"/pages/productDetail.html?productId=${item.productId}\"&gt;${item.productName}&lt;/a&gt;&lt;/td&gt;\n                        &lt;td&gt;${item.unitPrice}&lt;/td&gt;\n                        &lt;td&gt;${item.discount}&lt;/td&gt;\n                    &lt;/tr&gt;`;\n                detailsElement.append(orderRow);\n\n            });\n\n            copySectionElement.style.display = \"flex\";\n            copyUrlElement.addEventListener('click', async ev =&gt; {\n                try {\n                    //temp textarea for copy to clipboard functionality\n                    var textarea = document.createElement(\"textarea\");\n                    const encodedContext = encodeURI(`{\"subEntityId\": \"${order.orderId}\"}`);\n                    //form the deeplink                       \n                    const deeplink = `https://teams.microsoft.com/l/entity/${env.TEAMS_APP_ID}/Orders?&amp;context=${encodedContext}`;\n                    textarea.value = deeplink;\n                    document.body.appendChild(textarea);\n                    textarea.select();\n                    document.execCommand(\"copy\"); //deprecated but there is an issue with navigator.clipboard api\n                    document.body.removeChild(textarea);\n                    copyMsgElement.innerHTML = \"Link copied!\"\n\n                } catch (err) {\n                    console.error('Failed to copy: ', err);\n                }\n            });\n        } else {\n            errorMsgElement.innerText = `No order to show`;\n            displayElement.style.display = \"none\";\n            orderDetails.style.display = \"none\";\n        }\n\n    }\n    catch (error) {            // If here, we had some other error\n        errorMsgElement.innerText = `Error: ${JSON.stringify(error)}`;\n    }\n}\n</code></pre> <p>Explanation for these code changes</p> <p>The deep link is created in the <code>copyUrlElement.addEventListener()</code> function.</p> <p>The deep link will navigate: * to Microsoft Teams * to the Northwind Orders application * to the Orders tab, which brings up the myOrders.js page * to a specific order ID</p> <p>The App ID is included in the deep link to help Teams display the correct application. The teams app id is taken from <code>.env</code> file, which is the id in the manifest file.</p> <p>The <code>entityId</code> identifies the tab; in this case it is <code>Orders</code>, which is the id for  <code>My Orders</code> tab. This is set in the manifest.json file; the relevant section is shown below for your reference.</p> <p><code>encodedContext</code> is a JSON constant that defines the parameter(subEntityId) to be passed to the tab; in this case it's the order ID.</p> <pre><code>\"staticTabs\": [\n    {\n        \"entityId\": \"Orders\",\n        \"name\": \"My Orders\",\n        \"contentUrl\": \"https://&lt;HOST_NAME&gt;/pages/myOrders.html\",\n        \"websiteUrl\": \"https://&lt;HOST_NAME&gt;/pages/myOrders.html\",\n        \"scopes\": [\n            \"personal\"\n        ]\n    },\n    {\n        \"entityId\": \"Products\",\n        \"name\": \"Products\",\n        \"contentUrl\": \"https://&lt;HOST_NAME&gt;/pages/categories.html\",\n        \"websiteUrl\": \"https://&lt;HOST_NAME&gt;/pages/categories.html\",\n        \"scopes\": [\n            \"personal\"\n        ]\n    }\n],\n</code></pre> <p>A tab's Entity ID is defined in the app manifest for static tabs</p>"},{"location":"aad/Deeplink/#step-3-update-the-my-orders-page-to-redirect-deep-links-directly-to-the-order-detail-page","title":"Step 3: Update the My Orders page to redirect deep links directly to the order detail page","text":"<p>In your working folder, open the client/myOrders.js file.</p> <p>Add import statements for the Microsoft Teams SDK and the Teams helper functions.</p> <pre><code>import { ensureTeamsSdkInitialized, inTeams } from '../modules/teamsHelpers.js';\nimport 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js';\n</code></pre> <p>Using the <code>My Orders</code> tab as the base, we will redirect the deeplink to the <code>Order details</code> page to show the order only if the subEntitiyId is present in the teams context. In the <code>displayUI()</code> function, at the top of the <code>try</code> block, add code to check for a page.subPageId  which is where the passed subEntitiyId is stored in the context from v2 of the Teams JS SDK.Once it is found, do the redirect to the sub page.</p> <pre><code>// Handle incoming deep links by redirecting to the selected order\nif (await inTeams()) {\n    await ensureTeamsSdkInitialized();\n    const context = await microsoftTeams.app.getContext();\n    if (context.page.subPageId) {\n        window.location.href = `/pages/orderDetail.html?orderId=${context.page.subPageId}`;\n    }\n}\n</code></pre> <p>The updated function definition looks like below:</p> <pre><code>async function displayUI() {\n\n    const displayElement = document.getElementById('content');\n    const ordersElement = document.getElementById('orders');\n    const messageDiv = document.getElementById('message');\n\n    try {\n\n        // Handle incoming deep links by redirecting to the selected order\n        if (await inTeams()) {\n            await ensureTeamsSdkInitialized();\n            const context = await microsoftTeams.app.getContext();\n            if (context.page.subPageId) {\n                window.location.href = `/pages/orderDetail.html?orderId=${context.page.subPageId}`;\n            }\n        }\n\n        // Display order data\n        const employee = await getLoggedInEmployee();\n        if (employee) {\n\n            displayElement.innerHTML = `\n                &lt;h3&gt;Orders for ${employee.displayName}&lt;h3&gt;\n            `;\n\n            employee.orders.forEach(order =&gt; {\n                const orderRow = document.createElement('tr');\n                orderRow.innerHTML = `&lt;tr&gt;\n                &lt;td&gt;&lt;a href=\"/pages/orderDetail.html?orderId=${order.orderId}\"&gt;${order.orderId}&lt;/a&gt;&lt;/td&gt;\n                &lt;td&gt;${(new Date(order.orderDate)).toDateString()}&lt;/td&gt;\n                &lt;td&gt;${order.shipName}&lt;/td&gt;\n                &lt;td&gt;${order.shipAddress}, ${order.shipCity} ${order.shipRegion || ''} ${order.shipPostalCode || ''} ${order.shipCountry}&lt;/td&gt;\n            &lt;/tr&gt;`;\n                ordersElement.append(orderRow);\n\n            });\n        }\n    }\n    catch (error) {            // If here, we had some other error\n        messageDiv.innerText = `Error: ${JSON.stringify(error)}`;\n    }\n}\n</code></pre>"},{"location":"aad/Deeplink/#step-4-update-the-server-to-provide-the-teams-app-id-as-an-environment-variable","title":"Step 4: Update the server to provide the Teams app ID as an environment variable","text":"<p>In your working folder, open the server/server.js file.</p> <p>This app uses a little trick to provide the client-side code with values from the .env file (or environment settings when the app is deployed). When the client requests /modules.env.js, the server will pass selected environment variables to the client. Care has been taken to not pass any secrets to the client, and the code explicitly copies only a few non-sensitive values.</p> <p>Since the client side needs the Teams app ID, we need to add that to the list of values.</p> <p>Update the request <code>app.get('/modules/env.js')</code> and add TEAMS_APP_ID as below:</p> <pre><code>app.get('/modules/env.js', (req, res) =&gt; {\n  res.contentType(\"application/javascript\");\n  res.send(`\n    export const env = {\n      HOST_NAME: \"${process.env.HOST_NAME}\",\n      TENANT_ID: \"${process.env.TENANT_ID}\",\n      CLIENT_ID: \"${process.env.CLIENT_ID}\",\n      TEAMS_APP_ID: \"${process.env.TEAMS_APP_ID}\"\n    };\n  `);\n});\n</code></pre>"},{"location":"aad/Deeplink/#exercise-2-test-the-changes","title":"Exercise 2: Test the changes","text":""},{"location":"aad/Deeplink/#step-1-run-the-application-in-teams-client","title":"Step 1 : Run the application in Teams client","text":"<p>Now that you have applied all code changes, let's test the features. This lab assumes you already completed the Core lab and registered an Azure AD application, built and uploaded your Teams package, etc. So at this point, all you should need to do is run</p> <pre><code>npm start\n</code></pre> <p>Once you are in the application, go to <code>My orders</code> page and select any order. Select Copy order url.</p> <p>On selection, the message next to button changes from Copy to clipboard to Link copied!</p> <p>Now open the link in a new browser tab. It should open Microsoft Teams showing the Northwind Orders application with the order information displayed. This animated picture shows the solution in action.</p> <p></p>      function showCompletionPopup() {         let path = window.location.pathname;         path = path.endsWith('/') ? path.slice(0, -1) : path;         let pathArray = path.split('/');         let leafFolder = pathArray[pathArray.length-1];          let height = window.outerHeight / 1.5;         let width = window.outerWidth / 2;          window.open(`${window.origin}/app-camp/congrats/${leafFolder}`,                     'Congratulations!',                     `width=${width}, height=${height}, left=100, top=100,`);     }"},{"location":"aad/Deeplink/#congratulations","title":"Congratulations!","text":"<p>When you have finished this lab,please click this button to let us know!</p> <p>No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!</p>"},{"location":"aad/Deeplink/#references","title":"References","text":"<ul> <li>Deep links</li> </ul>"},{"location":"aad/Deeplink/#known-issues","title":"Known issues","text":"<p>For the latest issues, or to file a bug report, see the github issues list for this repository.</p>"},{"location":"aad/Deeplink/#next-steps","title":"Next steps","text":"<p>After completing this lab, you may continue with additional extended labs!</p> <ul> <li>Add a Configurable Tab</li> <li>Add a Deep link to a personal Tab</li> <li>Add a Dialog </li> <li>Add a Meeting app</li> <li>Add a Message Extension</li> <li>Selling Your SaaS-based Teams Extension</li> </ul> <p></p>"},{"location":"aad/Dialog/","title":"Add a Dialog","text":""},{"location":"aad/Dialog/#add-a-dialog","title":"Add a Dialog","text":"<p>Important!</p> <p>This lab builds on the completed solution to lab A03-after-apply-styling.md, which is the last of the \"core\" labs. If you haven't done them, you can start here.</p> <p>Dialogs as they are call it in version 2 of the SDK are modal pop-up experiences in Teams application that can display web pages as IFrames or adaptive cards. This can greatly simplify the user experience when a data input is required, and gives your application an opportunity to interact one-on-one with a user even in a group environment.</p> <p>There are many ways you can incorporate a dialog. In this lab we focus on using the app's own HTML form.</p> <p>In this lab you will learn to:</p> <ul> <li>How to build a Dialog using a web page</li> <li>How to launch a dialog from a tab using the Teams JavaScript SDK</li> <li>How to submit data from the dialog back to the tab that launched it</li> </ul> <p>The completed lab is here</p> Video briefing <p> Using Dialogs in Microsoft Teams apps </p>"},{"location":"aad/Dialog/#features","title":"Features","text":"<ul> <li>In the application's order details page, there will be a button that allows adding notes to the order</li> <li>Pressing the button opens a dialog to capture the notes</li> <li>The notes are passed back to the order details page and displayed there</li> </ul>"},{"location":"aad/Dialog/#exercise-1-code-changes","title":"Exercise 1: Code changes","text":""},{"location":"aad/Dialog/#step-1-add-the-html-page-and-javascript-file-that-will-be-displayed-in-the-dialog","title":"Step 1: Add the HTML page and JavaScript file that will be displayed in the dialog","text":"<p>In your working folder, under the <code>/client/pages</code> path, create a new file <code>orderNotesForm.html</code> and copy this code to it:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Dialog: Update order notes&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"/northwind.css\" /&gt;\n    &lt;link rel=\"icon\" href=\"data:;base64,=\"&gt; &lt;!-- Suppress favicon error --&gt;\n&lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;form id=\"orderForm\"&gt;\n            &lt;div&gt;                \n               &lt;textarea id=\"notes\" name=\"notes\" rows=\"4\" cols=\"50\"&gt;&lt;/textarea&gt;               \n            &lt;/div&gt;\n            &lt;div&gt;\n                &lt;button type=\"submit\" tabindex=\"2\"&gt;Save&lt;/button&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n        &lt;script type=\"module\" src=\"orderNotesForm.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\n</code></pre> <p>In the same folder, under the <code>/client/pages</code> path, create a new file <code>orderNotesForm.js</code> and copy this code to it:</p> <pre><code>import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js';\nimport { ensureTeamsSdkInitialized } from '../modules/teamsHelpers.js';\nimport {env} from '../modules/env.js'\nasync function displayUI() {\n    await ensureTeamsSdkInitialized();\n    document.getElementById('orderForm').addEventListener(\"submit\", async (e) =&gt; {\n        let orderFormInfo = {\n            notes: document.forms[\"orderForm\"][\"notes\"].value,\n        };     \n        await microsoftTeams.dialog.submit(orderFormInfo,env.TEAMS_APP_ID);\n        return true;\n    });\n}\ndisplayUI();\n\n</code></pre> <p>This is a web form which captures an input <code>notes</code> which is a multi line text area. The form uses Microsoft Teams SDK's <code>microsoftTeams.dialog.submit</code> function to pass the form values back into a callback function.</p>"},{"location":"aad/Dialog/#step-2-update-the-order-detail-html","title":"Step 2: Update the Order Detail HTML","text":"<p>In this step, we'll add an \"Add Notes\" button to the Order Detail page and an HTML element to display the notes.</p> <p>In your working folder, open /client/pages/orderDetail.html</p> <p>Copy below block of code and paste it above the <code>&lt;table&gt;</code> element of the page.</p> <pre><code>&lt;div id=\"orderContent\"&gt;    \n&lt;/div&gt;\n&lt;br/&gt;\n&lt;button id=\"btnTaskModule\"&gt;Add notes&lt;/button&gt;\n</code></pre>"},{"location":"aad/Dialog/#step-3-update-the-order-detail-javascript","title":"Step 3: Update the Order Detail JavaScript","text":"<p>In your working folder, open /client/pages/orderDetail.js.</p> <p>At the top of the file, import the Teams SDK and Teams helper module.</p> <pre><code>import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js';\nimport { ensureTeamsSdkInitialized } from '/modules/teamsHelpers.js';\n</code></pre> <p>Now in the displayUI() function, define two constants to get the two HTML elements we just added.</p> <pre><code> const btnTaskModuleElement = document.getElementById('btnTaskModule');\n const orderElement=document.getElementById('orderContent');\n</code></pre> <p>To open the dialog, add an event listener for the button <code>btnTaskModule</code>. Paste below code in the <code>dislayUI()</code> function in the end, before closing the <code>try</code> block.</p> <pre><code>    btnTaskModuleElement.addEventListener('click', async ev =&gt; {\n            await ensureTeamsSdkInitialized();\n            if (!microsoftTeams.dialog.isSupported()) {\n                alert ('Sorry this button is not supported');\n            } else {              \n                let taskInfo = {\n                    title: null,\n                    height: null,\n                    width: null,\n                    url: null,               \n                    fallbackUrl: null                   \n                };\n                taskInfo.url = `https://${window.location.hostname}/pages/orderNotesForm.html`;\n                taskInfo.title = \"Order notes\";\n                taskInfo.size= {height:210,width: 400};   \n                let submitHandler = (response) =&gt; { \n                    if(response.result){\n                        const result=response.result;\n                        const postDate = new Date().toLocaleString()\n                        const newComment = document.createElement('p');\n                            if (result.notes) {\n                                newComment.innerHTML = `&lt;div&gt;&lt;b&gt;Posted on:&lt;/b&gt;${postDate}&lt;/div&gt;\n                            &lt;div&gt;&lt;b&gt;Notes:&lt;/b&gt;${result.notes}&lt;/div&gt;&lt;br/&gt;\n                            -----------------------------` \n                            orderElement.append(newComment);\n                        } \n                    }else{\n                        console.log(`Error in response from dialog.submit${response.err}`)\n                    }               \n\n                    };\n                microsoftTeams.dialog.open(taskInfo,submitHandler)\n            }\n        });  \n</code></pre> <p>To open a dialog from a tab, use <code>microsoftTeams.dialog.open()</code>. You can also check if a capability is supported in the app running in Microsoft 365 apps (in case you plan to extend your application across Microsoft365 host apps like outlook/office.com). Here dialog is a capability so we are checking if it is supported using <code>microsoftTeams.dialog.isSupported()</code> function.</p> <p>You can pass the taskInfo object and a callback function called <code>submitHandler</code> to pass the results back from the dialog.</p> <p>The final look of displayUI() function is as below:</p> <pre><code>async function displayUI() {\n\n    const displayElement = document.getElementById('content');\n    const detailsElement = document.getElementById('orderDetails');\n    const btnTaskModuleElement = document.getElementById('btnTaskModule');\n    const orderElement=document.getElementById('orderContent');\n    try {\n\n        const searchParams = new URLSearchParams(window.location.search);\n        if (searchParams.has('orderId')) {\n            const orderId = searchParams.get('orderId');\n\n            const order = await getOrder(orderId);\n\n            displayElement.innerHTML = `\n                    &lt;h1&gt;Order ${order.orderId}&lt;/h1&gt;\n                    &lt;p&gt;Customer: ${order.customerName}&lt;br /&gt;\n                    Contact: ${order.contactName}, ${order.contactTitle}&lt;br /&gt;\n                    Date: ${new Date(order.orderDate).toDateString()}&lt;br /&gt;\n                    ${order.employeeTitle}: ${order.employeeName} (${order.employeeId})\n                    &lt;/p&gt;\n                `;\n\n            order.details.forEach(item =&gt; {\n                const orderRow = document.createElement('tr');\n                orderRow.innerHTML = `&lt;tr&gt;\n                        &lt;td&gt;${item.quantity}&lt;/td&gt;\n                        &lt;td&gt;&lt;a href=\"/pages/productDetail.html?productId=${item.productId}\"&gt;${item.productName}&lt;/a&gt;&lt;/td&gt;\n                        &lt;td&gt;${item.unitPrice}&lt;/td&gt;\n                        &lt;td&gt;${item.discount}&lt;/td&gt;\n                    &lt;/tr&gt;`;\n                detailsElement.append(orderRow);\n\n            });\n\n        }     \n        btnTaskModuleElement.addEventListener('click', async ev =&gt; {\n            await ensureTeamsSdkInitialized();\n            if (!microsoftTeams.dialog.isSupported()) {\n                alert ('Sorry this button is not supported');\n            } else {              \n                let taskInfo = {\n                    title: null,\n                    height: null,\n                    width: null,\n                    url: null,               \n                    fallbackUrl: null                   \n                };\n                taskInfo.url = `https://${window.location.hostname}/pages/orderNotesForm.html`;\n                taskInfo.title = \"Order notes\";\n                taskInfo.size= {height:210,width: 400};   \n                let submitHandler = (response) =&gt; { \n                    if(response.result){\n                        const result=response.result;\n                        const postDate = new Date().toLocaleString()\n                        const newComment = document.createElement('p');\n                            if (result.notes) {\n                                newComment.innerHTML = `&lt;div&gt;&lt;b&gt;Posted on:&lt;/b&gt;${postDate}&lt;/div&gt;\n                            &lt;div&gt;&lt;b&gt;Notes:&lt;/b&gt;${result.notes}&lt;/div&gt;&lt;br/&gt;\n                            -----------------------------` \n                            orderElement.append(newComment);\n                        } \n                    }else{\n                        console.log(`Error in response from dialog.submit${response.err}`)\n                    }               \n\n                    };\n                microsoftTeams.dialog.open(taskInfo,submitHandler)\n            }\n        });               \n\n    }\n    catch (error) {            // If here, we had some other error\n        message.innerText = `Error: ${JSON.stringify(error)}`;\n    }\n}\n</code></pre>"},{"location":"aad/Dialog/#step-4-update-the-servejs-file","title":"Step 4: Update the serve.js file","text":"<p>In your working folder, open /server/server.js and update the <code>app.get('/modules/env.js')</code> call to send an additional property TEAMS_APP_ID, which is the teams application's <code>id</code> (as in the manifest file) to be used in client side pages.</p> <pre>\napp.get('/modules/env.js', (req, res) =&gt; {\n  res.contentType(\"application/javascript\");\n  res.send(`\n    export const env = {\n      HOST_NAME: \"${process.env.HOST_NAME}\",\n      TENANT_ID: \"${process.env.TENANT_ID}\",\n      CLIENT_ID: \"${process.env.CLIENT_ID}\",\n      TEAMS_APP_ID:\"${process.env.TEAMS_APP_ID}\"\n    };\n  `);\n});\n</pre>  TEAMS_APP_ID is used in the <code>dialog.submit()</code>as a parameter along with the results that needs to be sent back to the <code>submitHandler()</code> callback function. Although this is an optional parameter, there is a known issue in the TeamsJS SDK v2 which needs the parameter to be passed."},{"location":"aad/Dialog/#exercise-2-test-the-changes","title":"Exercise 2: Test the changes","text":""},{"location":"aad/Dialog/#step-1-run-the-application-in-teams-client","title":"Step 1 : Run the application in Teams client","text":"<p>Now that you have applied all code changes, let's test the features. This lab assumes you already completed the Core lab and registered an Azure AD application, built and uploaded your Teams package, etc. So at this point, all you should need to do is run</p> <ul> <li>Once you are in the application, go to <code>My orders</code> page and select any order.</li> <li>Once in the order details page, select the Add notes button to open the dialog.</li> <li>Add comment/note and select Save.</li> <li>Notice the dialog closed and the results getting added into the order details page.</li> </ul> <p></p> <p>Note</p> <p>The comments are not saved back into the northwind database at this time, so they'll only persist as long as you stay on the order details page.</p>      function showCompletionPopup() {         let path = window.location.pathname;         path = path.endsWith('/') ? path.slice(0, -1) : path;         let pathArray = path.split('/');         let leafFolder = pathArray[pathArray.length-1];          let height = window.outerHeight / 1.5;         let width = window.outerWidth / 2;          window.open(`${window.origin}/app-camp/congrats/${leafFolder}`,                     'Congratulations!',                     `width=${width}, height=${height}, left=100, top=100,`);     }"},{"location":"aad/Dialog/#congratulations","title":"Congratulations!","text":"<p>When you have finished this lab,please click this button to let us know!</p> <p>No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!</p>"},{"location":"aad/Dialog/#known-issues","title":"Known issues","text":"<p>For the latest issues, or to file a bug report, see the github issues list for this repository.</p>"},{"location":"aad/Dialog/#next-steps","title":"Next steps","text":"<p>After completing this lab, you may continue with additional extended labs!</p> <ul> <li>Add a Configurable Tab</li> <li>Add a Deep link to a personal Tab</li> <li>Add a Dialog </li> <li>Add a Meeting app</li> <li>Add a Message Extension</li> <li>Selling Your SaaS-based Teams Extension</li> </ul> <p></p>"},{"location":"aad/ExtendedLabs/","title":"Choose your own adventure!","text":""},{"location":"aad/ExtendedLabs/#choose-your-own-adventure","title":"Choose your own adventure!","text":"<p>If you have completed Lab A03 then you're ready to choose your own adventure!</p> <p>Lab A03 is just a personal tab app that more or less runs the original Northwind Orders application. Not only is this boring, but it really doesn't harness the power of Microsoft Teams!</p> <p>These labs all build on Lab A03 (or, if you're brave, Lab B04). So if you don't have that working, go do that first and then come back.</p> <p>Here are the extended lab adventures we have in store for you. Do one or do 'em all!</p> <ul> <li>Add a Configurable Tab</li> <li>Add a Deep link to a personal Tab</li> <li>Add a Dialog </li> <li>Add a Meeting app</li> <li>Add a Message Extension</li> <li>Selling Your SaaS-based Teams Extension</li> </ul> <p>Don't see the lab you want? Check out our github issues where we keep our backlog; feel free to comment or add your own request!</p> <p></p>"},{"location":"aad/MeetingConfigurableTab/","title":"Add a Meeting app","text":""},{"location":"aad/MeetingConfigurableTab/#add-a-configurable-tab-to-meetings","title":"Add a Configurable Tab to Meetings","text":"<p>This lab is part of extending with capabilities for your teams app which begins with a Northwind Orders core application using the <code>AAD</code> path.</p> <p>Important!</p> <p>This lab builds on the completed solution to the Configurable Tab lab. Complete labs A01-A03 to get to the Northwind Orders core application and then complete the Configurable Tab Lab to add a configurable tab to your application before beginning this lab.</p> <p>Following on from the previous lab where you created a Configurable Tab which could be configured to display a list products with a given category, in this lab you will extend the tab so that it can also be used in Microsoft Teams meetings.</p> <p>Extending tabs for use in Microsoft Teams meetings provides the meeting owner the ability to add the tab, which can be accessed by meeting participants before, during, and after the meeting. It also allows sharing the contents of the tab to the meeting content stage without the participants having to switch to another window during the meeting as the content is displayed directly in the meeting window.</p> <p>In this lab you will learn to:</p> <ul> <li>Configure your Configurable Tab for use with Microsoft Teams meetings</li> <li>Add your tab to the Microsoft Teams Meeting Pre-meeting stage</li> <li>Add your tab to the Microsoft Teams Meeting Side Panel during a meeting</li> <li>Present your tab in the Microsoft Teams Meeting Content Stage during a meeting</li> <li>Use the Teams JS SDK to understand the current Microsoft Teams Frame Context</li> <li>Use the Teams JS SDK to understand whether the tab is being shared to the Microsoft Teams Meeting Content Stage</li> </ul> <p>Warning</p> <p>Currently it is only possible to use tabs in Meetings using the Microsoft Teams Desktop Client.</p> Video briefing <p> Configurable Tabs in Microsoft Teams Meetings </p>"},{"location":"aad/MeetingConfigurableTab/#features","title":"Features","text":"<ul> <li>Microsoft Teams configurable tab to display a product category in during pre-meeting stage</li> <li>Microsoft Teams configurable tab to display a product category in the Meeting Side Panel during a Teams meeting</li> <li>Microsoft Teams configurable tab to display a product category and be shared to the Meeting Content Stage</li> </ul>"},{"location":"aad/MeetingConfigurableTab/#exercise-1-update-your-configurable-tab-for-use-with-meetings","title":"Exercise 1: Update your configurable tab for use with Meetings","text":""},{"location":"aad/MeetingConfigurableTab/#step-1-add-context-array-to-application-manifest","title":"Step 1: Add context array to application manifest","text":"<p>In your code editor, open the manifest/manifest.template.json file.</p> <p>Update the version number so it's greater than it was; for example if your manifest was version 1.4, make it 1.4.1 or 1.5.0. This is required in order for you to update the app in Teams.</p> <pre><code>\"version\": \"1.5.0\"\n</code></pre> <p>NOTE: Make each new version greater than the last so you can update the application in Teams!</p> <p>Now, immediately under the <code>scopes</code> array, in the your configurable tab object, add a new array for defining the <code>context</code>:</p> <pre><code>\"configurableTabs\": [\n    {\n      \"configurationUrl\": \"https://&lt;HOST_NAME&gt;/pages/tabConfig.html\",\n      \"canUpdateConfiguration\": true,\n      \"scopes\": [\n        \"team\",\n        \"groupchat\"\n      ],\n      \"context\": [\n        \"meetingChatTab\",\n        \"meetingDetailsTab\",\n        \"meetingSidePanel\",\n        \"meetingStage\"\n      ]\n    }\n  ]\n</code></pre>"},{"location":"aad/MeetingConfigurableTab/#step-2-rebuild-your-application-package","title":"Step 2: Rebuild your application package","text":"<p>Open a command line tool in your working folder and execute</p> <pre><code>npm run package\n</code></pre> <p>This will generate a new <code>manifest.json</code> file and a new application package (northwind.zip).</p>"},{"location":"aad/MeetingConfigurableTab/#step-3-start-your-app","title":"Step 3: Start your app","text":"<p>In your working directory execute this command to start the application</p> <pre><code>npm start\n</code></pre>"},{"location":"aad/MeetingConfigurableTab/#step-4-upload-the-app-package","title":"Step 4: Upload the app package","text":"<p>In the Teams web or desktop UI, click \"Apps\" in the sidebar 1\ufe0f\u20e3, then \"Manage your apps\" 2\ufe0f\u20e3. At this point you have three choices:</p> <ul> <li>Upload a custom app (upload the app for yourself or a specific team or group chat) - this only appears if you have enabled \"Upload custom apps\" in your setup policy; this was a step in the previous lab</li> <li>Upload an app to your org's app catalog (upload the app for use within your organization) - this only appears if you are a tenant administrator</li> <li>Submit an app to your org (initiate a workflow asking a tenant administrator to install your app) - this appears for everyone</li> </ul> <p>In this case, choose the second option 3\ufe0f\u20e3.</p> <p></p> <p>Navigate to the Northwind.zip file in your manifest directory and upload it.</p> <p>Although the application is already installed, you are providing a newer version so it will update the application.</p>"},{"location":"aad/MeetingConfigurableTab/#exercise-2-add-your-tab-to-the-pre-meeting-stage","title":"Exercise 2: Add your tab to the pre-meeting stage","text":""},{"location":"aad/MeetingConfigurableTab/#step-1-create-microsoft-teams-meeting","title":"Step 1: Create Microsoft Teams meeting","text":"<p>Using the Microsoft Teams desktop client, open the <code>Calendar</code> app from the sidebar and select <code>New meeting</code>in the top right corner.</p> <p>Enter a <code>title</code> and add at least <code>one required participant</code>, select <code>Send</code> in the top right corner to create the meeting.</p>"},{"location":"aad/MeetingConfigurableTab/#step-2-add-tab","title":"Step 2: Add tab","text":"<p>Select the meeting that you just created in the Calendar app, in the flyout, select <code>Edit</code> to open the meeting details.</p> <p>Select the <code>(+)</code> Add tab button in the meeting, search for <code>Northwind Orders</code> app and select it. In the tab configuration page, select a <code>Category</code> of products you want to display in the tab.</p> <p>The tab is added at the pre-meeting stage, so that meeting participants can view the tab content before the meeting begins, this also pre-loads the tab in to the meeting when it begins.</p> <p>Click <code>Close</code> in the top right corner to go back to the Calendar view.</p>"},{"location":"aad/MeetingConfigurableTab/#excercise-3-display-tab-in-meeting","title":"Excercise 3: Display tab in Meeting","text":""},{"location":"aad/MeetingConfigurableTab/#step-1-start-meeting","title":"Step 1: Start meeting","text":"<p>Select the meeting that you just created in the Calendar app, in the flyout, select <code>Join</code> to open the meeting and select <code>Join now</code> to start the meeting.</p>"},{"location":"aad/MeetingConfigurableTab/#step-2-display-tab-in-meeting-side-panel","title":"Step 2: Display tab in Meeting Side Panel","text":"<p>When a tab has already been added to the meeting at the pre-meeting stage, the tab will be visible in the meeting controls shown at the top of the meeting.</p> <p>To display the tab in the Meeting Side Panel, select the tab icon, this will open the Meeting Side Panel displaying the tab content within it. </p> <p>At the moment the table is too big for the width of the side panel, but don't worry, we will come back to this and fix it in later exercise.</p>"},{"location":"aad/MeetingConfigurableTab/#step-3-present-tab-in-meeting-content-stage","title":"Step 3: Present tab in Meeting Content Stage","text":"<p>To make the tab content visible to all partipicants in the meeting, you can present the tab by sharing it to the Meeting Content Stage.</p> <p>Select the <code>Share</code> icon in the Meeting Side Panel to present the tab to the stage.</p>"},{"location":"aad/MeetingConfigurableTab/#exercise-4-update-tab-display-when-in-meeting-side-panel","title":"Exercise 4: Update tab display when in Meeting Side Panel","text":"<p>In the previous exercise we saw that when the tab was displayed in the Meeting Side Panel, the products table width was too wide for the space given to us by the Side Panel, to do this we need to use the Teams JS SDK v2 to help us understand the context in which our tab is running and whether it has been shared to the stage.</p>"},{"location":"aad/MeetingConfigurableTab/#step-1-add-code-to-detect-frame-context","title":"Step 1: Add code to detect Frame Context","text":"<p>We can use the Teams JS SDK <code>FrameContexts</code> capability to obtain the current <code>FrameContext</code> type from the <code>page</code> context and check whether the app is running in the <code>sidePanel</code> frame.</p> <p>In <code>client/modules/teamsHelpers.js</code>, add the following function.</p> <pre><code>// async function returns true if app is running in side panel in a Teams meeting\nexport async function inSidePanel() {\n    try {\n        await ensureTeamsSdkInitialized();\n        const { page } = await microsoftTeams.app.getContext();\n        return page.frameContext === microsoftTeams.FrameContexts.sidePanel;\n    } catch (e) {\n        console.log(`${e} from Teams SDK, may be running outside of Teams`);\n        return false;\n    }\n}\n</code></pre>"},{"location":"aad/MeetingConfigurableTab/#step-2-add-code-to-detect-whether-tab-is-shared-to-stage","title":"Step 2: Add code to detect whether tab is shared to stage","text":"<p>We can use the Teams JS SDK <code>meeting</code> capability to obtain the current state of the meeting stage.</p> <p>In <code>client/modules/teamsHelpers.js</code>, add the following function.</p> <pre><code>// async function returns true if app has been shared to stage in a Teams meeting\nexport async function sharedToStage() {\n    try {\n        await ensureTeamsSdkInitialized();\n        const { isAppSharing } = await microsoftTeams.meeting.getAppContentStageSharingState();\n        return isAppSharing;\n    } catch (e) {\n        console.log(`${e} from Teams SDK, may be running outside of Teams`);\n        return false;\n    }\n}\n</code></pre>"},{"location":"aad/MeetingConfigurableTab/#step-3-add-code-to-hide-table-columns-when-tab-is-displayed-in-meeting-side-panel","title":"Step 3: Add code to hide table columns when tab is displayed in Meeting Side Panel","text":"<p>We can use the two helper functions that we just added to hide some of the table columns when the tab is shown in the side panel, but to not remove them when the same tab is presented to the stage so we can make utilise the full width of the meeting content stage.</p> <p>In <code>client/pages/categoryDetail.js</code>, add the following import statement to the top of the file. </p> <pre><code>import {\n    inSidePanel,\n    sharedToStage\n} from '../modules/teamsHelpers.js';\n</code></pre> <p>Add the following code into the <code>displayUI</code> function around line 40.</p> <pre><code>if (await inSidePanel() &amp;&amp; !(await sharedToStage())) {\n    const table = document.getElementById('products');\n    table.queryS electorAll('th:nth-child(n+4)').forEach((e) =&gt; { e.style.display = 'none'; });\n    table.querySelectorAll('td:nth-child(n+4)').forEach((e) =&gt; { e.style.display = 'none'; });\n}\n</code></pre> <p>The <code>if</code> statement that creates the products table if a category is selected, should look like</p> <pre><code>if (category) {\n\n    displayElement.innerHTML = `\n    &lt;img src=\"data:image/bmp;base64,${category.picture}\" class=\"categoryImage\"&gt;&lt;/img&gt;\n    &lt;h3&gt;${category.displayName}&lt;/h3&gt;\n    &lt;p&gt;${category.description}&lt;/p&gt;\n`;\n\n    category.products.forEach(product =&gt; {\n        const row = document.createElement('tr');\n        row.innerHTML = `&lt;tr&gt;\n    &lt;td&gt;&lt;a href=\"/pages/productDetail.html?productId=${product.productId}\"&gt;${product.productName}&lt;/a&gt;&lt;/td&gt;\n    &lt;td&gt;${product.quantityPerUnit}&lt;/td&gt;\n    &lt;td&gt;${product.unitPrice}&lt;/td&gt;\n    &lt;td&gt;${product.unitsInStock}&lt;/td&gt;\n    &lt;td&gt;${product.unitsOnOrder}&lt;/td&gt;\n    &lt;td&gt;${product.supplierName} (${product.supplierCountry})&lt;/td&gt;\n&lt;/tr&gt;`;\n        productsElement.append(row);\n    });\n\n    if (await inSidePanel() &amp;&amp; !(await sharedToStage())) {\n        const table = document.getElementById('products');\n        table.querySelectorAll('th:nth-child(n+4)').forEach((e) =&gt; { e.style.display = 'none'; });\n        table.querySelectorAll('td:nth-child(n+4)').forEach((e) =&gt; { e.style.display = 'none'; });\n    }\n}\n</code></pre>"},{"location":"aad/MeetingConfigurableTab/#step-4-test-your-changes","title":"Step 4: Test your changes","text":"<p>After you have made the changes, you will need to close and re-open the app in the Meeting, you can do so by selecting the Tab icon in the meeting controls shown at the top of the meeting to close the Meeting Side Panel and again to re-open it. </p> <p>When you re-open the tab in the Meeting Side Panel, only three table columns will now be visible.</p>      function showCompletionPopup() {         let path = window.location.pathname;         path = path.endsWith('/') ? path.slice(0, -1) : path;         let pathArray = path.split('/');         let leafFolder = pathArray[pathArray.length-1];          let height = window.outerHeight / 1.5;         let width = window.outerWidth / 2;          window.open(`${window.origin}/app-camp/congrats/${leafFolder}`,                     'Congratulations!',                     `width=${width}, height=${height}, left=100, top=100,`);     }"},{"location":"aad/MeetingConfigurableTab/#congratulations","title":"Congratulations!","text":"<p>When you have finished this lab,please click this button to let us know!</p> <p>No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!</p>"},{"location":"aad/MeetingConfigurableTab/#known-issues","title":"Known issues","text":"<p>For the latest issues, or to file a bug report, see the github issues list for this repository.</p>"},{"location":"aad/MeetingConfigurableTab/#references","title":"References","text":"<ul> <li>Apps for Teams meetings</li> <li>Create a configuration page</li> <li>Enable and configure your apps for Teams meetings</li> <li>Meeting apps API references</li> </ul>"},{"location":"aad/MeetingConfigurableTab/#next-steps","title":"Next steps","text":"<p>After completing this lab, you may continue with any of the following labs.</p> <ul> <li>Add a Configurable Tab</li> <li>Add a Deep link to a personal Tab</li> <li>Add a Dialog </li> <li>Add a Meeting app</li> <li>Add a Message Extension</li> <li>Selling Your SaaS-based Teams Extension</li> </ul> <p></p>"},{"location":"aad/MessagingExtension/","title":"Add a Message Extension","text":""},{"location":"aad/MessagingExtension/#add-a-message-extension","title":"Add a Message Extension","text":"<p>Important!</p> <p>This lab builds on the completed solution to lab A03-after-apply-styling.md, which is the last of the \"core\" labs. If you haven't done them, you can start here.</p> <p>In this lab, you'll add a Search Message Extension to the Northwind Orders application so users can access and share order information in Microsoft Teams conversations. The information will be shared on an adaptive card; users receiving the card can then take action on the data.</p> There are several kinds of message extensions <p>A Search message extension is useful when you want to let users look up information in a Teams conversation. You can also create Action message extension to do things like create, add or update data in your application, and still share all this in a conversation in Teams. All this is possible using Message extensions capability in Teams.</p> <p>We will cover the following concepts in this exercise:</p> <ul> <li>Message extensions</li> <li>Bot Framework</li> <li>Adaptive cards</li> </ul> Video briefing <p> Search Message Extension with Adaptive Cards </p>"},{"location":"aad/MessagingExtension/#features","title":"Features","text":"<ul> <li>A search based message extension to search for products and share result in the form of a rich  card in a conversation.</li> <li>In the rich  card, provide an input field and a submit button for users to take action to update stock value of a product in the Northwind Database, all happening in the same conversation</li> </ul>"},{"location":"aad/MessagingExtension/#exercise-1-bot-registration","title":"Exercise 1: Bot registration","text":"<p>Message extensions allow users to bring the application into a conversation in Teams. You can search data in your application, perform actions on them and send back results of your interaction to your application as well as Teams to display all results in a rich card in the conversation.</p> <p>Since it is a conversation between your application's web service and teams, you'll need a secure communication protocol to send and receive messages. Microsoft Teams uses the Azure Bot Framework for this purpose.</p> <p>For that reason, you'll need to register your web service as a bot in the Bot Framework and update the app manifest file to define your web service so Teams client can know about it.</p>"},{"location":"aad/MessagingExtension/#step-1-run-ngrok","title":"Step 1: Run ngrok","text":"<p>Ignore this step if you have ngrok already running</p> <p>Start ngrok to obtain the URL for your application. Run this command in the command line tool of your choice:</p> <pre><code>ngrok http 3978 -host-header=localhost\n</code></pre> <p>The terminal will display a screen like below; Save the URL for Step 2.</p> <p></p>"},{"location":"aad/MessagingExtension/#step-2-register-your-web-service-as-an-bot-using-teams-developer-portal","title":"Step 2: Register your web service as an bot using Teams Developer Portal","text":"<p>Microsoft Teams will communicate with your web service using the [Azure Bot Service]. In order to use this service, you need to register a bot with Microsoft Azure. There are two ways to set this up: if you have an Azure subscription, you can register your bot using the Azure Portal; if not, you can use the Teams Developer Portal.</p> VIDEO: Register your bot using the Azure Portal <p> Register and configure a bot in Microsoft Azure </p> <p>These instructions will guide you through the second option, which is to register your bot using the Teams Developer Portal. The Teams Developer Portal is a valuable tool for Teams developers that is tightly integrated with the Teams Toolkit.</p> <ul> <li>Go to https://dev.teams.microsoft.com/home/.</li> <li>Select Apps on the left navigation.</li> <li>Search for the app Northwind Orders. If you don't find it, simply create a new app at random; we really just need for the Developer Portal to register our bot and we won't be managing the manifest using Developer Portal.</li> <li>On the left side, under Configure, select App features.</li> <li>From below features to add, select Bot.</li> <li>To configure the bot, under Identify your bot , select the link Create new bot. This will take you to Bot management page.</li> <li>Select the <code>+ New Bot</code> button, which opens a dialog to input the bot name. Add a name and select Add.</li> <li>Once the bot is added, you will be taken to the configuration page for the bot. Update the Endpoint address to the ngrok url and  append <code>/api/messages</code> to the url. Select Save.</li> <li>Select link Client Secrets in the left navigation within the bot configuration page.</li> <li>Select the button, Add client secret for your bot</li> <li>A new secret will be generated in a dialog. Copy the client secret and keep safe. We will need this later.</li> <li>Now on top of the same page, Select Bots to go back to all the bots you have created, including the new one we created just now.</li> <li>Copy the bot id of the new bot, keep this copied somewhere as well. We will need this later.</li> </ul>"},{"location":"aad/MessagingExtension/#exercise-2-code-changes","title":"Exercise 2: Code changes","text":""},{"location":"aad/MessagingExtension/#step-1-add-new-files-folders","title":"Step 1: Add new files &amp; folders","text":"<p>There are new files and folders that you need to add into the project structure.</p> <ul> <li>Create a new <code>images</code> folder under <code>client</code> folder and copy over the 9 image files needed for the rich adaptive cards to display products' inventory.</li> </ul> <p>Note</p> <p>The Northwind Database does not have nice images for us to show rich cards with images so we have added some images and mapped them to each product using hashing mechanism. As long as you got the names of the images right, we don't have to worry what images your want to add in the folder \ud83d\ude09. You can get creative here!</p> <ul> <li>Create a new <code>cards</code> folder under the  <code>server</code> folder and add three files <code>errorCard.js</code>,<code>productCard.js</code> and <code>stockUpdateSuccess.js</code>. They are adaptive cards needed for the message extension to display in a conversation based on what state the cards are in.</li> </ul> <p>For example, to display the product card, the bot code will use <code>productCard.js</code>; if the form is submitted by a user to update the stock value, the bot will use the <code>stockUpdateSuccess.js</code> card to let users know the action is completed; and in case of any error <code>errorCard.js</code> will be displayed.</p> <p>Note</p> <p>Adaptive cards are light-weight interactive content you can place in Teams conversations and many other places. They are simple JSON. These files contain adaptive card templates which allow binding data to the JSON when the card is created.</p> <ul> <li>Copy below content into errorCard.js. Notice the data binding expressions such as <code>${productName}</code> and <code>${unitsInStock}</code>.</li> </ul> <pre><code>export default{\n    \"type\": \"AdaptiveCard\",\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"version\": \"1.4\",\n    \"body\": [\n      {\n        \"type\": \"TextBlock\",\n        \"text\": \"Oops! Something went wrong:\",\n        \"wrap\": true\n      },      \n      {\n        \"type\": \"Graph\",\n        \"someProperty\": \"foo\",\n        \"fallback\": {\n          \"type\": \"TextBlock\",\n          \"text\": \"Could not update stock at this time\",\n          \"wrap\": true\n        }\n      }\n    ]\n  }\n</code></pre> <ul> <li>Copy below content into productCard.js</li> </ul> <pre><code>export default\n{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.4\",\n    \"refresh\": {\n        \"userIds\": [],\n        \"action\": {\n            \"type\": \"Action.Execute\",\n            \"verb\": \"refresh\",\n            \"title\": \"Refresh\",\n            \"data\": {\n                \"pdtId\": \"${productId}\",\n                \"pdtName\": \"${productName}\",\n                \"categoryId\": \"${categoryId}\"\n            }\n        }\n    },\n    \"body\": [\n        {\n            \"type\": \"ColumnSet\",\n            \"columns\": [\n                {\n                    \"type\": \"Column\",\n                    \"width\": \"stretch\",\n                    \"items\": [\n                        {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"Stock form\",\n                            \"horizontalAlignment\": \"right\",\n                            \"isSubtle\": true,\n                            \"wrap\": true\n                        },\n                        {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${productName}\",\n                            \"horizontalAlignment\": \"right\",\n                            \"spacing\": \"none\",\n                            \"size\": \"large\",\n                            \"color\": \"warning\",\n                            \"wrap\": true\n                        },\n                        {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"Use this form to chat with dealer or update the stock details of ${productName}  \",\n                            \"isSubtle\": true,\n                            \"wrap\": true\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"type\": \"ColumnSet\",\n            \"columns\": [\n                {\n                    \"type\": \"Column\",\n                    \"width\": 2,\n                    \"items\": [\n                        {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"Existing stock\",\n                            \"weight\": \"bolder\",\n                            \"size\": \"medium\",\n                            \"wrap\": true,\n                            \"style\": \"heading\"\n                        },\n                        {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${unitsInStock}\",\n                            \"isSubtle\": true,\n                            \"spacing\": \"None\"\n                        },\n                        {\n                            \"type\": \"Input.Text\",\n                            \"id\": \"txtStock\",\n                            \"label\": \"New stock count\",\n                            \"min\": 0,\n                            \"max\": 9999,\n                            \"errorMessage\": \"Invalid input, use whole positive number\",\n                            \"style\": \"tel\"\n                        }\n                    ]\n                },\n                {\n                    \"type\": \"Column\",\n                    \"width\": 1,\n                    \"items\": [\n                        {\n                            \"type\": \"Image\",\n                            \"url\": \"${imageUrl}\",\n                            \"size\": \"auto\",\n                            \"altText\": \"Image of product in warehouse\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.Execute\",\n            \"title\": \"Update stock\",\n            \"verb\": \"ok\",\n            \"data\": {\n                \"pdtId\": \"${productId}\",\n                \"pdtName\": \"${productName}\",\n                \"categoryId\": \"${categoryId}\"\n            },\n            \"style\": \"positive\"\n        }\n\n    ]\n}\n</code></pre> <ul> <li>Copy below content into stockUpdateSuccess.js</li> </ul> <pre><code>export default\n{\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.4\",\n    \"refresh\": {\n        \"userIds\": [],\n        \"action\": {\n            \"type\": \"Action.Execute\",\n            \"verb\": \"refresh\",\n            \"title\": \"Refresh\",\n            \"data\": {\n                \"pdtId\": \"${productId}\",\n                \"pdtName\": \"${productName}\",\n                \"categoryId\": \"${categoryId}\"\n            }\n        }\n    },\n    \"body\": [\n        {\n            \"type\": \"ColumnSet\",\n            \"columns\": [\n                {\n                    \"type\": \"Column\",\n                    \"width\": \"stretch\",\n                    \"items\": [\n                        {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"Stock form\",\n                            \"horizontalAlignment\": \"right\",\n                            \"isSubtle\": true,\n                            \"wrap\": true\n                        },\n                        {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${productName}\",\n                            \"horizontalAlignment\": \"right\",\n                            \"spacing\": \"none\",\n                            \"size\": \"large\",\n                            \"color\": \"warning\",\n                            \"wrap\": true\n                        },\n                        {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"Use this form to chat with dealer or update the stock details of ${productName}  \",\n                            \"isSubtle\": true,\n                            \"wrap\": true\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"type\": \"ColumnSet\",\n            \"columns\": [\n                {\n                    \"type\": \"Column\",\n                    \"width\": 2,\n                    \"items\": [\n                        {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"Existing stock\",\n                            \"weight\": \"bolder\",\n                            \"size\": \"medium\",\n                            \"wrap\": true,\n                            \"style\": \"heading\"\n                        },\n                        {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${unitsInStock}\",\n                            \"isSubtle\": true,\n                            \"spacing\": \"None\"\n                        }\n\n                    ]\n                },\n                {\n                    \"type\": \"Column\",\n                    \"width\": 1,\n                    \"items\": [\n                        {\n                            \"type\": \"Image\",\n                            \"url\": \"${imageUrl}\",\n                            \"size\": \"auto\",\n                            \"altText\": \"Image of product in warehouse\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n</code></pre> <ul> <li>Create a file <code>bot.js</code> inside the <code>server</code> folder. This is the <code>StockManagerBot</code> for the message extension which will handle the search, display and update functionality of products within the conversation.</li> </ul> <p>Notice the event handlers</p> <p>The code contains these event handlers which are invoked by the Bot Framework adapter:</p> <ul> <li> <p>handleTeamsMessagingExtensionQuery() - Used in creating a Search-based Message Extension when you query which then returns the <code>Message Extension Response</code> for the query.</p> </li> <li> <p>handleTeamsMessagingExtensionSelectItem() - Used in creating a Search-based Message Extension when select a search query result,  which then returns the <code>Message Extension Response</code> for the query.</p> </li> <li> <p>onInvokeActivity() - If the bots receive a message activity, then the turn handler receives a notification of that incoming activity. The turn handler then sends the incoming activity to Team's activity handler <code>onInvokeActivity</code> which routes all Teams invoke activities. To implement our own logic for, you must override this method in your bot.</p> </li> </ul> <ul> <li>Copy the following content into bot.js file.</li> </ul> <pre><code>import { TeamsActivityHandler, CardFactory } from 'botbuilder';\nimport { getProductByName, updateProductUnitStock } from './northwindDataService.js';\nimport * as ACData from \"adaptivecards-templating\";\nimport * as AdaptiveCards from \"adaptivecards\";\nimport pdtCardPayload from './cards/productCard.js'\nimport successCard from './cards/stockUpdateSuccess.js';\nimport errorCard from './cards/errorCard.js'\nexport class StockManagerBot extends TeamsActivityHandler {\n    constructor() {\n        super();\n        // Registers an activity event handler for the message event, emitted for every incoming message activity.\n        this.onMessage(async (context, next) =&gt; {\n            console.log('Running on Message Activity.');\n            await next(); //go to the next handler \n        });\n    }\n    //When you perform a search from the message extension app\n    async handleTeamsMessagingExtensionQuery(context, query) {\n        const { name, value } = query.parameters[0];\n        if (name !== 'productName') {\n            return;\n        }\n\n        const products = await getProductByName(value);\n        const attachments = [];\n\n        for (const pdt of products) {\n            const heroCard = CardFactory.heroCard(pdt.productName);\n            const preview = CardFactory.heroCard(pdt.productName);\n            preview.content.tap = {\n                type: 'invoke', value: {\n                    productName: pdt.productName,\n                    productId: pdt.productId, unitsInStock: pdt.unitsInStock, categoryId: pdt.categoryId\n                }\n            };\n            const attachment = { ...heroCard, preview };\n            attachments.push(attachment);\n        }\n\n        var result = {\n            composeExtension: {\n                type: \"result\",\n                attachmentLayout: \"list\",\n                attachments: attachments\n            }\n        };\n\n        return result;\n\n    }\n    //on preview tap of an item from the list of search result items\n    async handleTeamsMessagingExtensionSelectItem(context, pdt) {\n        const preview = CardFactory.thumbnailCard(pdt.productName);\n        var template = new ACData.Template(pdtCardPayload);\n        const imageGenerator = Math.floor((pdt.productId / 1) % 10);\n        const imgUrl = `https://${process.env.HOSTNAME}/images/${imageGenerator}.PNG`\n        var card = template.expand({\n            $root: {\n                productName: pdt.productName, unitsInStock: pdt.unitsInStock,\n                productId: pdt.productId, categoryId: pdt.categoryId, imageUrl: imgUrl\n            }\n        });\n        var adaptiveCard = new AdaptiveCards.AdaptiveCard();\n        adaptiveCard.parse(card);\n        const adaptive = CardFactory.adaptiveCard(card);\n        const attachment = { ...adaptive, preview };\n        return {\n            composeExtension: {\n                type: 'result',\n                attachmentLayout: 'grid',\n                attachments: [attachment]\n            },\n        };\n    }\n    //on every activity \n    async onInvokeActivity(context) {\n        let runEvents = true;\n        try {\n            if (!context.activity.name &amp;&amp; context.activity.channelId === 'msteams') {\n                return await this.handleTeamsCardActionInvoke(context);\n            } else {\n                switch (context.activity.name) {\n                    case 'composeExtension/query':\n                        return this.createInvokeResponse(\n                            await this.handleTeamsMessagingExtensionQuery(context, context.activity.value)\n                        );\n\n                    case 'composeExtension/selectItem':\n                        return this.createInvokeResponse(\n                            await this.handleTeamsMessagingExtensionSelectItem(context, context.activity.value)\n                        );\n                    case 'adaptiveCard/action':\n                        const request = context.activity.value;\n\n                        if (request) {\n                            if (request.action.verb === 'ok') {\n\n                                const data = request.action.data;\n                                await updateProductUnitStock(data.pdtId, data.txtStock);\n                                var template = new ACData.Template(successCard);\n                                const imageGenerator = Math.floor((data.pdtId / 1) % 10);\n                                const imgUrl = `https://${process.env.HOSTNAME}/images/${imageGenerator}.PNG`\n                                var card = template.expand({\n                                    $root: {\n                                        productName: data.pdtName, unitsInStock: data.txtStock,\n                                        imageUrl: imgUrl\n                                    }\n                                });\n                                var responseBody = { statusCode: 200, type: \"application/vnd.microsoft.card.adaptive\", value: card }\n                                return this.createInvokeResponse(responseBody);\n\n\n                            } else if (request.action.verb === 'refresh') {\n                                //refresh card\n                            } else {\n                                var responseBody = { statusCode: 200, type: \"application/vnd.microsoft.card.adaptive\", value: errorCard }\n                                return this.createInvokeResponse(responseBody);\n\n                            }\n\n                        }\n                    default:\n                        runEvents = false;\n                        return super.onInvokeActivity(context);\n\n                }\n            }\n        } catch (err) {\n            if (err.message === 'NotImplemented') {\n                return { status: 501 };\n            } else if (err.message === 'BadRequest') {\n                return { status: 400 };\n            }\n            throw err;\n        } finally {\n            if (runEvents) {\n                this.defaultNextEvent(context)();\n            }\n        }\n    }\n\n\n    defaultNextEvent = (context) =&gt; {\n        const runDialogs = async () =&gt; {\n            await this.handle(context, 'Dialog', async () =&gt; {\n                // noop\n            });\n        };\n        return runDialogs;\n    }\n\n    createInvokeResponse(body) {\n        return { status: 200, body };\n    }\n\n}    \n</code></pre>"},{"location":"aad/MessagingExtension/#step-2-update-existing-files","title":"Step 2: Update existing files","text":"<p>There are files that were updated to add the new features. Let's take files one by one to understand what changes you need to make for this exercise.</p> <p>1. .env</p> <p>Open the <code>.env</code> file in your working directory and add two new tokens <code>BOT_REG_AAD_APP_ID</code>(Bot id) and <code>BOT_REG_AAD_APP_PASSWORD</code>(client secret) with values copied in Step 2.</p> <p>The .env file contents will now look like below:</p> <pre><code>COMPANY_NAME=Northwind Traders\nPORT=3978\n\nTEAMS_APP_ID=c42d89e3-19b2-40a3-b20c-44cc05e6ee26\nHOST_NAME=yourhostname.ngrok.io\n\nTENANT_ID=c8888ec7-a322-45cf-a170-7ce0bdb538c5\nCLIENT_ID=b323630b-b67c-4954-a6e2-7cfa7572bbc6\nCLIENT_SECRET=111111.ABCD\nBOT_REG_AAD_APP_ID=88888888-0d02-43af-85d7-72ba1d66ae1d\nBOT_REG_AAD_APP_PASSWORD=111111vk\n</code></pre> <p>2. manifest/makePackage.js The npm script that builds a manifest file by taking the values from your local development configuration like <code>.env</code> file, need an extra token for the Bot we just created. Let's add that token <code>BOT_REG_AAD_APP_ID</code> (bot id) into the script.</p> <p>Replace code block:</p> <pre>\nif (key.indexOf('TEAMS_APP_ID') === 0 ||\n            key.indexOf('HOST_NAME') === 0 ||\n            key.indexOf('CLIENT_ID') === 0) {\n</pre> <p>With: </p> <pre>\n if (key.indexOf('TEAMS_APP_ID') === 0 ||\n            key.indexOf('HOST_NAME') === 0 ||\n            key.indexOf('CLIENT_ID') === 0||\n            key.indexOf('BOT_REG_AAD_APP_ID') === 0) {\n</pre> <p>3.manifest/manifest.template.json</p> <p>Add the message extension command information (bolded) in the manifest after <code>showLoadingIndicator</code> property:</p> <pre>\n{\n  \"$schema\": \"https://developer.microsoft.com/en-us/json-schemas/teams/v1.8/MicrosoftTeams.schema.json\",\n  \"manifestVersion\": \"1.8\",\n  \"version\": \"1.6.0\",\n  \"id\": \"&lt;TEAMS_APP_ID&gt;\",\n  \"packageName\": \"io.github.officedev.teamsappcamp1.northwind\",\n  \"developer\": {\n    \"name\": \"Northwind Traders\",\n    \"websiteUrl\": \"https://&lt;HOST_NAME&gt;/\",\n    \"privacyUrl\": \"https://&lt;HOST_NAME&gt;/privacy.html\",\n    \"termsOfUseUrl\": \"https://&lt;HOST_NAME&gt;/termsofuse.html\"\n  },\n  \"icons\": {\n      \"color\": \"northwind192.png\",\n      \"outline\": \"northwind32.png\"\n  },\n  \"name\": {\n    \"short\": \"Northwind Orders\",\n    \"full\": \"Northwind Traders Order System\"\n  },\n  \"description\": {\n    \"short\": \"Sample enterprise app using the Northwind Traders sample database\",\n    \"full\": \"Simple app to demonstrate porting a SaaS app to Microsoft Teams\"\n  },\n  \"accentColor\": \"#FFFFFF\",\n  \"configurableTabs\": [\n    {\n        \"configurationUrl\": \"https://&lt;HOST_NAME&gt;/pages/tabConfig.html\",\n        \"canUpdateConfiguration\": true,\n        \"scopes\": [\n            \"team\",\n            \"groupchat\"\n        ]\n    }\n],\n\"staticTabs\": [\n    {\n      \"entityId\": \"Orders\",\n      \"name\": \"My Orders\",\n      \"contentUrl\": \"https://&lt;HOST_NAME&gt;/pages/myOrders.html\",\n      \"websiteUrl\": \"https://&lt;HOST_NAME&gt;/pages/myOrders.html\",\n      \"scopes\": [\n        \"personal\"\n      ]\n    },\n    {\n      \"entityId\": \"Products\",\n      \"name\": \"Products\",\n      \"contentUrl\": \"https://&lt;HOST_NAME&gt;/pages/categories.html\",\n      \"websiteUrl\": \"https://&lt;HOST_NAME&gt;/pages/categories.html\",\n      \"scopes\": [\n        \"personal\"\n      ]\n    }\n  ],\n  \"showLoadingIndicator\": false,\n  \"composeExtensions\": [\n    {\n      \"botId\": \"&lt;BOT_REG_AAD_APP_ID&gt;\",\n      \"canUpdateConfiguration\": true,\n      \"commands\": [\n        {\n          \"id\": \"productSearch\",\n          \"type\": \"query\",\n          \"title\": \"Find product\",\n          \"description\": \"\",\n          \"initialRun\": false,\n          \"fetchTask\": false,\n          \"context\": [\n            \"commandBox\",\n            \"compose\"\n          ],\n          \"parameters\": [\n            {\n              \"name\": \"productName\",\n              \"title\": \"product name\",\n              \"description\": \"Enter the product name\",\n              \"inputType\": \"text\"\n            }\n          ]\n        }\n      ]\n    }\n  ], \n  \"bots\": [\n    {\n      \"botId\": \"&lt;BOT_REG_AAD_APP_ID&gt;\",\n      \"scopes\": [ \"personal\", \"team\", \"groupchat\" ],\n      \"isNotificationOnly\": false,\n      \"supportsFiles\": false\n    }\n  ],\n\n\n\n  \"permissions\": [\n      \"identity\",\n      \"messageTeamMembers\"\n  ],\n  \"validDomains\": [\n      \"&lt;HOST_NAME&gt;\"\n  ],\n  \"webApplicationInfo\": {\n      \"id\": \"&lt;CLIENT_ID&gt;\",\n      \"resource\": \"api://&lt;HOST_NAME&gt;/&lt;CLIENT_ID&gt;\"\n  }\n}\n</pre> <p>Update the version number so it's greater than it was; for example if your manifest was version 1.4, make it 1.4.1 or 1.5.0. This is required in order for you to update the app in Teams.</p> <pre><code>\"version\": \"1.5.0\"\n</code></pre> <p>4.server/identityService.js</p> <p>Add a condition to let validation  be performed by Bot Framework Adapter. In the function <code>validateApiRequest()</code>, add an <code>if</code> condition and check if request is from <code>bot</code> then move to next step.</p> <pre>\n  if (req.path===\"/messages\") {\n        console.log('Request for bot, validation will be performed by Bot Framework Adapter');\n        next();\n    } else {\n       //do the rest\n    }\n</pre> <p>The final form of the function definition will look as below:</p> <pre>\nasync function validateApiRequest(req, res, next) {\n    const audience = `api://${process.env.HOSTNAME}/${process.env.CLIENT_ID}`;\n    const token = req.headers['authorization'].split(' ')[1];\n\n    if (req.path===\"/messages\") {\n        console.log('Request for bot, validation will be performed by Bot Framework Adapter');\n        next();\n    } else {\n        aad.verify(token, { audience: audience }, async (err, result) =&gt; {\n            if (result) {\n                console.log(`Validated authentication on /api${req.path}`);\n                next();\n            } else {\n            console.error(`Invalid authentication on /api${req.path}: ${err.message}`);\n                res.status(401).json({ status: 401, statusText: \"Access denied\" });\n            }\n        });\n    }\n}\n</pre> <p>5.server/northwindDataService.js</p> <p>Add two new functions as below - getProductByName() - This will search products by name and bring the top 5 results back to the message extension's search results. - updateProductUnitStock() - This will update the value of unit stock based on the input action of a user on the product result card.</p> <p>Add the two new function definitions by appending below code block into the file:</p> <pre><code>export async function getProductByName(productNameStartsWith) {\n    let result = {};\n\n    const products = await db.getTable(\"Products\", \"ProductID\");\n    const match = productNameStartsWith.toLowerCase();\n    const matchingProducts =\n        products.data.filter((item) =&gt; item.ProductName.toLowerCase().startsWith(match));\n\n    result = matchingProducts.map(product =&gt; ({\n        productId: product.ProductID,\n        productName: product.ProductName,\n        unitsInStock: product.UnitsInStock,\n        categoryId: product.CategoryID\n    }));\n\n    return result;\n}\n\nexport async function updateProductUnitStock(productId, unitsInStock) {\n\n    const products = await db.getTable(\"Products\", \"ProductID\");\n    const product = products.item(productId);\n    product.UnitsInStock = unitsInStock;\n    productCache[productId] = null;         // Clear the product cache\n    categoryCache[product.CategoryID]=null;// Clear the category cache for this product  \n    await products.save();                  // Write the products \"table\"\n\n}\n</code></pre> <p>6.server/server.js</p> <p>Import the needed modules for bot related code. Import required bot service from botbuilder package and the bot <code>StockManagerBot</code> from the newly added file <code>bot.js</code></p> <pre><code>import {StockManagerBot} from './bot.js';\nimport { BotFrameworkAdapter } from 'botbuilder';\n</code></pre> <p>Note</p> <p>As a standard , <code>app.listen()</code> should always be at the end of the file, so make sure your code updates happen before this request.</p> <p>A bot adapter authenticates and connects a bot to a service endpoint to send and receive message. So to authenticate, we'll need to pass the bot registration's AAD app id and app secret.</p> <p>Add below code to initialize the bot adapter.</p> <pre><code>const adapter = new BotFrameworkAdapter({\n  appId: process.env.BOT_REG_AAD_APP_ID,\n  appPassword:process.env.BOT_REG_AAD_APP_PASSWORD\n});\n</code></pre> <p>Create the bot that will handle incoming messages.</p> <pre><code>const stockManagerBot = new StockManagerBot();\n</code></pre> <p>For the main dialog add error handling.</p> <pre><code>// Catch-all for errors.\nconst onTurnErrorHandler = async (context, error) =&gt; {\n  // This check writes out errors to console log .vs. app insights.\n  // NOTE: In production environment, you should consider logging this to Azure\n  //       application insights.\n  console.error(`\\n [onTurnError] unhandled error: ${ error }`);\n\n  // Send a trace activity, which will be displayed in Bot Framework Emulator\n  await context.sendTraceActivity(\n      'OnTurnError Trace',\n      `${ error }`,\n      'https://www.botframework.com/schemas/error',\n      'TurnError'\n  );\n\n  // Send a message to the user\n  await context.sendActivity('The bot encountered an error or bug.');\n  await context.sendActivity('To continue to run this bot, please fix the bot source code.');\n};\n// Set the onTurnError for the singleton BotFrameworkAdapter.\nadapter.onTurnError = onTurnErrorHandler;\n</code></pre> <p>Listen for incoming requests.</p> <pre><code>\napp.post('/api/messages', (req, res) =&gt; {\n  adapter.processActivity(req, res, async (context) =&gt; {\n    await stockManagerBot.run(context);\n  }).catch(error=&gt;{\n    console.log(error)\n  });\n});\n\n</code></pre> <p>The final server/server.js file should look like this (changes from other extended labs notwithstanding).</p> <p>7. package.json</p> <p>You'll need to install additional packages for adaptive cards and botbuilder. Add below packages into the <code>package.json</code> file by run below script to install new packages:</p> <pre><code>npm i adaptive-expressions adaptivecards adaptivecards-templating botbuilder\n</code></pre> <p>Check if packages are added into <code>dependencies</code> in the package.json file:</p> <pre><code>    \"adaptive-expressions\": \"^4.15.0\",\n    \"adaptivecards\": \"^2.10.0\",\n    \"adaptivecards-templating\": \"^2.2.0\",   \n    \"botbuilder\": \"^4.15.0\"\n</code></pre>"},{"location":"aad/MessagingExtension/#exercise-3-test-the-changes","title":"Exercise 3: Test the changes","text":"<p>Now that you have applied all code changes, let's test the features.</p>"},{"location":"aad/MessagingExtension/#step-1-create-new-teams-app-package","title":"Step 1 : Create new teams app package","text":"<p>Make sure the env file is configured as per the sample file .env_Sample. Make sure all npm packages are installed, run below script in the command line tool</p> <pre><code>npm i\n</code></pre> <p>Create updated teams app package by running below script:</p> <pre><code>npm run package\n</code></pre>"},{"location":"aad/MessagingExtension/#step-2-start-your-local-project","title":"Step 2: Start your local project","text":"<p>Now it's time to run your updated application and run it in Microsoft Teams. Start the application by running below command: </p> <pre><code>npm start\n</code></pre>"},{"location":"aad/MessagingExtension/#step-3-upload-the-app-package","title":"Step 3: Upload the app package","text":"<p>In the Teams web or desktop UI, click \"Apps\" in the sidebar 1\ufe0f\u20e3, then \"Manage your apps\" 2\ufe0f\u20e3. At this point you have three choices:</p> <ul> <li>Upload a custom app (upload the app for yourself or a specific team or group chat) - this only appears if you have enabled \"Upload custom apps\" in your setup policy; this was a step in the previous lab</li> <li>Upload an app to your org's app catalog (upload the app for use within your organization) - this only appears if you are a tenant administrator</li> <li>Submit an app to your org (initiate a workflow asking a tenant administrator to install your app) - this appears for everyone</li> </ul> <p>In this case, choose the first option.</p> <p></p> <p>Navigate to the Northwind.zip file in your manifest directory and upload it.  The Teams client will display the application information, add the application to a team or a group chat.</p> <p></p>"},{"location":"aad/MessagingExtension/#step-4-run-the-application-in-teams-client","title":"Step 4 : Run the application in Teams client","text":"<p>We have added the app into a Group chat for demonstration. Go to the chat where the app is installed.</p> <p>Open the message extension app from the compose area.</p> <p></p> <p>Search for the product from the message extension (This should be easy if you have used GIPHY before \ud83d\ude09)</p> <p></p> <p>Select the product you want to add in the conversation. </p> <p>Note</p> <p>A little preview will be shown in the message compose area. Note at the time this lab was created, there is an outstanding platform issue related to the preview. If you are in a Teams team, this will be blank. Hence showing this capability in a group chat.</p> <p>This is the product card, with a form to fill in and submit, incase the unit stock value has to be changed.</p> <p></p> <p>Fill in a new value in the form, and select Update stock.</p> <p></p> <p>Once it's success fully updated, the card refreshes to show the new stock value. </p> <p>The stock values are saved into the JSON version of the Northwind database; if you find the product in the Products tab, you'll see the new value.</p>      function showCompletionPopup() {         let path = window.location.pathname;         path = path.endsWith('/') ? path.slice(0, -1) : path;         let pathArray = path.split('/');         let leafFolder = pathArray[pathArray.length-1];          let height = window.outerHeight / 1.5;         let width = window.outerWidth / 2;          window.open(`${window.origin}/app-camp/congrats/${leafFolder}`,                     'Congratulations!',                     `width=${width}, height=${height}, left=100, top=100,`);     }"},{"location":"aad/MessagingExtension/#congratulations","title":"Congratulations!","text":"<p>When you have finished this lab,please click this button to let us know!</p> <p>No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!</p>"},{"location":"aad/MessagingExtension/#next-steps","title":"Next steps","text":"<p>After completing this lab, you may continue with additional extended labs!</p> <ul> <li>Add a Configurable Tab</li> <li>Add a Deep link to a personal Tab</li> <li>Add a Dialog </li> <li>Add a Meeting app</li> <li>Add a Message Extension</li> <li>Selling Your SaaS-based Teams Extension</li> </ul> <p></p>"},{"location":"aad/Monetization/","title":"Selling Your SaaS-based Teams Extension","text":""},{"location":"aad/Monetization/#selling-your-saas-based-teams-extension","title":"Selling Your SaaS-based Teams Extension","text":"<p>Important!</p> <p>This lab builds on the completed solution to lab A03-after-apply-styling.md, which is the last of the \"core\" labs. If you haven't done them, you can start here.</p> <p>In this lab, you'll allow users to purchase subscriptions for your Northwind Orders application as a transactable offer in a mock AppSource marketplace. This is similar to the purchase experience for apps listed in the Teams App Store, and it allows you to do this lab without a Partner Center account, which is required to create offers in the real AppSource. Additionally, you will integrate the Northwind Orders application with a simple licensing service that allows you to purchase licenses for your SaaS application. When you're done the Northwind Orders application will require a license to run in Teams, but will not require a license when accessing it directly. </p> <p>The AppSource simulator, as well as a sample license service, can be found in this github repository. The repo includes:</p> <ul> <li>An AppSource simulator (web site)</li> <li>A sample license service similar to one you need to provide for your app</li> <li>A web site with a landing page similar to the one you need to provide for your app</li> </ul> <p>If you'd like to install these services for yourself, the instructions are here, but we've also hosted these services for you. These instructions assume you're just going to use the hosted services. In any case, be aware that the license service  and web site with landing page  are only samples and that your app would need to implement something similar!</p> Video briefing <p> Anatomy of a SaaS Application Monetization lab walkthrough </p> Key learning resource <p>For a complete on-demand workshop focused on Commercial Marketplace, complete with hands-on labs and videos, please visit Mastering the Marketplace. Monetized Teams Store Apps are \"SaaS Offers\", so the link will bring you directly into that section of the training.  </p>"},{"location":"aad/Monetization/#exercise-1-update-env","title":"Exercise 1: Update .env","text":"<p>In this exercise, you will add information to your environment file about the hosted licensing service.</p> <p>Your <code>.env</code> file on the Northwind Orders application needs to be updated to include values that will allow it to interact with the licensing service. This service is centrally located and you share it with the other lab participants. </p> <p>Go back to your working directory and add the below entries into <code>.env</code> file:</p> <pre><code># These values are TEMPORARY and may change without notice!\nSAAS_API=https://BGmonetizationwebapi.azurewebsites.net/api/Subscriptions/CheckOrActivateLicense\nSAAS_SCOPES=api://dd82efdc-c77f-49c1-9b18-ca3d76a36264/user_impersonation\nOFFER_ID=contoso_o365_addin\n</code></pre> <p>Warning</p> <p>THE HOSTED SERVICES ARE TEMPORARY AND LIKELY TO MOVE.  Please be aware and check back here for updates.</p>"},{"location":"aad/Monetization/#exercise-2-northwind-orders-calls-the-licensing-service","title":"Exercise 2: Northwind Orders calls the licensing service","text":"<p>In this exercise, you will update the Northwind Orders app to call the licensing service.</p>"},{"location":"aad/Monetization/#step-1-add-server-side-code-to-validate-the-user-has-a-license","title":"Step 1: Add server side code to validate the user has a license","text":"<ol> <li> <p>In your working folder, create a new file <code>/server/validateLicenseService.js</code> </p> </li> <li> <p>Paste in the following code (or copy the file from here).</p> </li> </ol> <p>This code verifies the user has a license to use the Northwind Orders application. The license will only be checked when the application is being used via Teams.</p> <pre><code>import aad from 'azure-ad-jwt';\nimport fetch from 'node-fetch';\n\nexport async function validateLicense(thisAppAccessToken) {\n\n    const audience = `api://${process.env.HOSTNAME}/${process.env.CLIENT_ID}`;\n    return new Promise((resolve, reject) =&gt; {\n\n        aad.verify(thisAppAccessToken, { audience: audience }, async (err, result) =&gt; {\n            if (result) {\n                const licensingAppUrl = `${process.env.SAAS_API}/${process.env.OFFER_ID}`\n                const licensingAppAccessToken = await getOboAccessToken(thisAppAccessToken);\n                if (licensingAppAccessToken === \"interaction_required\") {\n                    reject({ \"status\":401, \"message\": \"Interaction required\"});\n                }\n\n                const licensingResponse = await fetch(licensingAppUrl, {\n                    method: \"POST\",\n                    headers: {\n                        \"Accept\": \"application/json\",\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\" :`Bearer ${licensingAppAccessToken}`\n                    }\n                });\n                if (licensingResponse.ok) {\n                    const licensingData = await licensingResponse.json();\n                    console.log(licensingData.reason);\n                    resolve(licensingData);\n                } else {\n                    reject({ \"status\": licensingResponse.status, \"message\": licensingResponse.statusText });\n                }\n            } else {\n                reject({ \"status\": 401, \"message\": \"Invalid client access token in northwindLicenseService.js\"});\n            }\n        });\n    });\n\n}\n\n// TODO: Securely cache the results of this function for the lifetime of the resulting token\nasync function getOboAccessToken(clientSideToken) {\n\n    const tenantId = process.env.TENANT_ID;\n    const clientId = process.env.CLIENT_ID;\n    const clientSecret = process.env.CLIENT_SECRET;\n    const scopes = process.env.SAAS_SCOPES;\n\n    // Use On Behalf Of flow to exchange the client-side token for an\n    // access token with the needed permissions\n\n    const INTERACTION_REQUIRED_STATUS_TEXT = \"interaction_required\";\n    const url = \"https://login.microsoftonline.com/\" + tenantId + \"/oauth2/v2.0/token\";\n    const params = {\n        client_id: clientId,\n        client_secret: clientSecret,\n        grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n        assertion: clientSideToken,\n        requested_token_use: \"on_behalf_of\",\n        scope: scopes\n    };\n\n    const accessTokenQueryParams = new URLSearchParams(params).toString();\n    try {\n        const oboResponse = await fetch(url, {\n            method: \"POST\",\n            body: accessTokenQueryParams,\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            }\n        });\n\n        const oboData = await oboResponse.json();\n        if (oboResponse.status !== 200) {\n            // We got an error on the OBO request. Check if it is consent required.\n            if (oboData.error.toLowerCase() === 'invalid_grant' ||\n                oboData.error.toLowerCase() === 'interaction_required') {\n                throw (INTERACTION_REQUIRED_STATUS_TEXT);\n            } else {\n                console.log(`Error returned in OBO: ${JSON.stringify(oboData)}`);\n                throw (`Error in OBO exchange ${oboResponse.status}: ${oboResponse.statusText}`);\n            }\n        }\n        return oboData.access_token;\n    } catch (error) {\n        return error;\n    }\n\n}\n</code></pre>"},{"location":"aad/Monetization/#step-2-add-a-server-side-api-to-validate-the-users-license","title":"Step 2: Add a server side API to validate the user's license","text":"<p>Now that you have server-side code that checks the user has a license, you need to add code that validates the that license. You'll add a POST request to the the Northwind Orders application that calls the licensing service API.</p> <ol> <li>In your working folder, locate the file <code>server/server.js</code> and open it in your code editor.</li> <li>Add these lines to the top of the file.</li> </ol> <pre><code>import aad from 'azure-ad-jwt';\nimport { validateLicense } from './validateLicenseService.js';\n</code></pre> <ol> <li>Immediately below the call to <code>await initializeIdentityService()</code>, add the following code.</li> </ol> <pre><code>// Web service validates a user's license\napp.post('/api/validateLicense', async (req, res) =&gt; {\n\n  try {\n    const token = req.headers['authorization'].split(' ')[1];\n\n    try {\n      let hasLicense = await validateLicense(token);\n      res.send(JSON.stringify({ \"validLicense\" : hasLicense }));\n    }\n    catch (error) {\n      console.log (`Error ${error.status} in validateLicense(): ${error.message}`);\n      res.status(error.status).send(error.message);\n    }\n  }\n  catch (error) {\n      console.log(`Error in /api/validateAadLogin handling: ${error}`);\n      res.status(500).json({ status: 500, statusText: error });\n  }\n\n});\n</code></pre>"},{"location":"aad/Monetization/#step-3-add-client-pages-to-display-a-license-error","title":"Step 3: Add client pages to display a license error","text":"<p>The app needs to be able to show if there is a licensing error. This step adds that code to the client.</p> <ol> <li>Add a new file, <code>client/pages/needLicense.html</code>. </li> <li>Paste in the following HTML (or copy the file from here).</li> </ol> <pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Northwind Privacy&lt;/title&gt;\n    &lt;link rel=\"icon\" href=\"data:;base64,=\"&gt; &lt;!-- Suppress favicon error --&gt;\n    &lt;link rel=\"stylesheet\" href=\"/northwind.css\" /&gt;\n\n&lt;/head&gt;\n\n&lt;body class=\"ms-Fabric\" dir=\"ltr\"&gt;   \n    &lt;h1&gt;Sorry you need a valid license to use this application&lt;/h1&gt;\n    &lt;p&gt;Please purchase a license from the Microsoft Teams store.       \n    &lt;/p&gt;\n    &lt;div id=\"errorMsg\"&gt;&lt;/div&gt;\n    &lt;script type=\"module\" src=\"needLicense.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>The HTML page needs some JavaScript to work properly.</p> <ol> <li>Create a file <code>/client/pages/needLicense.js</code>.</li> <li>Paste in the following code (or copy the file from here).</li> </ol> <pre><code>const searchParams = new URLSearchParams(window.location.search);\n\nif (searchParams.has('error')) {\n    const error = searchParams.get('error');\n    const displayElementError = document.getElementById('errorMsg');\n    displayElementError.innerHTML = error;  \n}\n</code></pre>"},{"location":"aad/Monetization/#step-4-check-if-the-user-has-a-license","title":"Step 4: Check if the user has a license","text":"<p>In this step, you will add client side function to check if the user has a license.</p> <ol> <li>Add a new file, <code>client/modules/northwindLicensing.js</code>.</li> <li>Paste in the following code (or copy the file from here). </li> </ol> <p>This code calls the server-side API we just added using an Azure AD token obtained using Microsoft Teams SSO.</p> <pre><code>import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js';\nimport { ensureTeamsSdkInitialized } from './teamsHelpers.js';\n\nexport async function hasValidLicense() {\n\n    await new Promise((resolve, reject) =&gt; {\n        microsoftTeams.initialize(() =&gt; { resolve(); });\n    });\n\n    await ensureTeamsSdkInitialized();\n    const authToken = await microsoftTeams.authentication.getAuthToken();\n\n    const response = await fetch(`/api/validateLicense`, {\n        \"method\": \"post\",\n        \"headers\": {\n            \"content-type\": \"application/json\",\n            \"authorization\": `Bearer ${authToken}`\n        },\n        \"cache\": \"no-cache\"\n    });\n\n    if (response.ok) {\n\n        const data = await response.json();\n        return data.validLicense;\n\n    } else {\n\n        const error = await response.json();\n        console.log(`ERROR: ${error}`);\n\n    }\n\n}\n</code></pre>"},{"location":"aad/Monetization/#step-5-call-the-license-api","title":"Step 5: Call the license API","text":"<p>In this step, you'll add client side code that checks the user's license on every request.</p> <ol> <li>Open the file <code>client/identity/userPanel.js</code> in your code editor.      This is a web component that displays the user's picture and name on every page, so it's an easy place to check the license.</li> <li>Add these imports at the top of the file.</li> </ol> <pre><code>import { hasValidLicense } from '../modules/northwindLicensing.js';\nimport { inTeams } from '../modules/teamsHelpers.js';\n</code></pre> <ol> <li>Add the following code at the top of the <code>else</code> clause within the <code>connectedCallback()</code> function.</li> </ol> <pre><code>    if (await inTeams()) {\n        const validLicense = await hasValidLicense();  \n        if (validLicense.status &amp;&amp; validLicense.status.toString().toLowerCase()===\"failure\") {\n                window.location.href =`/pages/needLicense.html?error=${validLicense.reason}`;\n        }    \n    }\n</code></pre> <p>The completed <code>userPanel.js</code> should look like the following code.</p> <pre><code>import {\n    getLoggedInEmployee,\n    logoff\n} from './identityClient.js';\nimport { inTeams } from '../modules/teamsHelpers.js';\nimport { hasValidLicense } from '../modules/northwindLicensing.js';\n\nclass northwindUserPanel extends HTMLElement {\n\n    async connectedCallback() {\n\n        const employee = await getLoggedInEmployee();\n\n        if (!employee) {\n\n            logoff();\n\n        } else {\n\n            if (await inTeams()) {\n                const validLicense = await hasValidLicense();  \n                if (validLicense.status &amp;&amp; validLicense.status.toString().toLowerCase()===\"failure\") {\n                     window.location.href =`/pages/needLicense.html?error=${validLicense.reason}`;\n                }    \n            }\n\n            this.innerHTML = `&lt;div class=\"userPanel\"&gt;\n                &lt;img src=\"data:image/bmp;base64,${employee.photo}\"&gt;&lt;/img&gt;\n                &lt;p&gt;${employee.displayName}&lt;/p&gt;\n                &lt;p&gt;${employee.jobTitle}&lt;/p&gt;\n                &lt;hr /&gt;\n                &lt;button id=\"logout\"&gt;Log out&lt;/button&gt;\n            &lt;/div&gt;\n            `;\n\n            const logoutButton = document.getElementById('logout');\n            logoutButton.addEventListener('click', async ev =&gt; {\n                logoff();\n            });\n        }\n    }\n}\n\n// Define the web component and insert an instance at the top of the page\ncustomElements.define('northwind-user-panel', northwindUserPanel);\nconst panel = document.createElement('northwind-user-panel');\ndocument.body.insertBefore(panel, document.body.firstChild);\n</code></pre> <p>Note</p> <p>There are many ways to make the license check more robust, such as checking it on every web service call and caching this on the server side to avoid excessive calls to the licensing server. However this is just a lab so we wanted to keep it simple.</p>"},{"location":"aad/Monetization/#exercise-3-grant-consent-to-the-licensing-api","title":"Exercise 3: Grant consent to the licensing API","text":"<p>In this exercise you will grant consent to the licensing API to be called from an application running in your tenant. Without this step, you server-side API call to the licensing service would fail.</p>"},{"location":"aad/Monetization/#step-1-add-the-api-to-apis-that-your-organization-uses","title":"Step 1: Add the API to APIs that your organization uses","text":"<p>Here you will construct and call a URL that grants tenant-wide admin consent.</p> <p>The form this URL will take is as follows, where <code>tenant-id</code> is your tenant and <code>client-id</code> is the ID of the licensing API being called by the server code.</p> <p><code>https://login.microsoftonline.com/{tenant-id}/adminconsent?client_id={client-id}</code></p> <ol> <li>Open your <code>.env</code> file. All the information you need to construct the URL is in this file.</li> <li>In a separate file, paste the URL as shown above.</li> <li>Replace <code>{tenant-id}</code> with the TENANT_ID value from the <code>.env</code> file.</li> <li>In the <code>SAAS_SCOPES</code> section is the scope of the licensing service API. Copy the GUID from this scope and use it to replace <code>{client-id}</code> in the URL you are constructing. The result should look something like this.</li> </ol> <p><code>https://login.microsoftonline.com/1661a74b-21d8-4cc9-9e09-e258e0a18291/adminconsent?client_id=dd82efdc-c77f-49c1-9b18-ca3d76a36264</code></p> <ol> <li>Now make your tenant aware of the licensing API by going to this URL in a browser. Paste the URL into a browser and hit enter.</li> </ol> <p>You will be redirected to a page that looks for localhost and throws an error. Don't worry, this is expected behavior. </p> <p>You can close this browser window.</p> <ol> <li>Open your browser to your Azure portal using your M365 credentials used for this class.</li> <li>Click on Azure Active Directory &gt; App registrations.</li> <li>Click the Northwind Orders app registration.</li> <li> <p>Click API permissions.</p> <p>You are going to add a permission to this app registration allowing the Northwind Orders application to communicate with the licensing service API.</p> </li> <li> <p>Click Add a permission.</p> </li> <li> <p>At the top of the flyout, click APIs my organization uses.</p> <p>Because you granted cross tenant access above, the Contoso Web API will be in the list of APIs.</p> </li> <li> <p>Type Contoso Monetization Code Sample Web API.</p> </li> <li>Select the API.</li> <li>Ensure the user_impersonation permission is selected.</li> <li>Click Add a permission.</li> <li> <p>Click Grant admin consent for (tenant name)\" to the right of the Add a Permission button, and click the Yes button to confirm.</p> <p>Now the Northwind Orders app registration allows the Northwind Orders application to call the licensing service API.</p> </li> </ol>"},{"location":"aad/Monetization/#exercise-4-run-the-application","title":"Exercise 4: Run the application","text":"<p>Now that all the pieces are in place, it's time to run the application you've set up.</p>"},{"location":"aad/Monetization/#step-1-run-teams-without-a-license","title":"Step 1: Run Teams without a license","text":"<p>In this initial step, you'll run the application without a user license to see how the application behaves.</p> <ol> <li>Ensure your NW Trader Orders application is running with the new code you just added. Restart if it is currently running.</li> <li>Return to your application in Microsoft Teams.</li> <li>Refresh the tab or browser if necessary.     The UI will begin to render, and then it will detect the license failure and display an error page.</li> </ol> <p></p> <p>Note</p> <p>The sample application checks the license in JavaScript, which is convenient for this lab but it would be easy for someone to bypass the license check. In a real application you'd probably check the license on all accesses to your application web site.</p>"},{"location":"aad/Monetization/#step-2-purchase-a-subscription-and-set-licensing-policy","title":"Step 2: Purchase a subscription and set licensing policy","text":"<p>In a real-world situation, your SaaS offer is listed in the Teams Store and the Microsoft AppSource marketplace. Users can purchase your app in either location. </p> <p>For this lab you will use an AppSource simulator to mock your interactions with the actual marketplace. Just know that Teams users can purchase apps directly from the user interface when they're listed in the Teams app store.</p> <p>Note</p> <p>For your convenience, app service simulator is temporarily hosted at https://bgmonetizationappsource.azurewebsites.net/. If you'd prefer to host it yourself, the instructions are here.</p> <ol> <li> <p>Browse to mock AppSource URL. This should display the AppSource simulator. </p> </li> <li> <p>Click the Purchase button to purchase a subscription to the Northwind Orders application.</p> </li> </ol> <p></p> <p>Note</p> <p>Notice that the AppSource simulator's background color is green to make it easy to distinguish from your app's landing page, which has a blue background.</p> <p>Note</p> <p>The AppSource simulator has a mock offer name, \"Contoso Apps\", rather than showing the \"Northwind Orders\" app. This is just a constant defined in the monetization project's <code>SaasOfferMockData/Offers.cs</code> file. The real AppSource web page shows the application name and other information you would configure in Partner Center.</p> <p>The AppSource simulator displays the plans available for the offer. The simulator has two hard-coded plans, \"SeatBasedPlan\" (which uses a per-user pricing model), and a \"SiteBasedPlan\" (which uses a flat-rate pricing model). </p> <p>The real AppSource would show the plans you had defined in Partner Center, the publisher's portal for defining and publishing AppSource offers.</p> <p>Microsoft Teams currently supports only the per-user pricing model</p> <ol> <li>Select the \"SeatBasedPlan\" and click the Purchase button. Because this is a simulator, your credit card will not be charged.</li> </ol> <p></p> <p>The simulated purchase is now complete, so you will be redirected to the app's landing page. </p> <p>Warning</p> <p>For your convenience, the web site containing the landing page is temporarily hosted at https://bgmonetizationwebapp.azurewebsites.net/. If you'd prefer to install the services on Azure and host it yourself, the instructions are here.</p> <p>The landing page gives the app a chance to interact with the user and capture any configuration information it needs. Users who purchase the app in the Teams store would be brought to this same page. </p> <p>You will need to supply a page like this as part of your application; it interprets a token sent by AppSource and logs the user in with AAD SSO. This token is then sent to the SaaS Fulfillment API v2, which provides the details of the customer's subscription. </p> <p>The sample app's landing page allows the user to select a region; the app stores this information in its own database. Notice the background color of these pages is blue; the blue pages are for your application to implement and are only a sample we've hosted based on this sample.</p> <p></p> <p>Note</p> <p>Notice that the Landing Page and licensing pages' background color is blue to make it easy to distinguish from the App Source Simulator, which has a green background.</p> <p>Warning</p> <p>Even though this lab didn't walk you through creating the landing page and other licnsing pages (the blue ones) - you as an application developer need to provide these. Many SaaS services may already have a licensing service and want to extend it to work with the Microsoft Commercial Marketplace. We're working on more options to make this easier, both for ISV's with existing licensing services and those who need a new one.</p> <p>Once the region is selected, the sample app shows a welcome page with the user's name, which is obtained by reading the user's profile with the Microsoft Graph API. </p> <ol> <li>Click License Settings to view the license assignment screen.</li> </ol> <p></p> <p>On this screen you can add individual user licenses using the Add User button, or you can set a policy that allows users to claim licenses on a first come, first served basis. Turn on the First come first served switch to enable this option.</p> <p></p> <p>Warning</p> <p>Everything on this screen is defined by the your SaaS application. It's intended to be flexible since publishers have a wide range of licensing approaches. Apps can tell who's logging in via Azure AD and use the user ID and tenant ID to authorize access, provide personalization, etc.</p>"},{"location":"aad/Monetization/#step-3-run-the-application-in-teams","title":"Step 3: Run the application in Teams","text":"<p>Now that you've purchased a subscription, you can see the Northwind Orders application in Teams.</p> <ol> <li>Return to Microsoft Teams and refresh your application.      The license will be approved and the user can interact with the application normally.</li> </ol> <p></p> <ol> <li>Return to the licensing application.</li> </ol> <p>If you've closed the tab, you can find it at the mock AppSource URL you received earlier. </p> <p></p> <p>Notice that your username has been assigned a license. The sample app stored this in a SQL Server database. When the Teams application called the licensing service, the access token contained the tenant ID and user ID, enabling the licensing service to determine that the user has a license.</p>"},{"location":"aad/Monetization/#exercise-5-inspect-the-licensing-code","title":"Exercise 5: Inspect the licensing code","text":"<p>In this exercise, you'll inspect key areas of the sample licensing service used in this lab. In an actual application, you would write your own licensing service or extend your existing licensing service to integrate it with your SaaS offer on AppSource.</p>"},{"location":"aad/Monetization/#step-1-resolving-the-marketplace-token","title":"Step 1: Resolving the Marketplace Token","text":"<p>When a user completes the process of purchasing your application in AppSource or the Microsoft Teams app store, they are directed to the app's landing page. This URL is for a web page provided by the software vendor and registered in Partner Center. In this lab, the landing page is part of the SaaSSampleWebApp sample.</p> <p>Microsoft sends a marketplace token to the landing page; eventually this is resolved in the sample app's Subscription service.</p> <pre><code>[Route(\"resolve\")]\n[HttpPost]\npublic async Task&lt;IActionResult&gt; ResolveAsync([FromForm] string AuthCode)\n{\n    using var requestMessage = new HttpRequestMessage(HttpMethod.Post,\n        $\"{_configuration[\"SaaSfulfillmentAPIs:ApiEndPoint\"]}/api/saas/subscriptions/resolve?api-version={_configuration[\"SaaSfulfillmentAPIs:ApiVersion\"]}\");\n\n    // the token is not required for Mock APIs \n    // requestMessage.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", your_token);\n\n    requestMessage.Headers.Add(\"x-ms-marketplace-token\", AuthCode);\n\n    var httpClient = _httpClientFactory.CreateClient();\n\n    using (var response = await httpClient.SendAsync(requestMessage).ConfigureAwait(false))\n    {\n        if (response.StatusCode == HttpStatusCode.OK)\n        {\n            var content = await response.Content.ReadAsStringAsync().ConfigureAwait(false);\n            var resolvedSubscription = JsonConvert.DeserializeObject&lt;ResolvedSubscription&gt;(content);\n\n            var subscription = new Subscription\n            {\n                Id = resolvedSubscription.Id,\n                OfferId = resolvedSubscription.OfferId,\n                PlanId = resolvedSubscription.PlanId,\n                SubscriptionName = resolvedSubscription.SubscriptionName,\n                Purchaser = HttpContext.User.Identity.Name,\n                PurchaserId = Guid.Parse(HttpContext.User.GetObjectId()),\n                TenantId = Guid.Parse(HttpContext.User.GetTenantId()),\n                PurchaseSeatsCount = resolvedSubscription.Quantity,\n                AllowOverAssignment = false,\n                FirstComeFirstServedAssignment = false\n            };\n            return Ok(subscription);\n        }\n        return BadRequest(response.ReasonPhrase);\n    }\n}\n</code></pre> <p>The sample calls the AppSource simulator to get information about the subscription that was purchased. In your service, you would call this Marketplace API to do this exchange.</p>"},{"location":"aad/Monetization/#step-2-examine-web-hooks","title":"Step 2: Examine web hooks","text":"<p>In addition to a landing page, your application will need to provide a set of web hooks that Microsoft can call to let you know about subscription changes. The sample app doesn't implement all the webhooks, but does implement a subset that are supported by the AppSource simulator. The WebHookController responds to these events:</p> <ul> <li>ChangePlan - called when a user changes their offer plan, such as moving from a Silver to a Gold plan. Plans are defined by the software using Partner Center.</li> <li>ChangeQuantity - called when a user changes the quantity of seats in a per-seat SaaS offer</li> <li>Unsubscribe - called when a user cancels their subscription</li> </ul> <p>The full list of webhooks events is documented here.</p>"},{"location":"aad/Monetization/#step-3-examine-the-license-check","title":"Step 3: Examine the license check","text":"<p>In Exercise 2 you added code to check if the user has a license. This call is handled here, in the CheckOrAdtivateLicense method in the Subscriptions controller. Notice that this code includes some business logic and accesses a license database in Azure SQL using Entity Framework. </p> <p>The point of this is that the application is managing licenses in its own way and keeping track of them in its own database. Microsoft Commercial Marketplace manages subscriptions which grant licenses, but each application can manage those licenses however it wants to. This allows applications flexibility in how they implement licensing.</p>      function showCompletionPopup() {         let path = window.location.pathname;         path = path.endsWith('/') ? path.slice(0, -1) : path;         let pathArray = path.split('/');         let leafFolder = pathArray[pathArray.length-1];          let height = window.outerHeight / 1.5;         let width = window.outerWidth / 2;          window.open(`${window.origin}/app-camp/congrats/${leafFolder}`,                     'Congratulations!',                     `width=${width}, height=${height}, left=100, top=100,`);     }"},{"location":"aad/Monetization/#congratulations","title":"Congratulations!","text":"<p>When you have finished this lab,please click this button to let us know!</p> <p>No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!</p>"},{"location":"aad/Monetization/#known-issues","title":"Known issues","text":"<p>For the latest issues, or to file a bug report, see the github issues list for this repository.</p>"},{"location":"aad/Monetization/#next-steps","title":"Next steps","text":"<p>After completing this lab, you may continue with additional extended labs!</p> <ul> <li>Add a Configurable Tab</li> <li>Add a Deep link to a personal Tab</li> <li>Add a Dialog </li> <li>Add a Meeting app</li> <li>Add a Message Extension</li> <li>Selling Your SaaS-based Teams Extension</li> </ul> <p></p>"},{"location":"bespoke/B01-begin-app/","title":"B01 - Start with a non-Azure Active Directory Identity System","text":""},{"location":"bespoke/B01-begin-app/#lab-b01-start-with-a-non-azure-active-directory-identity-system","title":"Lab B01: Start with a non-Azure Active Directory Identity System","text":""},{"location":"bespoke/B01-begin-app/#overview","title":"Overview","text":"<p>This is the very first lab in Path B, which begins with an application that uses an authorization system other than Azure AD.</p> <p>You will learn a pattern for adding Azure AD authentication for users while maintaining another identity system's user profiles and authorization. This won't work everywhere but a number of partners have been successful with this kind of approach. In this case, the application has a simple cookie-based authentication scheme that's not secure but is easy to understand. </p> <p>If you use an identity provider such as Auth0, Google Identity Services, Identity Server, Okta, or Ping Federate, this is the path for you. Even Azure AD B2C - which isn't at all the same as Azure AD - would follow this path.</p> Are you on the right path? Expand these notes to find out! <p>There are two options for doing the labs:</p> <ul> <li> <p>The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL).</p> </li> <li> <p>the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On.</p> </li> </ul> <p>In this lab you will set up the Northwind Orders application, which can be found in the B01-begin-app folder. The labs that follow will lead you step by step into extending the web application to be a Microsoft Teams application with Azure AD Single Sign-On. </p> <ul> <li>B01-begin-app: Setting up the application (\ud83d\udccdYou are here)</li> <li>B02-after-teams-login: Creating a Teams application</li> <li>B03-after-teams-sso: Adding Azure AD SSO to your app</li> <li>B04-after-apply-styling: Teams styling and themes</li> </ul> <p>In this lab you will learn to:</p> <ul> <li>Run a web application using NodeJS</li> <li>Expose a local web application using ngrok</li> </ul> <p>Note</p> <p>This lab uses the account linking strategy explained in this blog article. Please check it out for more details. In addition, the author has created a .NET sample showing this principle, so if you're a .NET developer this can give you a head start!</p> <p>Warning</p> <p>The \"B Path\" labs are overly simplistic and even if the fake \"bespoke\" IdP was secure, the account linking would not be secure as implemented here. Specifically, instead of linking the Azure AD user to the bespoke app's Employee ID, it should link to a secure token for the original app's identity provider.</p> <p>See this issue for details.</p> Video briefing <p> \"B Path\" Lab Briefing </p>"},{"location":"bespoke/B01-begin-app/#features","title":"Features","text":"<ul> <li>View orders associated with the logged-in user (sales representative)</li> <li>View products by category</li> <li>View product details and orders for a product</li> <li>View order details</li> </ul> <p>The application is based on the Northwind Traders Database, which is a sample relational database that originally shipped with Microsoft Access. The Northwind Traders Database is now available as a demonstration OData service, which is queried in this lab. This is a read-only data source; some of the later exercises appear to update the data but the changes are only stored in the server memory and will only persist until the server is restarted.</p>"},{"location":"bespoke/B01-begin-app/#exercise-1-install-prerequisites","title":"Exercise 1: Install prerequisites","text":"<p>You can complete these labs on a Windows, Mac, or Linux machine, but you do need the ability to install the prerequisites. If you are not permitted to install applications on your computer, you'll need to find another machine (or virtual machine) to use throughout the workshop.</p>"},{"location":"bespoke/B01-begin-app/#step-1-install-nodejs","title":"Step 1: Install NodeJS","text":"<p>NodeJS is a program that allows you to run JavaScript on your computer; it uses the open source \"V8\" engine, which is used in popular web browsers such as Microsoft Edge and Google Chrome. You will need NodeJS to run the web server code used throughout this workshop.</p> <p>Browse to https://nodejs.org/en/download/ and install the \"LTS\" (Long Term Support) version for your operating system. This lab has been ested using NodeJS version 14.17.4 and 16.14.0. If you already have another version of NodeJS installed, you may want to set up the Node Version Manager (or this variation for Microsoft Windows), which allows you to easily switch Node versions on the same computer.</p>"},{"location":"bespoke/B01-begin-app/#step-2-install-a-code-editor","title":"Step 2: Install a Code Editor","text":"<p>You can really use any code editor you wish, but we recommend Visual Studio Code.</p>"},{"location":"bespoke/B01-begin-app/#step-3-install-ngrok","title":"Step 3: Install ngrok","text":"<p>ngrok is a tunneling program that allows you to access your local web server (running in NodeJS in this case) from the Internet. To complete this exercise, sign up for a free ngrok account and install ngrok on your computer.</p> <p>The free version of ngrok will assign a URL similar to https://something.ngrok.io, where \"something\" is a random identifier. As long as ngrok is running (leave it going in a command or terminal window), you can browse your web site at that URL. If you start and stop ngrok, or try to keep it running for more than 8 hours, you'll get a new identifier and you'll need to update your app registration, environment variables, etc. The paid version of ngrok allows you to reserve the same URL for use over time, removing the need to update it when you return to the lab.</p> <p>Tip</p> <p>If you restart ngrok and get a new URL under the free plan, you can refer to this page for details on all the places in the labs where you need to update the URL.</p> <p>While ngrok isn't strictly required for developing Microsoft Teams applications, it makes things much easier, especially if Bots are involved. An example of this is the Message Extension lab since Message Extensions use a Bot to communicate with Microsoft Teams.</p> More information <p> What is ngrok and do you really need it? </p>"},{"location":"bespoke/B01-begin-app/#step-4-start-ngrok","title":"Step 4: Start ngrok","text":"<p>In the command line tool of your choice, navigate to the folder where you've saved ngrok.exe and run this command:</p> <pre><code>ngrok http 3978\n</code></pre> <p>The terminal will display a screen like this; note the https forwarding URL for use in this lab. ngrok will tunnel requests on this URL to your local host on port 3978 for easy debugging.</p> <p>Save this URL for use throughout the labs.</p> <p></p> <p>Warning</p> <p>Do not stop ngrok for the duration of these labs. If you do stop ngrok and are assigned a new URL, this page lists all the exercises which involve the ngrok URL so you can easily update it.</p>"},{"location":"bespoke/B01-begin-app/#exercise-2-configure-and-run-the-application","title":"Exercise 2: Configure and run the application","text":""},{"location":"bespoke/B01-begin-app/#step-1-download-the-starting-application","title":"Step 1: Download the starting application","text":"<p>The starting application is in github at https://github.com/microsoft/app-camp. Click the \"Code\" button and clone or download the content to your computer.</p> <p></p> <p>The starting code for the \"B\" path is in the src/create-core-app/bespoke/B01-begin-app folder. Copy this folder to nother location on your computer; this will be your working copy to keep the original source separate. Folders are also provided with the final code for the other labs.</p>"},{"location":"bespoke/B01-begin-app/#step-2-install-the-apps-dependencies","title":"Step 2: Install the app's dependencies","text":"<p>Using a command line tool of your choice, navigate to your working directory and type the command:</p> <pre><code>npm install\n</code></pre> <p>This will install the libraries required to run the server side of your solution.</p>"},{"location":"bespoke/B01-begin-app/#step-3-download-the-sample-data","title":"Step 3: Download the sample data","text":"<p>The Northwind Orders application uses the venerable Northwind database for sample data. The Northwind Database originally shipped with Microsoft Access, then SQL Server, and now is available as a test OData service from the OData organization. In this step, you'll download the entire Northwind database from this test service to local JSON files, which are used by the Northwind Orders application.</p> <p>Using a command line tool in your working directory, type:</p> <pre><code>npm run db-download\n</code></pre> <p>This will create a JSON file in the northwindDB folder for each table in the Northwind database. The appliction reads and writes these JSON files. It's generous to call these files a \"database\", but it works well for a single-user lab environment.</p>"},{"location":"bespoke/B01-begin-app/#step-4-configure-the-app-settings","title":"Step 4: Configure the app settings","text":"<p>In a code editor, open the working folder you created in Step 2. Copy the .env_sample file to a new file called .env and open the new file. It will look like this:</p> <pre><code>COMPANY_NAME=Northwind Traders\nPORT=3978\n</code></pre> <p>No changes are required to this file until future labs in the series, but you do need to create the .env file for the app to run.</p>"},{"location":"bespoke/B01-begin-app/#step-5-run-the-application","title":"Step 5: Run the application","text":"<p>To run the application, open a command line in your working folder and type:</p> <pre><code>npm start\n</code></pre> <p>At this point you should be able to browse to your ngrok URL (saved in Exercise 1 Step 4) and use the application. Note that due to the ngrok tunnel, you can try your app from anywhere on the Internet.</p> <p>At first you will be directed to the Northwind login page.</p> <p></p> <p>The login system is ridiculously simple; usernames just the last names of each employee, which are stored in the Northwind employee database. Any employee last name with any password will work! As if that wasn't insecure enough, the employees are listed right on the page! (This is intended for instructional purposes, not to be secure. Do not use this code in a real application!)</p> <p>Log in using one of the last names shown with a blank password; the system will ensure the employee exists and place the employee ID in a browser session cookie. Each web service request is validated by checking that the cookie contains a number. Of course a real authentication scheme would require a password or other proof of identity, and would issue a secure token in the cookie or elsewhere.</p> <p>When you've logged in, you will see the Northwind Orders application. The home page contains two pieces of information from the user profile, the user's full name and a small profile card showing the user's name, job title, and a logoff button.</p> <p></p> <p>Click \"My Orders\" in the top navigation bar to view the employee's orders.</p> <p></p> <p>You can click on any order to view the details.</p> <p></p> <p>From here you can click on any product to view its details. Much of the data is hyperlinked in this fashion.</p> <p>You can also click on \"Products\" in the top navigation to view a list of product categories.</p> <p></p> <p>From there you can click into a product category to view a list of products, and then you can click into a product to see its details. The product detail page shows all the orders for the product, which leads to a list of orders, and so you can click your way around the sample data.</p> <p>Try logging out and logging in; you should be able to view the orders for another user based on the employee ID field in the Orders table.</p> <p>Danger</p> <p>The sample application uses a browser session cookie to establish who is logged in. It is not secure and would be easy to fake - do not use this in a real application! Also be aware during testing that your login will persist until you close all instances of your web browser. For example if you leave your browser logged in after this lab and then run Microsoft Teams in another instance of the same browser, your user will already be logged in when you get to the next lab.</p>      function showCompletionPopup() {         let path = window.location.pathname;         path = path.endsWith('/') ? path.slice(0, -1) : path;         let pathArray = path.split('/');         let leafFolder = pathArray[pathArray.length-1];          let height = window.outerHeight / 1.5;         let width = window.outerWidth / 2;          window.open(`${window.origin}/app-camp/congrats/${leafFolder}`,                     'Congratulations!',                     `width=${width}, height=${height}, left=100, top=100,`);     }"},{"location":"bespoke/B01-begin-app/#congratulations","title":"Congratulations!","text":"<p>When you have finished this lab,please click this button to let us know!</p> <p>No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!</p>"},{"location":"bespoke/B01-begin-app/#known-issues","title":"Known issues","text":"<p>While it will work on mobile devices, the application is not responsive and will not look good on these devices. This may be addressed in a future version of the lab.</p> <p>For the latest issues, or to file a bug report, see the github issues list for this repository.</p>"},{"location":"bespoke/B01-begin-app/#next-lab","title":"Next lab","text":"<p>Here is the next lab, in which you will create a simple Teams application that displays pages from the app you just set up.</p> <p></p>"},{"location":"bespoke/B02-after-teams-login/","title":"B02 - Teams App with Bespoke Authentication","text":""},{"location":"bespoke/B02-after-teams-login/#lab-b02-teams-app-with-bespoke-authentication","title":"Lab B02: Teams App with Bespoke Authentication","text":"<p>This is parth of Path B, which begins with an application that uses an authorization system other than Azure AD.</p> Are you on the right path? Expand these notes to find out! <p>There are two options for doing the labs:</p> <ul> <li> <p>The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL).</p> </li> <li> <p>the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On.</p> </li> </ul> <p>In this lab you will build the application you created in Lab B01 into a Microsoft Teams application. This application will still use the Northwind authentication, but since the Northwind login page won't work in the Teams tab IFrame, we'll use the Teams JavaScript SDK to show it in a pop-up.</p> <ul> <li>B01-begin-app: Setting up the application </li> <li>B02-after-teams-login: Creating a Teams application(\ud83d\udccdYou are here)</li> <li>B03-after-teams-sso: Adding Azure AD SSO to your app</li> <li>B04-after-apply-styling: Teams styling and themes</li> </ul> <p>In this lab you will learn to:</p> <ul> <li>Create a Microsoft Teams app manifest and package that can be installed into Teams</li> <li>Use the Teams JavaScript SDK to display a login page in a pop-up window</li> <li>Install and test your application in Microsoft Teams</li> </ul> Video briefing <p> \"B Path\" Lab Briefing </p>"},{"location":"bespoke/B02-after-teams-login/#features","title":"Features","text":"<ul> <li>Microsoft Teams personal tab application displays the Northwind Orders web application</li> <li>Users sign into the Teams application using the existing Northwind login page</li> <li>Application alters its appearance (hides the top navigation) when running in Teams, allowing Teams tab navigation instead</li> </ul>"},{"location":"bespoke/B02-after-teams-login/#project-structure","title":"Project structure","text":"Project files before and after this lab (open to display \u25ba) <p>The project structure when you start of this lab and end of this lab is as follows. Use this depiction for comparison.</p> <p>On your left is the contents of folder  <code>B01-Start-BespokeAuth</code> and on your right is the contents of folder <code>B02-TeamsApp-BespokeAuth</code>. - \ud83c\udd95 New files/folders</p> <ul> <li>\ud83d\udd3aFiles changed  Project Structure Before  Project Structure After <pre>\nB01-begin-app\n    \u251c\u2500\u2500 client\n    \u2502   \u251c\u2500\u2500 components\n    \u2502       \u251c\u2500\u2500 \ud83d\udd3anavigation.js\n    \u2502   \u2514\u2500\u2500 identity\n    \u2502       \u251c\u2500\u2500 \ud83d\udd3aidentityClient.js\n    \u2502       \u2514\u2500\u2500 login.html\n    \u2502       \u2514\u2500\u2500 \ud83d\udd3alogin.js\n    \u2502       \u2514\u2500\u2500 userPanel.js\n    \u251c\u2500\u2500 modules\n    \u2502   \u2514\u2500\u2500 env.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u251c\u2500\u2500 pages\n    \u2502   \u2514\u2500\u2500 categories.html\n    \u2502   \u2514\u2500\u2500 categories.js\n    \u2502   \u2514\u2500\u2500 categoryDetails.html\n    \u2502   \u2514\u2500\u2500 categoryDetails.js\n    \u2502   \u2514\u2500\u2500 myOrders.html\n    \u2502   \u2514\u2500\u2500 orderDetail.html\n    \u2502   \u2514\u2500\u2500 orderDetail.js\n    \u2502   \u2514\u2500\u2500 privacy.html\n    \u2502   \u2514\u2500\u2500 productDetail.html\n    \u2502   \u2514\u2500\u2500 productDetail.js\n    \u2502   \u2514\u2500\u2500 termsofuse.html\n    \u251c\u2500\u2500 index.html\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 northwind.css\n    \u251c\u2500\u2500 server\n    \u2502   \u2514\u2500\u2500 constants.js\n    \u2502   \u2514\u2500\u2500 identityService.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 server.js\n    \u251c\u2500\u2500 \ud83d\udd3a.env_Sample\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 \ud83d\udd3apackage.json\n    \u251c\u2500\u2500 README.md\n</pre> <pre>\nB02-after-teams-login\n    \u251c\u2500\u2500 client\n    \u2502   \u251c\u2500\u2500 components\n    \u2502       \u251c\u2500\u2500 \ud83d\udd3anavigation.js\n    \u2502   \u2514\u2500\u2500 identity\n    \u2502       \u251c\u2500\u2500 \ud83d\udd3aidentityClient.js\n    \u2502       \u2514\u2500\u2500 login.html\n    \u2502       \u2514\u2500\u2500 \ud83d\udd3alogin.js\n    \u2502       \u2514\u2500\u2500 \ud83c\udd95teamsLoginLauncher.html\n    \u2502       \u2514\u2500\u2500 \ud83c\udd95teamsLoginLauncher.js\n    \u2502       \u2514\u2500\u2500 userPanel.js\n    \u251c\u2500\u2500 modules\n    \u2502   \u2514\u2500\u2500 env.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 \ud83c\udd95teamsHelpers.js\n    \u251c\u2500\u2500 pages\n    \u2502   \u2514\u2500\u2500 categories.html\n    \u2502   \u2514\u2500\u2500 categories.js\n    \u2502   \u2514\u2500\u2500 categoryDetails.html\n    \u2502   \u2514\u2500\u2500 categoryDetails.js\n    \u2502   \u2514\u2500\u2500 myOrders.html\n    \u2502   \u2514\u2500\u2500 orderDetail.html\n    \u2502   \u2514\u2500\u2500 orderDetail.js\n    \u2502   \u2514\u2500\u2500 privacy.html\n    \u2502   \u2514\u2500\u2500 productDetail.html\n    \u2502   \u2514\u2500\u2500 productDetail.js\n    \u2502   \u2514\u2500\u2500 termsofuse.html\n    \u251c\u2500\u2500 index.html\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 northwind.css\n    \u251c\u2500\u2500 \ud83c\udd95manifest\n    \u2502   \u2514\u2500\u2500 \ud83c\udd95makePackage.js\n    \u2502   \u2514\u2500\u2500 \ud83c\udd95manifest.template.json\n    \u2502   \u2514\u2500\u2500 \ud83c\udd95northwind32.png\n    \u2502   \u2514\u2500\u2500 \ud83c\udd95northwind192.png\n    \u251c\u2500\u2500 server\n    \u2502   \u2514\u2500\u2500 constants.js\n    \u2502   \u2514\u2500\u2500 identityService.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 server.js\n    \u251c\u2500\u2500 \ud83d\udd3a.env_Sample\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 \ud83d\udd3apackage.json\n    \u251c\u2500\u2500 README.md\n</pre> </li> </ul>"},{"location":"bespoke/B02-after-teams-login/#exercise-1-set-up-your-microsoft-365-subscription","title":"Exercise 1 Set up your Microsoft 365 Subscription","text":"<p>To run your application in Microsoft Teams, you'll need a Microsoft 365 subscription. In this exercise you'll acquire a free developer subscription and configure it so you can easily upload Teams applications.</p>"},{"location":"bespoke/B02-after-teams-login/#step-1-get-a-tenant","title":"Step 1: Get a tenant","text":"<p>If you don't yet have a tenant, please join the Microsoft 365 Developer Program to get a free one. Your tenant includes 25 E5 user licenses and can be renewed as long as you keep developing!</p> <p>Click \"Join now\" to begin. </p> <p>Log in with any Microsoft personal or work and school account, enter your information, and click \"Next\". You will have an opportunity to choose what kind of \"sandbox\" you want; the \"Instant sandbox\" is recommended.</p> <p></p> <p>Follow the wizard and select your administrator username and password, tenant domain name, etc. The domain name you choose is just the left-most portion - for example if you enter \"Contoso\" your domain will be \"Contoso.onmicrosoft.com\".</p> <p>Remember this information as you'll need it throughout the labs! You will log in as @.onmicrosoft.com with the password your chose. You'll be prompted for your phone number and then the system will set up your subscription. <p>Eventually you'll be prompted to log into your new tenant. Be sure to use the new administrator credentials you just created, not the ones you used when you signed up for the developer program.</p> <p>Tip: Don't develop or do the labs in production!</p> <p>It may be tempting to build solutions right where you work every day, but there are good reasons to have a dedicated dev tenant - and probably additional staging/test tenants. They're free, and you can safely experiment as a tenant admin without risking your production work. </p> More information <p> Setting up your Microsoft 365 Development tenant </p> <p>Tip: Navigating many tenants</p> <p>Consider creating a browser profile for each tenant that will have its own favorites, stored credentials, and cookies so you can easily swtch between tenants as you work.</p> <p>You may be asked to enable multi-factor authentication (MFA)</p> <p>This is certainly a good idea! Just follow the instructions. If you really must turn off MFA, here are instructions. </p>"},{"location":"bespoke/B02-after-teams-login/#step-2-enable-teams-application-uploads","title":"Step 2: Enable Teams application uploads","text":"<p>By default, end users can't upload Teams applications directly; instead an administrator needs to upload them into the enterprise app catalog. In this step you will enable direct uploads to make developement easier and allow installation directly from the Teams user interface.</p> <p>a. In the left panel of the admin center, click \"Show all\" to open up the entire navigation</p> <p></p> <p>When the panel opens, click Teams to open the Microsoft Teams admin center.</p> <p></p> <p>b. In the left of the Microsoft Teams admin center, open the Teams apps accordion 1\ufe0f\u20e3 and select Setup Policies 2\ufe0f\u20e3. You will see a list of App setup policies. Click the Global (Org-wide default) policy 3\ufe0f\u20e3.</p> <p></p> <p>c. Ensure the first switch, \"Upload custom apps\" is turned On.</p> <p></p> <p>Be sure to scroll down and click the \"Save\" button to persist your change.</p> <p></p> <p>We have been working to get this enabled by default on developer tenants, so it may already be set for you. The change can take up to 24 hours to take effect, but usually it's much faster.</p> <p>### Exercise 2: Start ngrok and obtain the ngrok URL</p>"},{"location":"bespoke/B02-after-teams-login/#step-1-start-ngrok","title":"Step 1: Start ngrok","text":"<p>Before you can register your application, you will need to start ngrok to obtain the URL for your application. Run this command in the command line tool of your choice:</p> <pre><code>ngrok http 3978 -host-header=localhost\n</code></pre> <p>The terminal will display a screen like this; note the https forwarding URL for use in this lab. Save this URL for use throughout the labs.</p> <p></p> <p>Warning</p> <p>Do not stop ngrok for the duration of these labs. If you do stop ngrok and are assigned a new URL, this page lists all the exercises which involve the ngrok URL so you can easily update it.</p>"},{"location":"bespoke/B02-after-teams-login/#exercise-3-create-the-teams-application-package","title":"Exercise 3: Create the Teams application package","text":"<p>Microsoft Teams applications don't run \"inside\" of Microsoft Teams, they just appear in the Teams user interface. A tab in Teams is just a web page which could be hosted anywhere as long as the Teams client can reach it. </p> <p>To create a Teams application, you need to create a file called manifest.json which contains the information Teams needs to display the app, such as the URL of the Northwind Orders application. This file is placed in a .zip file along with the application icons, and the resulting application package is uploaded into Teams or distributed through the Teams app store.</p> <p>In this exercise you'll create a manifest.json file and application package for the Northwind Orders app and upload it into Microsoft Teams.</p>"},{"location":"bespoke/B02-after-teams-login/#step-1-copy-the-manifest-folder-to-your-working-directory","title":"Step 1: Copy the manifest folder to your working directory","text":"<p>Many developers use the Teams Developer Portal to create an app package; this is preferred by many enterprise developer and systems integrators. However ISV's may want to keep the app package settings in their source control system, and that's the approach used in the lab. It's just a zip file; you can create it any way you want!</p> <p>Go to your local copy of the <code>B02-TeamsApp-BespokeAuth</code> folder on your computer and copy the manifest folder into the working folder you used in the previous lab. This folder contains a template for building the manifest.json file.</p>"},{"location":"bespoke/B02-after-teams-login/#step-2-examine-the-manifest-template","title":"Step 2: Examine the manifest template","text":"<p>In the manifest folder you just copied, open manifest.template.json in your code editor. This is the JSON that Teams needs to display your application.</p> <p>Notice that the template contains tokens such as<code>&lt;HOST_NAME&gt;</code> and <code>&lt;TEAMS_APPI_D&gt;</code>. A small build script will take these values from your .env file and plug them into the manifest. However the token <code>&lt;TEAMS_APP_ID&gt;</code> is not yet in the .env file; we'll add that in the next step.</p> <p>Examine the <code>staticTabs</code> property in the manifest. It defines two tabs, one for the \"My Orders\" page and one for the \"Products\" page. The <code>contentUrl</code> is used within the Teams application, and <code>websiteUrl</code> is used if Teams can't render the tab and needs to launch it in a regular web browser. The Northwind Orders app will use the same code URL's for both.</p> <pre><code>\"staticTabs\": [\n  {\n    \"entityId\": \"Orders\",\n    \"name\": \"My Orders\",\n    \"contentUrl\": \"https://&lt;HOST_NAME&gt;/pages/myOrders.html\",\n    \"websiteUrl\": \"https://&lt;HOST_NAME&gt;/pages/myOrders.html\",\n    \"scopes\": [\n      \"personal\"\n    ]\n  },\n  {\n    \"entityId\": \"Products\",\n    \"name\": \"Products\",\n    \"contentUrl\": \"https://&lt;HOST_NAME&gt;/pages/categories.html\",\n    \"websiteUrl\": \"https://&lt;HOST_NAME&gt;/pages/categories.html\",\n    \"scopes\": [\n      \"personal\"\n    ]\n\n</code></pre>"},{"location":"bespoke/B02-after-teams-login/#step-3-add-the-teams-app-id-to-the-env-file","title":"Step 3: Add the Teams App ID to the .env file","text":"<p>Open the .env file in your working directory and add these lines, using the ngrok URL:</p> <pre><code>TEAMS_APP_ID=1331dbd6-08eb-4123-9713-017d9e0fc04a\nHOST_NAME=&lt;something&gt;.ngrok.io\n</code></pre> <p>You should generate a different GUID for each application you register; this one is just here for your convenience. We could have hard-coded the app ID in the manifest.json template, but there are times when you need it in your code, so this will make that possible in the future.</p>"},{"location":"bespoke/B02-after-teams-login/#step-4-update-your-packagejson-file","title":"Step 4: Update your package.json file","text":"<p>Open the package.json file in your working directory and add a script that will generate the app package. The script code is in the manifest folder you just copied, so we just need to declare it in package.json. This is what <code>scripts</code> property should look like when you're done.</p> <pre><code>\"scripts\": {\n  \"start\": \"nodemon server/server.js\",\n  \"debug\": \"nodemon --inspect server/server.js\",\n  \"package\": \"node manifest/makePackage.js\"\n},\n</code></pre> <p>The script uses an npm package called \"adm-zip\" to create the .zip file, so you need to add that as a development dependency. Update the <code>devDependencies</code> property to include it like this:</p> <pre><code>  \"devDependencies\": {\n    \"@types/express\": \"^4.17.2\",\n    \"@types/request\": \"^2.48.3\",\n    \"nodemon\": \"^2.0.13\",\n    \"adm-zip\": \"^0.4.16\"\n  }\n</code></pre> <p>Then, from a command line in your working directory, install the package by typing</p> <pre><code>npm install\n</code></pre>"},{"location":"bespoke/B02-after-teams-login/#step-5-build-the-package","title":"Step 5: Build the package","text":"<p>Now you can build a new package at any time with this command:</p> <pre><code>npm run package\n</code></pre> <p>Go ahead and run it, and two new files, manifest.json and northwind.zip (the app package) should appear in your manifest folder.</p>"},{"location":"bespoke/B02-after-teams-login/#exercise-3-modify-the-application-source-code","title":"Exercise 3: Modify the application source code","text":"<p>If you were to run the application as-is in Microsoft Teams, you'd see this error message:</p> <p></p> <p>The reason for this is that most login pages, including this one, contain code to detect if they're running in an IFrame and refuse to work. This is due to security concerns; for example a parent page could overlay content on top of the IFrame to capture the user's password. While the Northwind authentication scheme is for demonstration only and isn't really secure, it does (realistically) refuse to run in IFrame that hosts your Teams tab.</p> <p>In this exercise you'll add code to move the login page into a separate popup window.</p>"},{"location":"bespoke/B02-after-teams-login/#step-1-add-a-module-with-teams-helper-functions","title":"Step 1: Add a module with Teams helper functions","text":"<p>Create a file called teamsHelpers.js in the client/modules folder, and paste in this code:</p> <pre><code>import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js';\n\nlet teamsInitPromise;\nexport function ensureTeamsSdkInitialized() {\n    if (!teamsInitPromise) {\n        teamsInitPromise = microsoftTeams.app.initialize();\n    }\n    return teamsInitPromise;\n}\n\n// async function returns true if we're running in Teams\nexport async function inTeams() {\n    try {\n        await ensureTeamsSdkInitialized();\n        const context = await microsoftTeams.app.getContext();\n        return (context.app.host.name === microsoftTeams.HostName.teams);\n    }\n    catch (e) {\n        console.log(`${e} from Teams SDK, may be running outside of Teams`);    \n        return false;\n    }\n}\n</code></pre> <p>These functions are used throughout the application to manage the Microsoft Teams JavaScript SDK.</p> <p>Before using the Microsoft Teams JavaScript SDK for the first time on a page, you need to call the <code>microsoftTeams.app.initialize()</code> function. The first function in teamsHelpers.js will ensure that <code>initialize()</code> has been called exactly once on the page.</p> <p>The <code>inTeams()</code> function is used to determine if the application is running in Microsoft Teams or not. You may want to check out the <code>microsoftTeams.Hostname</code> enumeration to see other places where Teams applications will be able to run in the near future!</p>"},{"location":"bespoke/B02-after-teams-login/#step-2-add-a-teams-launcher-page","title":"Step 2: Add a Teams launcher page","text":"<p>When running in Microsoft Teams, we want the login page to run in a popup instead of in the main application window (which is an IFrame). In most web browsers, launching a popup requires the user to take some kind of action such as pushing a button; this rule was introduced after some web sites launched dozens of popups as soon as they opened. The Teams launcher page contains a button the user can push to open the popup.</p> <p>In your working folder, create a new file /client/identity/teamsLoginLauncher.html and paste this markup inside. (Alternately, you can copy the file from the B02-TeamsApp-BespokeAuth/client/identity folder).</p> <pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Northwind Login Page&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"/northwind.css\" /&gt;\n    &lt;link rel=\"icon\" href=\"data:;base64,=\"&gt; &lt;!-- Suppress favicon error --&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n    &lt;h2&gt;Northwind Login (Teams)&lt;/h2&gt;\n    &lt;br /&gt;\n    &lt;div id=\"teamsLoginLauncher\"&gt;\n        &lt;button id=\"teamsLoginLauncherButton\"&gt;Log in&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;div id=\"message\" class=\"errorMessage\"&gt;&lt;/div&gt;\n\n    &lt;script type=\"module\" src=\"/identity/teamsLoginLauncher.js\"&gt;&lt;/script&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>Now create a corresponding JavaScript file, /client/identity/teamsLoginLauncher.js, or copy it from the B02-TeamsApp-BespokeAuth/client/identity folder:</p> <pre><code>import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js';\nimport { ensureTeamsSdkInitialized } from '../modules/teamsHelpers.js';\n\nconst teamsLoginLauncherButton = document.getElementById('teamsLoginLauncherButton');\n\nteamsLoginLauncherButton.addEventListener('click', async ev =&gt; {\n   await ensureTeamsSdkInitialized();\n   await microsoftTeams.authentication.authenticate({\n      url: `${window.location.origin}/identity/login.html?teams=true`,\n      width: 600,\n      height: 535,\n   });\n   window.location.href = document.referrer;\n});\n</code></pre> <p>The import statement loads the Teams JavaScript SDK, which is available for bundled apps as an npm package. In this case we're loading the CDN link (we could have used a <code>&lt;script&gt;</code> tag but we'd have to modify every page in the application). Since the Teams JavaScript SDK is packaged as a script and not a module (it has no <code>export</code>s), we will access the SDK using a global object <code>microsoftTeams</code>.</p> <p>The call to <code>microsoftTeams.authenticatation.authenticate()</code> is what launches the popup winodow.The popup will contain the same login page with minor modifications; these are applied in the next step. If the login is successful, the page will call an SDK function <code>notifySuccess()</code>, which will cause the <code>successCallback</code> to run and send the user to their originally requested page.</p>"},{"location":"bespoke/B02-after-teams-login/#step-3-modify-the-login-page","title":"Step 3: Modify the login page","text":"<p>The only change needed in the login page is to return the logged in user credentials (the employee ID) to the teamsLoginLauncher page you added in the previous step. To do this, add this import statement at the top of /client/identity/login.js:</p> <pre><code>import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js';\n</code></pre> <p>Now in the <code>logInUser()</code> function replace the line of code</p> <pre><code>window.location.href = document.referrer;\n</code></pre> <p>with this:</p> <pre><code>if (window.location.search.indexOf('teams=true') &gt;= 0) {\nawait microsoftTeams.app.initialize();\nmicrosoftTeams.authentication.notifySuccess(employeeId);\n} else {\nwindow.location.href = document.referrer;\n}\n</code></pre> <p>This will check if it's running in Teams (using a query string this time; we may replace that with a call to <code>inTeams()</code> in a future version. Note that this page runs in its own popup so we don't have to worry about calling <code>initialize()</code> more than once, we can just call it directly. If the login is successful and running in Teams, it calls the Teams JavaScript SDK function <code>notifySuccess()</code> to return the employee ID to the launcher page. The finished login.js should look like this:</p> <pre><code>import {\n   validateEmployeeLogin,\n   setLoggedinEmployeeId\n} from './identityClient.js';\nimport 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js';\n\nconst loginPanel = document.getElementById('loginPanel');\nconst usernameInput = document.getElementById('username');\nconst passwordInput = document.getElementById('password');\nconst loginButton = document.getElementById('loginButton');\nconst messageDiv = document.getElementById('message');\nconst hintUL = document.getElementById('hintList');\n\nif (window.location !== window.parent.location) {\n   // The page is in an iframe - refuse service\n   messageDiv.innerText = \"ERROR: You cannot run this app in an IFrame\";\n} else {\n\n   loginPanel.style.display = 'inline';\n   loginButton.addEventListener('click', logInUser);\n   loginPanel.addEventListener('keypress', async function (e) {\n      if (e.key === 'Enter') {\n        await logInUser();\n      }\n   });\n\n   async function logInUser (ev) {\n\n      messageDiv.innerText = \"\";\n      const employeeId = await validateEmployeeLogin(\n         usernameInput.value,\n         passwordInput.value\n      );\n      if (employeeId) {\n         setLoggedinEmployeeId(employeeId);\n         if (window.location.search.indexOf('teams=true') &gt;= 0) {\n            await microsoftTeams.app.initialize();\n            microsoftTeams.authentication.notifySuccess(employeeId);\n         } else {\n            window.location.href = document.referrer;\n         }\n      } else {\n         messageDiv.innerText = \"Error: user not found\";\n      }\n   }\n}\n</code></pre>"},{"location":"bespoke/B02-after-teams-login/#step-4-modify-the-logoff-code","title":"Step 4: Modify the logoff code","text":"<p>The logoff code simply sets the login cookie to 0 and directs the user back to the login page. To accomodate the application running in Microsoft teams, this function needs to check if it's running in Teams and send the user to the teamsLauncher.html page we created in Step 2.</p> <p>Open the /client/identity/identityClient.js file in your code editor and add this line at the top.</p> <pre><code>import { inTeams } from '../modules/teamsHelpers.js';\n</code></pre> <p>Replace the <code>logoff()</code> function with this code to redirect to the launcher when the app is running in Teams.</p> <pre><code>export async function logoff() {\n    setLoggedinEmployeeId(0);\n\n    // Redirect to the login page\n    if (!(await inTeams())) {\n        window.location.href = \"/identity/login.html\";\n    } else {\n        window.location.href = \"/identity/teamsLoginLauncher.html\";\n    }\n}\n</code></pre>"},{"location":"bespoke/B02-after-teams-login/#step-5-hide-the-navigation-within-teams","title":"Step 5: Hide the navigation within Teams","text":"<p>Microsoft Teams already has multiple levels of navigation, including multiple tabs as configured in the previous exercise. So the applications' built-in navigation is redundant in Teams.</p> <p>To hide the built-in navigation in Teams, open the client/components/navigation.js file and add this import statement at the top.</p> <pre><code>import { inTeams } from '../modules/teamsHelpers.js';\n</code></pre> <p>Now modify the <code>connectedCallback()</code> function, which displays the navigation web component, to skip rendering if it's running in Teams. The resulting function should look like this:</p> <pre><code>async connectedCallback() {\n\n    if (!(await inTeams())) {\n        let listItemHtml = \"\";\n        topNavLinks.forEach(link =&gt; {\n            if (window.location.href.indexOf(link.url) &lt; 0) {\n                listItemHtml += '&lt;li&gt;&lt;a href=\"' + link.url + '\"&gt;' + link.text + '&lt;/a&gt;&lt;/li&gt;';\n            } else {\n                return listItemHtml += '&lt;li&gt;&lt;a href=\"' + link.url + '\" class=\"selected\"&gt;' + link.text + '&lt;/a&gt;&lt;/li&gt;';\n            }\n        });\n        this.innerHTML = `\n            &lt;ul class=\"topnav\"&gt;${listItemHtml}&lt;/ul&gt;\n        `;\n    }\n\n}\n</code></pre> <p>About web components</p> <p>Web components are encapsulated custom HTML elements. They're not a Teams thing, nor do they use React or another UI library; they're built right into modern web browsers! You can learn more in this article</p>"},{"location":"bespoke/B02-after-teams-login/#exercise-4-test-your-application-in-microsoft-teams","title":"Exercise 4: Test your application in Microsoft Teams","text":""},{"location":"bespoke/B02-after-teams-login/#step-1-start-the-application","title":"Step 1: Start the application","text":"<p>Now it's time to run your updated application and run it in Microsoft Teams. Start the application with this command:</p> <pre><code>npm start\n</code></pre>"},{"location":"bespoke/B02-after-teams-login/#step-2-upload-the-app-package","title":"Step 2: Upload the app package","text":"<p>In the Teams web or desktop UI, click \"Apps\" in the sidebar 1\ufe0f\u20e3, then \"Manage your apps\" 2\ufe0f\u20e3. At this point you have three choices:</p> <ul> <li>Upload a custom app (upload the app for yourself or a specific team or group chat) - this only appears if you have enabled \"Upload custom apps\" in your setup policy; this was a step in the previous lab</li> <li>Upload an app to your org's app catalog (upload the app for use within your organization) - this only appears if you are a tenant administrator</li> <li>Submit an app to your org (initiate a workflow asking a tenant administrator to install your app) - this appears for everyone</li> </ul> <p>In this case, choose the first option 3\ufe0f\u20e3.</p> <p></p> <p>Navigate to the Northwind.zip file in your manifest directory and upload it. Teams will display the application information; click the \"Add\" button to install it for your personal use.</p> <p></p>"},{"location":"bespoke/B02-after-teams-login/#step-3-run-the-application","title":"Step 3: Run the application","text":"<p>The application should appear without any login prompt. The app's navigation should not be displayed; instead users can navigate to \"My Orders\" or \"Products\" using the tabs in the Teams app.</p> <p></p>      function showCompletionPopup() {         let path = window.location.pathname;         path = path.endsWith('/') ? path.slice(0, -1) : path;         let pathArray = path.split('/');         let leafFolder = pathArray[pathArray.length-1];          let height = window.outerHeight / 1.5;         let width = window.outerWidth / 2;          window.open(`${window.origin}/app-camp/congrats/${leafFolder}`,                     'Congratulations!',                     `width=${width}, height=${height}, left=100, top=100,`);     }"},{"location":"bespoke/B02-after-teams-login/#congratulations","title":"Congratulations!","text":"<p>When you have finished this lab,please click this button to let us know!</p> <p>No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!</p>"},{"location":"bespoke/B02-after-teams-login/#known-issues","title":"Known issues","text":"<p>While it will work on mobile devices, the application is not responsive and will not look good on these devices. This may be addressed in a future version of the lab.</p> <p>For the latest issues, or to file a bug report, see the github issues list for this repository.</p> <p></p>"},{"location":"bespoke/B03-after-teams-sso/","title":"B03 - Enable Azure AD Single Sign-On","text":""},{"location":"bespoke/B03-after-teams-sso/#lab-b03-enable-azure-ad-single-sign-on","title":"Lab B03: Enable Azure AD Single Sign-On","text":"<p>This is parth of Path B, which begins with an application that uses an authorization system other than Azure AD.</p> Are you on the right path? Expand these notes to find out! <p>There are two options for doing the labs:</p> <ul> <li> <p>The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL).</p> </li> <li> <p>the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On.</p> </li> </ul> <p>In this lab you will build the application you created in Lab B01 into a Microsoft Teams application. This application will still use the Northwind authentication, but since the Northwind login page won't work in the Teams tab IFrame, we'll use the Teams JavaScript SDK to show it in a pop-up.</p> <p>Note that as you complete the labs, the original app should still work outside of Teams! This is often a requirement of ISV's who have an app in market and need to serve an existing customer base outside of Teams.</p> <ul> <li>B01-begin-app: Setting up the application </li> <li>B02-after-teams-login: Creating a Teams application</li> <li>B03-after-teams-sso: Adding Azure AD SSO to your app(\ud83d\udccdYou are here)</li> <li>B04-after-apply-styling: Teams styling and themes</li> </ul> <p>In this lab you will learn to:</p> <ul> <li>Register an application with the Microsoft identity platform</li> <li>Configure ans Azure AD app registration to allow Teams to issue tokens on behalf of your application</li> <li>Use the Microsoft Teams JavaScript SDK to request an Azure AD access token</li> <li>How to validate an Azure AD access token in a NodeJS application</li> </ul> Video briefing <p> \"B Path\" Lab Briefing </p> <p>Note</p> <p>This lab uses the account linking strategy explained in this blog article. Please check it out for more details. In addition, the author has created a .NET sample showing this principle, so if you're a .NET developer this can give you a head start!</p>"},{"location":"bespoke/B03-after-teams-sso/#features","title":"Features","text":"<ul> <li>Microsoft Teams personal tab application transparently logs the user in</li> <li>The first time a user accesses the application, it prompts them for their Northwind credentials and writes their Northwind employee ID into the user's profile in Azure AD</li> <li>After that, the application reads the employee ID from Azure AD to decide which orders to show</li> </ul>"},{"location":"bespoke/B03-after-teams-sso/#project-structure","title":"Project structure","text":"Project files before and after this lab (open to display \u25ba) <p>The project structure when you start of this lab and end of this lab is as follows. Use this depiction for comparison.</p> <p>On your left is the contents of folder  <code>B02-after-teams-login</code> and on your right is the contents of folder <code>B03-after-teams-sso</code>. - \ud83c\udd95 New files/folders</p> <ul> <li>\ud83d\udd3aFiles changed  Project Structure Before  Project Structure After <pre>\nB02-after-teams-login\n    \u251c\u2500\u2500 client\n    \u2502   \u251c\u2500\u2500 components\n    \u2502       \u251c\u2500\u2500 navigation.js\n    \u2502   \u2514\u2500\u2500 identity\n    \u2502       \u251c\u2500\u2500 \ud83d\udd3aidentityClient.js\n    \u2502       \u2514\u2500\u2500 login.html\n    \u2502       \u2514\u2500\u2500 \ud83d\udd3alogin.js\n    \u2502       \u2514\u2500\u2500 teamsLoginLauncher.html\n    \u2502       \u2514\u2500\u2500 teamsLoginLauncher.js\n    \u2502       \u2514\u2500\u2500 userPanel.js\n    \u251c\u2500\u2500 modules\n    \u2502   \u2514\u2500\u2500 env.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 teamsHelpers.js\n    \u251c\u2500\u2500 pages\n    \u2502   \u2514\u2500\u2500 categories.html\n    \u2502   \u2514\u2500\u2500 categories.js\n    \u2502   \u2514\u2500\u2500 categoryDetails.html\n    \u2502   \u2514\u2500\u2500 categoryDetails.js\n    \u2502   \u2514\u2500\u2500 myOrders.html\n    \u2502   \u2514\u2500\u2500 orderDetail.html\n    \u2502   \u2514\u2500\u2500 orderDetail.js\n    \u2502   \u2514\u2500\u2500 privacy.html\n    \u2502   \u2514\u2500\u2500 productDetail.html\n    \u2502   \u2514\u2500\u2500 productDetail.js\n    \u2502   \u2514\u2500\u2500 termsofuse.html\n    \u251c\u2500\u2500 index.html\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 northwind.css\n    \u251c\u2500\u2500 manifest\n    \u2502   \u2514\u2500\u2500 \ud83d\udd3amakePackage.js\n    \u2502   \u2514\u2500\u2500 \ud83d\udd3amanifest.template.json\n    \u2502   \u2514\u2500\u2500 northwind32.png\n    \u2502   \u2514\u2500\u2500 northwind192.png\n    \u251c\u2500\u2500 server\n    \u2502   \u2514\u2500\u2500 constants.js\n    \u2502   \u2514\u2500\u2500 \ud83d\udd3aidentityService.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 server.js\n    \u251c\u2500\u2500 \ud83d\udd3a.env_Sample\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 \ud83d\udd3apackage.json\n    \u251c\u2500\u2500 README.md\n</pre> <pre>\nB03-after-teams-sso\n    \u251c\u2500\u2500 client\n    \u2502   \u251c\u2500\u2500 components\n    \u2502       \u251c\u2500\u2500 navigation.js\n    \u2502   \u2514\u2500\u2500 identity\n    \u2502       \u251c\u2500\u2500 \ud83c\udd95aadLogin.html\n    \u2502       \u2514\u2500\u2500 \ud83c\udd95aadLogin.js\n    \u2502       \u251c\u2500\u2500 \ud83d\udd3aidentityClient.js\n    \u2502       \u2514\u2500\u2500 login.html\n    \u2502       \u2514\u2500\u2500 \ud83d\udd3alogin.js\n    \u2502       \u2514\u2500\u2500 teamsLoginLauncher.html\n    \u2502       \u2514\u2500\u2500 teamsLoginLauncher.js\n    \u2502       \u2514\u2500\u2500 userPanel.js\n    \u251c\u2500\u2500 modules\n    \u2502   \u2514\u2500\u2500 env.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 teamsHelpers.js\n    \u251c\u2500\u2500 pages\n    \u2502   \u2514\u2500\u2500 categories.html\n    \u2502   \u2514\u2500\u2500 categories.js\n    \u2502   \u2514\u2500\u2500 categoryDetails.html\n    \u2502   \u2514\u2500\u2500 categoryDetails.js\n    \u2502   \u2514\u2500\u2500 myOrders.html\n    \u2502   \u2514\u2500\u2500 orderDetail.html\n    \u2502   \u2514\u2500\u2500 orderDetail.js\n    \u2502   \u2514\u2500\u2500 privacy.html\n    \u2502   \u2514\u2500\u2500 productDetail.html\n    \u2502   \u2514\u2500\u2500 productDetail.js\n    \u2502   \u2514\u2500\u2500 termsofuse.html\n    \u251c\u2500\u2500 index.html\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 northwind.css\n    \u251c\u2500\u2500 manifest\n    \u2502   \u2514\u2500\u2500 \ud83d\udd3amakePackage.js\n    \u2502   \u2514\u2500\u2500 \ud83d\udd3amanifest.template.json\n    \u2502   \u2514\u2500\u2500 northwind32.png\n    \u2502   \u2514\u2500\u2500 northwind192.png\n    \u251c\u2500\u2500 server\n    \u2502   \u2514\u2500\u2500 constants.js\n    \u2502   \u2514\u2500\u2500 \ud83d\udd3aidentityService.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 server.js\n    \u251c\u2500\u2500 \ud83d\udd3a.env_Sample\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 \ud83d\udd3apackage.json\n    \u251c\u2500\u2500 README.md\n</pre> </li> </ul>"},{"location":"bespoke/B03-after-teams-sso/#exercise-1-register-your-application-with-azure-ad","title":"Exercise 1: Register your application with Azure AD","text":"<p>In order for users to log into your application with Azure AD, you need to register it. In this exercise you will register your application directly in the tenant you created in Lab B02, however we'll set it up so it can be used from other tenants, such as those of customers who purchase your application in the Microsoft Teams store.</p> More information <p> Learn about multi-tenant applications </p>"},{"location":"bespoke/B03-after-teams-sso/#step-1-register-your-application-in-azure-active-directory","title":"Step 1: Register your application in Azure Active Directory","text":"<ul> <li> <p>Navigate to the Microsoft 365 admin center at https://admin.microsoft.com/ and log in as the administrator of your developer tenant.</p> </li> <li> <p>In the left navigation, click \"Show More\" to reveal the full list of admin centers, and then click \"Azure Active Directory\". This will bring you to the Azure AD admin center.</p> </li> </ul> <p></p> <ul> <li>Click \"Azure Active Directory\" again in the left navigation bar.</li> </ul> <p></p> <ul> <li>This will bring you to the overview of your Azure AD tenant. Note that a \"tenant\" is a single instance of Azure Active Directory, with its own users, groups, and app registrations. Verify that you're in the developer tenant you just created, and click \"App Registrations\" in the navigation bar.</li> </ul> <p></p> <ul> <li>You will be shown a list of applications (if any) registered in the tenant. Click \"+ New Registration\" at the top to register a new application.</li> </ul> <p></p> <p>You will be presented with the \"Register an application\" form.</p> <p></p> <ul> <li>Enter a name for your application 1\ufe0f\u20e3.</li> <li>Under \"Supported account types\" select \"Accounts in any organizational directory\" 2\ufe0f\u20e3. This will allow your application to be used in your customer's tenants.</li> <li>Under \"Redirect URI\", select \"Single-page application (SPA)\" 3\ufe0f\u20e3 and enter the ngrok URL you saved earlier 4\ufe0f\u20e3.</li> <li>Click the \"Register\" button 5\ufe0f\u20e3</li> </ul> <p>You will be presented with the application overview. There are two values on this screen you need to copy for use later on; those are the Application (client) ID 1\ufe0f\u20e3 and the Directory (tenant) ID 2\ufe0f\u20e3.</p> <p></p> <p>When you've recorded these values, navigate to \"Certificates &amp; secrets\" 3\ufe0f\u20e3.</p> <p></p> <p>Now you will create a client secret, which is like a password for your application to use when it needs to authenticate with Azure AD.</p> <ul> <li>Click \"+ New client secret\" 1\ufe0f\u20e3</li> <li>Enter a description 2\ufe0f\u20e3 and select an expiration date 3\ufe0f\u20e3 for your secret </li> <li>Click \"Add\" to add your secret. 4\ufe0f\u20e3</li> </ul> <p>The secret will be displayed just this once on the \"Certificates and secrets\" screen. Copy it now and store it in a safe place.</p> <p></p> <p>Managing app secrets is an ongoing responsibility</p> <p>App secrets have a limited lifetime, and if they expire your application may stop working. You can have multiple secrets, so plan to roll them over as you would with a digital certificate.</p> <p>Keep your secrets secret!</p> <p>Give each developer a free developer tenant and register their apps in their tenants so each developer has his or her own app secrets. Limit who has access to app secrets for production. If you're running in Microsoft Azure, a great place to store your secrets is Azure KeyVault. You could deploy an app just like this one and store sensitive application settings in Keyvault. See this article for more information.</p>"},{"location":"bespoke/B03-after-teams-sso/#step-2-grant-your-application-permission-to-call-the-microsoft-graph-api","title":"Step 2: Grant your application permission to call the Microsoft Graph API","text":"<p>The app registration created an identity for your application; now we need to give it permission to call the Microsoft Graph API. The Microsoft Graph is a RESTful API that allows you to access data in Azure AD and Microsoft 365, including Microsoft Teams.</p> <ul> <li>While still in the app registration, navigate to \"API Permissions\" 1\ufe0f\u20e3. Notice that User.Read delegated permission for the Microsoft Graph API has automatically been placed on the list 2\ufe0f\u20e3; this is exactly the permission we need to read the user's profile.</li> </ul> <p></p> <ul> <li>The permission was added automatically, but nobody has consented to it 1\ufe0f\u20e3. To fix this, click the \"Grant admin consent for \" button and then agree to grant the consent 2\ufe0f\u20e3. When this is complete, the message \"Granted for \" should be displayed for each permission. <p></p>"},{"location":"bespoke/B03-after-teams-sso/#step-3-expose-an-api","title":"Step 3: Expose an API","text":"<p>The Northwind Orders app is a full stack application, with code running in the web browser and web server. The browser application accesses data by calling a web API on the server side. To allow this, we need to expose an API in our Azure AD application. This will allow the server to validate Azure AD access tokens from the web browser.</p> <p>Click \"Expose an API\" 1\ufe0f\u20e3 and then \"Add a scope\"2\ufe0f\u20e3. Scopes expose an application's permissions; what you're doing here is adding a permission that your application's browser code can use it when calling the server. </p> <p></p> <p>On the \"Add a scope\" flyout, edit the Application ID URI to include your ngrok URL between the \"api://\" and the client ID. Click the \"Save and continue\" button to proceed.</p> <p></p> <p>Now that you've defined the application URI, the \"Add a scope\" flyout will allow you to set up the new permission scope. Fill in the form as follows: - Scope name: access_as_user - Who can consent: Admins only - Admin consent display name: Access as the logged in user - Admin consent description: Access Northwind services as the logged in user - (skip User consent fields) - Ensure the State is set to \"Enabled\" - Click \"Add scope\"</p> <p></p>"},{"location":"bespoke/B03-after-teams-sso/#step-4-authorize-microsoft-teams-to-log-users-into-your-application","title":"Step 4: Authorize Microsoft Teams to log users into your application","text":"<p>Microsoft Teams provides a Single Sign-On (SSO) capability so users are silently logged into your application using the same credentials they used to log into Microsoft Teams. This requires giving Microsoft Teams permission to issue Azure AD tokens on behalf of your application. In this step, you'll provide that permission.</p> <p>Click \"Expose an API\" 1\ufe0f\u20e3 and then \"+ Add a client application\" 2\ufe0f\u20e3.</p> <p></p> <p>Paste the ID for the Teams mobile or desktop app, <code>1fec8e78-bce4-4aaf-ab1b-5451cc387264</code> into the flyout 1\ufe0f\u20e3 and check the scope you created earlier 2\ufe0f\u20e3 to allow Teams to issue tokens for that scope. Then click \"Add application\" 3\ufe0f\u20e3 to save your work.</p> <p>Repeat the process for the Teams web application, <code>5e3ce6c0-2b1f-4285-8d4b-75ee78787346</code>.</p> <p></p>"},{"location":"bespoke/B03-after-teams-sso/#exercise-2-update-the-teams-application-package","title":"Exercise 2: Update the Teams application package","text":"<p>You've given Microsoft Teams permission to issue an Azure AD access token to your application (single sign-on), but Microsoft Teams doesn't know about that. To provide the information Teams needs, we need to update the Teams Application package.</p>"},{"location":"bespoke/B03-after-teams-sso/#step-1-add-the-azure-ad-information-to-the-env-file","title":"Step 1: Add the Azure AD information to the .env file","text":"<p>Open the .env file in your working directory and add these lines, filling in the information you saved during the app registration:</p> <pre><code>TENANT_ID=00000000-0000-0000-0000-000000000000\nCLIENT_ID=00000000-0000-0000-0000-000000000000\nCLIENT_SECRET=xxxxx\n</code></pre>"},{"location":"bespoke/B03-after-teams-sso/#step-2-add-the-azure-ad-information-to-your-manifest","title":"Step 2: Add the Azure AD information to your manifest","text":"<p>In your working directory, edit the manifest/manifest.template.json file.</p> <p>Update the revision number to a larger version number:</p> <pre><code>  \"version\": \"1.3.0\",\n</code></pre> <p>Add a comma after the validDomains property and then add a new property, <code>webApplicationInfo</code>.</p> <pre><code>  \"webApplicationInfo\": {\n      \"id\": \"&lt;CLIENT_ID&gt;\",\n      \"resource\": \"api://&lt;HOST_NAME&gt;/&lt;CLIENT_ID&gt;\"\n  }\n</code></pre> <p>This provides the Azure AD app registration information to Microsoft Teams for use in the SSO process. The finished manifest.template.json file is here for your reference.</p>"},{"location":"bespoke/B03-after-teams-sso/#step-3-modify-the-packaging-code-to-include-the-client_id","title":"Step 3: Modify the packaging code to include the CLIENT_ID","text":"<p>Open the file manifest/makePackage.js in your code editor. Notice that the code only makes a few of the environment variables available when it creates manifest.json. We just added some references to <code>CLIENT_ID</code>, so we need to handle them in the makePackage.js code.</p> <p>In the <code>if</code> statement where the code checks for the <code>TEAMS_APP_ID</code> and <code>HOST_NAME</code> environment variables, add the <code>CLIENT_ID</code> as well like this:</p> <pre><code>    Object.keys(process.env).forEach((key) =&gt; {\n        if (key.indexOf('TEAMS_APP_ID') === 0 ||\n            key.indexOf('HOST_NAME') === 0 ||\n            key.indexOf('CLIENT_ID') === 0) {\n            data = data.split(`&lt;${key}&gt;`).join(process.env[key]);\n            console.log (`Inserted ${key} value of ${process.env[key]}`);\n        }\n    });\n</code></pre>"},{"location":"bespoke/B03-after-teams-sso/#step-4-rebuild-the-package","title":"Step 4: Rebuild the package","text":"<p>Now you can build a new package at any time with this command:</p> <pre><code>npm run package\n</code></pre> <p>Go ahead and run it, and two files, manifest.json and northwind.zip (the app package) should be updated in your manifest folder.</p>"},{"location":"bespoke/B03-after-teams-sso/#exercise-3-update-the-application-source-code","title":"Exercise 3: Update the application source code","text":""},{"location":"bespoke/B03-after-teams-sso/#step-1-update-your-packagejson-file","title":"Step 1: Update your package.json file","text":"<p>The updated code will use two new npm packages on the server side:</p> <ul> <li>@azure/msal-node: Allows login to Azure AD from your web server; this is needed when calling the Microsoft Graph API to read and write the user's employee ID.</li> <li>azure-ad-jwt: Validates an Azure AD access token sent by the client side code</li> </ul> <p>To accommodate this, open the package.json file in your working directory and update the <code>dependencies</code> property to include these packages like this:</p> <pre><code>  \"dependencies\": {\n    \"@azure/msal-node\": \"^1.5.0\",\n    \"azure-ad-jwt\": \"^1.1.0\",\n    \"cookie-parser\": \"^1.4.6\",\n    \"dotenv\": \"^10.0.0\",\n    \"express\": \"^4.17.1\",\n    \"node-fetch\": \"^3.1.1\",\n    \"request\": \"^2.88.0\"\n  },\n</code></pre> <p>Then, from a command line in your working directory, install the package by typing</p> <pre><code>npm install\n</code></pre>"},{"location":"bespoke/B03-after-teams-sso/#step-2-add-an-identity-mapping-screen","title":"Step 2: Add an identity mapping screen","text":"<p>When a user logs into the app for the first time, we will log them into both Azure AD and the Northwind login scheme and save their Northwind employee ID in the Azure AD user profile. This is just one of many approaches; an application could save the Azure AD user ID and another system's user ID in a database, or it could save the Azure AD user ID in the user's profile within the other authentication. Any way you do it, the idea is to create a linkage between each Azure AD user and their user profile in the other identity service.</p> <p>In this step, you'll add a new web page to handle this identity mapping. If the application reads the Azure AD user's employee ID and it's blank, the user will be redirected here.</p> <p>In your working folder, create a file /client/identity/aadLogin.html and paste in this markup:</p> <pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Northwind Login Page&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"/northwind.css\" /&gt;\n    &lt;link rel=\"icon\" href=\"data:;base64,=\"&gt; &lt;!-- Suppress favicon error --&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n    &lt;div id=\"teamsLoginLauncher\" style=\"display:none\"&gt;\n        &lt;h2&gt;Northwind Login (AAD Mapping)&lt;/h2&gt;\n        &lt;br /&gt;\n        &lt;p&gt;Please log in using your Northwind employee login it to link your Microsoft Teams login.&lt;/p&gt;\n        &lt;button id=\"teamsLoginLauncherButton\"&gt;Log in&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;div id=\"message\" class=\"errorMessage\"&gt;&lt;/div&gt;\n\n    &lt;script type=\"module\" src=\"/identity/aadLogin.js\"&gt;&lt;/script&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>Now create another file, /client/identity/aadLogin.js and insert this code:</p> <pre><code>import 'https://res.cdn.office.net/teams-js/2.0.0/js/MicrosoftTeams.min.js';\nimport { ensureTeamsSdkInitialized } from '../modules/teamsHelpers.js';\nimport { setLoggedinEmployeeId } from './identityClient.js';\n\n(async () =&gt; {\n\n    const teamsLoginLauncher = document.getElementById('teamsLoginLauncher');\n    const teamsLoginLauncherButton = document.getElementById('teamsLoginLauncherButton');\n\n    await ensureTeamsSdkInitialized();\n    const authToken = await microsoftTeams.authentication.getAuthToken();\n\n    const response = await fetch(`/api/validateAadLogin`, {\n        \"method\": \"post\",\n        \"headers\": {\n            \"content-type\": \"application/json\",\n            \"authorization\": `Bearer ${authToken}`\n        },\n        \"body\": JSON.stringify({\n            \"employeeId\": 0\n        }),\n        \"cache\": \"no-cache\"\n    });\n    if (response.ok) {\n        const data = await response.json();\n        if (data.employeeId) {\n            // If here, AAD user was mapped to a Northwind employee ID\n            setLoggedinEmployeeId(data.employeeId);\n            window.location.href = document.referrer;\n        }\n    } else if (response.status === 404) {\n\n        // If here, AAD user logged in but there was no mapping to an employee ID.\n        // Get one now using the bespoke authentication\n        teamsLoginLauncherButton.addEventListener('click', async ev =&gt; {\n\n            // First, launch the original login page to get the user credentials\n            const northwindCredentials = await\n                microsoftTeams.authentication.authenticate({\n                    url: `${window.location.origin}/identity/login.html?teams=true`,\n                    width: 600,\n                    height: 535\n                });\n\n            // Now call the server with BOTH the Azure AD and original credentials\n            // Server is responsible for linking them in its database for next time\n            const response = await fetch(`/api/validateAadLogin`, {\n                \"method\": \"post\",\n                \"headers\": {\n                    \"content-type\": \"application/json\",\n                    \"authorization\": `Bearer ${authToken}`\n                },\n                \"body\": JSON.stringify({\n                    \"username\": northwindCredentials.username,\n                    \"password\": northwindCredentials.password\n                }),\n                \"cache\": \"no-cache\"\n            });\n\n            // Now log the user in with the bespoke system\n            setLoggedinEmployeeId(northwindCredentials.employeeId);\n            window.location.href = document.referrer;\n        });\n\n        teamsLoginLauncher.style.display = \"inline\";\n\n    } else {\n\n        console.log(`Error ${response.status} on /api/validateAadLogin: ${response.statusText}`);\n\n    }\n\n})();\n</code></pre> <p>This code uses the Teams JavaScript SDK to obtain an Azure AD token using <code>microsoftTeams.authentication.getAuthToken()</code>, and then it calls the server side at /api/validateAadLogin using this token. The server will read the user's employeeId and return it. If the employee ID is not found, the server returns an HTTP 404 error and the code prompts the user to log in via the Northwind login page. When the user logs in, the code passes his or her credentials back to /api/validateAadLogin, which looks up the employeeId and writes it to the user's profile.</p>"},{"location":"bespoke/B03-after-teams-sso/#step-3-return-the-username-and-password-from-the-login-page","title":"Step 3: Return the username and password from the login page","text":"<p>Open the file /client/identity/login.js in your code editor, and find the call to <code>notifySuccess()</code>. Modify it to return the username and password so the aadLogin.html page can provide it to the server.</p> <pre><code>    microsoftTeams.authentication.notifySuccess({\n        username: usernameInput.value,\n        password: passwordInput.value,\n        employeeId: employeeId\n    });\n</code></pre> <p>The completed login script is here at B03-after-teams-sso/client/identity/login.js</p>"},{"location":"bespoke/B03-after-teams-sso/#step-4-modify-the-logoff-code","title":"Step 4: Modify the logoff code","text":"<p>Logging off in this new version of the Teams app will be a very transitory thing, because the user will immediately be logged back on again! However we'll leave it in place for testing purposes.</p> <p>Open the file client/identity/identityClient.js in your code editor and change the line:</p> <pre><code>    window.location.href = \"/identity/teamsLoginLauncher.html\";\n</code></pre> <p>to: </p> <pre><code>    window.location.href = \"/identity/aadLogin.html\";\n</code></pre>"},{"location":"bespoke/B03-after-teams-sso/#step-5-nodify-the-identity-server-code","title":"Step 5: Nodify the identity server code","text":"<p>Now that the client code has been updated, it's time to modify the server code to handle the /api/validateAadLogin call from the client. To do that, open the file /server/identityService.js in your code editor and add these lines at the top:</p> <pre><code>import aad from 'azure-ad-jwt';\nimport { dbService } from '../northwindDB/dbService.js';\nconst db = new dbService();\n</code></pre> <p>This will import two node packages:</p> <ul> <li>azure-ad-jwt - this package validates an Azure AD access token</li> <li>dbService - this is the module that handles the JSON database, so we can write the mapping between Azure AD user ID's and Northwind Employee ID's there.</li> </ul> <p>Then locate the function <code>initializeIdentityService()</code> and add these lines near the bottom of the function, just above the <code>app.use('/api/', validateApiRequest);</code> statement.</p> <pre><code>    // Web service validates an Azure AD login\n    app.post('/api/validateAadLogin', async (req, res) =&gt; {\n\n        try {\n            const employeeId = await validateAndMapAadLogin(req, res);\n            if (employeeId) {\n                res.send(JSON.stringify({ \"employeeId\": employeeId }));\n            } else {\n                res.status(401).send('Unknown authentication failure');\n            }\n        }\n        catch (error) {\n            console.log(`Error in /api/validateAadLogin handling: ${error.statusMessage}`);\n            res.status(error.status).json({ status: error.status, statusText: error.statusMessage });\n        }\n\n    });\n</code></pre> <p>This code will handle the call to /api/validateAadLogin but the real work is done in another function, <code>validateAndMapAadLogin()</code>. Next, add this code at the bottom of identityService.js.</p> <pre><code>// validateAndMapAadLogin() - Returns an employee ID of the logged in user based\n// on an existing mapping OR the username/password passed from a client login.\n// If there is no existing mapping and no username/password is specified, it will throw\n// an exception.\nasync function validateAndMapAadLogin(req, res) {\n\n    const audience = `api://${process.env.HOST_NAME}/${process.env.CLIENT_ID}`;\n    const token = req.headers['authorization'].split(' ')[1];\n\n    const aadUserId = await new Promise((resolve, reject) =&gt; {\n        aad.verify(token, { audience: audience }, async (err, result) =&gt; {\n            if (result) {\n                resolve(result.oid);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    if (aadUserId) {\n        // If here, user is logged into Azure AD\n        let employeeId = await getEmployeeIdForUser(aadUserId);\n        if (employeeId) {\n            // We found the employee ID for the AAD user\n            return employeeId;\n        } else if (req.body.username) {\n            // We did not find an employee ID for this user, try to \n            // get one using the legacy authentication\n            const username = req.body.username;\n            const password = req.body.password;\n            const employeeId = await validateEmployeeLogin(username, password);\n            if (employeeId) {\n                // If here, user is logged into both Azure AD and the legacy\n                // authentication. Save the employee ID in the user's AAD\n                // profile for future use.\n                await setEmployeeIdForUser(aadUserId, employeeId);\n                return employeeId;\n            } else {\n                // If here, the employee login failed; throw an exception\n                throw ({ status: 401, statusMessage: \"Employee login failed\" });\n            }\n        } else {\n            // If here we don't have an employee ID and employee credentials were\n            // not provided.\n            throw ({ status: 404, statusMessage: \"Employee ID not found for this user\" });\n        }\n    } else {\n        res.status(401).send('Invalid AAD token');\n    }\n}\n\nasync function getEmployeeIdForUser(aadUserId) {\n\n    const idMapDB = await db.getTable(\"IdentityMap\", \"aadUserId\");\n    const identity = idMapDB.item(aadUserId);\n    return identity.employeeId;\n}\n\nasync function setEmployeeIdForUser(aadUserId, employeeId) {\n    try {\n\n        const identityMap = await db.getTable(\"IdentityMap\", \"aadUserId\");\n        if (identityMap.item(aadUserId)) {\n            // User already mapped (shouldn't happen but handle it anyway)\n            const item = identityMap.item(aadUserId);\n            item.employeeId = employeeId;\n        } else {\n            identityMap.addItem({\n                \"aadUserId\": aadUserId,\n                \"employeeId\": employeeId\n            });\n        }\n        await identityMap.save();\n\n    }\n    catch (error) {\n        console.log(`Error updating user mapping ${error}`);\n    }\n}\n</code></pre> <p><code>validateAndMapAadLogin()</code> validates the Azure AD access token sent by the client and obtains the Azure AD user ID. It then calls <code>getEmployeeIdForUser()</code> to get the employee ID for that user. <code>getEmployeeIdForUser()</code> uses MSAL to obtain an Azure AD access token for the application and then it calls the Microsoft Graph with that token.</p> <p>If <code>validateAndMapAadLogin()</code> fails to get an employee ID, and a username and password were provided, it looks up the employee ID and uses <code>setEmployeeIdForUser()</code> to write it to the JSON database.</p> <p>The finished server/identityService.js file is here.</p>"},{"location":"bespoke/B03-after-teams-sso/#exercise-4-test-your-application-in-microsoft-teams","title":"Exercise 4: Test your application in Microsoft Teams","text":"<p>!!! danger While Azure AD is secure, the original login scheme in this sample is not!     The sample application uses a browser session cookie to establish who is logged in. It is not secure and would be easy to fake - do not use this in a real application! Also be aware during testing that your login will persist until you close all instances of your web browser. For example if you leave your browser logged in after this lab and then run Microsoft Teams in another instance of the same browser, your user will already be logged in when you get to the next lab.E</p>"},{"location":"bespoke/B03-after-teams-sso/#step-1-start-the-application","title":"Step 1: Start the application","text":"<p>Now it's time to run your updated application and run it in Microsoft Teams. Start the application with this command:</p> <pre><code>npm start\n</code></pre>"},{"location":"bespoke/B03-after-teams-sso/#step-2-upload-the-app-package","title":"Step 2: Upload the app package","text":"<p>In the Teams web or desktop UI, click \"Apps\" in the sidebar 1\ufe0f\u20e3, then \"Manage your apps\" 2\ufe0f\u20e3. At this point you have three choices:</p> <ul> <li>Upload a custom app (upload the app for yourself or a specific team or group chat) - this only appears if you have enabled \"Upload custom apps\" in your setup policy; this was a step in the previous lab</li> <li>Upload an app to your org's app catalog (upload the app for use within your organization) - this only appears if you are a tenant administrator</li> <li>Submit an app to your org (initiate a workflow asking a tenant administrator to install your app) - this appears for everyone</li> </ul> <p>In this case, choose the first option 3\ufe0f\u20e3.</p> <p></p> <p>Navigate to the Northwind.zip file in your manifest directory and upload it. Although the application is already installed, you are providing a newer version so it will update the application. Click the \"Add\" button to install it for your personal use.</p> <p></p>"},{"location":"bespoke/B03-after-teams-sso/#step-3-run-the-application","title":"Step 3: Run the application","text":"<p>The application should appear without any login prompt. The app's navigation should not be displayed; instead users can navigate to \"My Orders\" or \"Products\" using the tabs in the Teams app.</p> <p></p>      function showCompletionPopup() {         let path = window.location.pathname;         path = path.endsWith('/') ? path.slice(0, -1) : path;         let pathArray = path.split('/');         let leafFolder = pathArray[pathArray.length-1];          let height = window.outerHeight / 1.5;         let width = window.outerWidth / 2;          window.open(`${window.origin}/app-camp/congrats/${leafFolder}`,                     'Congratulations!',                     `width=${width}, height=${height}, left=100, top=100,`);     }"},{"location":"bespoke/B03-after-teams-sso/#congratulations","title":"Congratulations!","text":"<p>When you have finished this lab,please click this button to let us know!</p> <p>No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!</p> <p>Challenge</p> <p>You might have noticed the logout button doesn't do anything in Teams! If you wish, hide the logout button just as you hid the navigation bar. The code is in client/identity/userPanel.js.</p>"},{"location":"bespoke/B03-after-teams-sso/#known-issues","title":"Known issues","text":"<p>For the latest issues, or to file a bug report, see the github issues list for this repository.</p>"},{"location":"bespoke/B03-after-teams-sso/#references","title":"References","text":"<p>Single sign-on (SSO) support for Tabs</p> <p></p>"},{"location":"bespoke/B04-after-apply-styling/","title":"B04 - Teams styling and themes","text":""},{"location":"bespoke/B04-after-apply-styling/#lab-b04-teams-styling-and-themes","title":"Lab B04: Teams styling and themes","text":"<p>This is parth of Path B, which begins with an application that uses an authorization system other than Azure AD.</p> Are you on the right path? Expand these notes to find out! <p>There are two options for doing the labs:</p> <ul> <li> <p>The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL).</p> </li> <li> <p>the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On.</p> </li> </ul> <p>In this lab you will begin with the application in folder <code>B03-TeamsSSO</code>, make changes as per the steps below to achieve what is in the folder <code>B04-StyleAndThemes</code>. See project structures comparison in Exercise 1.</p> <ul> <li>B01-begin-app: Setting up the application </li> <li>B02-after-teams-login: Creating a Teams application</li> <li>B03-after-teams-sso: Adding Azure AD SSO to your app</li> <li>B04-after-apply-styling: Teams styling and themes(\ud83d\udccdYou are here)</li> </ul> <p>In this lab you will learn to:</p> <ul> <li>Apply styles based on the Microsoft Teams figma to make your application look like it belongs in Microsoft Teams</li> <li>Display your application with the same color theme the user has selected in Microsoft Teams</li> <li>Switch your application's theme when the user changes the Microsoft Teams theme setting</li> </ul> Video briefing <p> \"B Path\" Lab Briefing </p>"},{"location":"bespoke/B04-after-apply-styling/#features","title":"Features","text":"<ul> <li>Apply teams styling and themes to your existing application.</li> <li>Display and update themes along with the Microsoft Teams client</li> </ul>"},{"location":"bespoke/B04-after-apply-styling/#project-structure","title":"Project structure","text":"Project files before and after this lab (open to display \u25ba) <p>The project structure when you start of this lab and end of this lab is as follows. Use this depiction for comparison.</p> <p>On your left is the contents of folder  <code>B03-after-teams-sso</code> and on your right is the contents of folder <code>B04-after-apply-styling</code>. - \ud83c\udd95 New files/folders</p> <ul> <li>\ud83d\udd3aFiles changed  Project Structure Before  Project Structure After <pre>\nB03-after-teams-sso\n    \u251c\u2500\u2500 client\n    \u2502   \u251c\u2500\u2500 components\n    \u2502       \u251c\u2500\u2500 navigation.js\n    \u2502   \u2514\u2500\u2500 identity\n    \u2502       \u251c\u2500\u2500 aadLogin.html\n    \u2502       \u2514\u2500\u2500 aadLogin.js\n    \u2502       \u251c\u2500\u2500 identityClient.js\n    \u2502       \u2514\u2500\u2500 login.html\n    \u2502       \u2514\u2500\u2500 login.js\n    \u2502       \u2514\u2500\u2500 teamsLoginLauncher.html\n    \u2502       \u2514\u2500\u2500 teamsLoginLauncher.js\n    \u2502       \u2514\u2500\u2500 userPanel.js\n    \u251c\u2500\u2500 modules\n    \u2502   \u2514\u2500\u2500 env.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 \ud83d\udd3ateamsHelpers.js\n    \u251c\u2500\u2500 pages\n    \u2502   \u2514\u2500\u2500 categories.html\n    \u2502   \u2514\u2500\u2500 categories.js\n    \u2502   \u2514\u2500\u2500 categoryDetails.html\n    \u2502   \u2514\u2500\u2500 categoryDetails.js\n    \u2502   \u2514\u2500\u2500 myOrders.html\n    \u2502   \u2514\u2500\u2500 orderDetail.html\n    \u2502   \u2514\u2500\u2500 orderDetail.js\n    \u2502   \u2514\u2500\u2500 privacy.html\n    \u2502   \u2514\u2500\u2500 productDetail.html\n    \u2502   \u2514\u2500\u2500 productDetail.js\n    \u2502   \u2514\u2500\u2500 termsofuse.html\n    \u251c\u2500\u2500 index.html\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 \ud83d\udd3anorthwind.css\n    \u251c\u2500\u2500 manifest\n    \u2502   \u2514\u2500\u2500 makePackage.js\n    \u2502   \u2514\u2500\u2500 \ud83d\udd3amanifest.template.json\n    \u2502   \u2514\u2500\u2500 northwind32.png\n    \u2502   \u2514\u2500\u2500 northwind192.png\n    \u2502   \u2514\u2500\u2500 constants.js\n    \u2502   \u2514\u2500\u2500 identityService.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 server.js\n    \u251c\u2500\u2500 .env_Sample\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 package.json\n    \u251c\u2500\u2500 README.md\n</pre> <pre>\nB04-after-apply-styling\n    \u251c\u2500\u2500 client\n    \u2502   \u251c\u2500\u2500 components\n    \u2502       \u251c\u2500\u2500 navigation.js\n    \u2502   \u2514\u2500\u2500 identity\n    \u2502       \u251c\u2500\u2500 aadLogin.html\n    \u2502       \u2514\u2500\u2500 aadLogin.js\n    \u2502       \u251c\u2500\u2500 identityClient.js\n    \u2502       \u2514\u2500\u2500 login.html\n    \u2502       \u2514\u2500\u2500 login.js\n    \u2502       \u2514\u2500\u2500 teamsLoginLauncher.html\n    \u2502       \u2514\u2500\u2500 teamsLoginLauncher.js\n    \u2502       \u2514\u2500\u2500 userPanel.js\n    \u251c\u2500\u2500 modules\n    \u2502   \u2514\u2500\u2500 env.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 \ud83d\udd3ateamsHelpers.js\n    \u251c\u2500\u2500 pages\n    \u2502   \u2514\u2500\u2500 categories.html\n    \u2502   \u2514\u2500\u2500 categories.js\n    \u2502   \u2514\u2500\u2500 categoryDetails.html\n    \u2502   \u2514\u2500\u2500 categoryDetails.js\n    \u2502   \u2514\u2500\u2500 myOrders.html\n    \u2502   \u2514\u2500\u2500 orderDetail.html\n    \u2502   \u2514\u2500\u2500 orderDetail.js\n    \u2502   \u2514\u2500\u2500 privacy.html\n    \u2502   \u2514\u2500\u2500 productDetail.html\n    \u2502   \u2514\u2500\u2500 productDetail.js\n    \u2502   \u2514\u2500\u2500 termsofuse.html\n    \u251c\u2500\u2500 index.html\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 \ud83d\udd3anorthwind.css\n    \u251c\u2500\u2500 \ud83c\udd95teamstyle.css\n    \u251c\u2500\u2500 manifest\n    \u2502   \u2514\u2500\u2500 makePackage.js\n    \u2502   \u2514\u2500\u2500 \ud83d\udd3amanifest.template.json\n    \u2502   \u2514\u2500\u2500 northwind32.png\n    \u2502   \u2514\u2500\u2500 northwind192.png\n    \u2502   \u2514\u2500\u2500 constants.js\n    \u2502   \u2514\u2500\u2500 identityService.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 server.js\n    \u251c\u2500\u2500 .env_Sample\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 package.json\n    \u251c\u2500\u2500 README.md\n</pre> </li> </ul>"},{"location":"bespoke/B04-after-apply-styling/#exercise-1-add-css","title":"Exercise 1: Add CSS","text":""},{"location":"bespoke/B04-after-apply-styling/#step-1-create-a-css-file-for-teams-theme-styles","title":"Step 1: Create a CSS file for Teams theme styles","text":"<p>Create a file <code>teamstyle.css</code> in the <code>client</code> folder and copy below code block into it. These styles are based on the Teams UI Toolkit Figma. If you're working in React, you may want to use the Teams UI Toolkit React Components.</p> <pre><code>:root {\n  /* common */\n  --brand-color: #6264A7;\n  --button-color: #6264A7;\n  --button-text-color: #fff;\n  --button-hover-color: rgb(88, 90, 150);\n  --button-hover-text-color: #fff;\n  --button-active-color: rgb(70, 71, 117);\n  --button-active-text-color: #fff;\n  --button-border: 1px solid hsla(0,0%,100%,.04);\n  --button-shadow: rgb(0 0 0 / 25%) 0px 0.2rem 0.4rem -0.075rem;\n  --button2-color: #fff;\n  --button2-text-color: rgb(37, 36, 35);\n  --button2-hover-color: rgb(237, 235, 233);\n  --button2-active-color: rgb(225, 223, 221);\n  --button2-border: 1px solid rgb(225, 223, 221);\n  --button2-shadow: rgb(0 0 0 / 10%) 0px 0.2rem 0.4rem -0.075rem;\n  --button-disabled-color: rgb(237, 235, 233);\n  --button-disabled-text-color: rgb(200, 198, 196);\n  --input-background-color: rgb(243, 242, 241);\n  --input-border-color: transparent;\n  --input-border-width: 0 0 0.1429rem 0;\n  --input-focus-border-color: transparent;\n  --input-focus-border-bottom-color: #6264A7;\n  --table-color: transparent;\n  --table-border: 1px solid rgb(237, 235, 233);\n  --border-color: rgb(237, 235, 233);\n\n  /* light theme */\n  --font-color: rgb(37, 36, 35);\n  --background-color: #fff;\n  --link-color: #6264A7;\n  --border-color: #E1DFDD;\n  --warning-color: #C4314B;\n}\n\n[data-theme=\"dark\"] {\n  --font-color: #fff;\n  --background-color: transparent;\n  --link-color: #A6A7DC;\n  --border-color: #605E5C;\n  --warning-color: #F9526B;\n}\n\n[data-theme=\"contrast\"] {\n  --brand-color: #ffff01;\n  --font-color: #fff;\n  --link-color: #ffff01;\n  --background-color: transparent;\n  --border-color: #fff;\n  --button-color: transparent;\n  --button-text-color: #fff;\n  --button-hover-color: #ffff01;\n  --button-hover-text-color: #000;\n  --button-active-color: #1aebff;\n  --button-active-text-color: #000;\n  --button-border: .2rem solid #fff;\n  --input-background-color: transparent;\n  --input-border-color: #fff;\n  --input-border-width: 1px;\n  --input-focus-border-color: #1aebff;\n  --input-focus-border-bottom-color: #1aebff;\n  --warning-color: #ffff01;\n}\n\nbody {\n  background-color: var(--background-color);\n  color: var(--font-color);\n  box-sizing: border-box;\n  font-size: 14px;\n}\n\na, a:visited {\n  color: var(--link-color);\n  text-decoration: none;\n}\n\na:hover, a:active {\n  text-decoration: underline;\n}\n\ntable, caption, tbody, tfoot, thead, tr, th, td { /*reset */\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: middle;\n  border-collapse: collapse;\n}\ntable {\n  display: table;\n  background-color: var(--table-color);\n  border-spacing: 0;\n}\ntr {\n  display: table-row;\n  border-bottom: var(--table-border);\n}\nth, td {\n  display: table-cell;\n  height: 3.4286rem;\n  padding: 0 0.5714rem;\n}\n\nth{\n  font-weight: 600;\n}\n\nbutton, input, optgroup, select, textarea {\n  font-family: inherit;\n  font-size: 100%;\n  line-height: 1.15;\n  margin: 0;\n}\n\nbutton {\n  min-width: 6rem;\n  font-weight: 600;\n  height: 2rem;\n  padding: 0 1.25rem;\n  vertical-align: middle;\n  border-radius: 2px;\n  background-color: var(--button-color);\n  color: var(--button-text-color);\n  border: var(--button-border);\n  box-shadow: var(--button-shadow);\n  overflow: visible;\n}\nbutton:hover {\n  background-color: var(--button-hover-color);\n  color: var(--button-active-text-color);\n}\nbutton:active {\n  background-color: var(--button-active-color);\n  color: var(--button-active-text-color);\n  box-shadow: none;\n}\nbutton[disabled] {\n  background-color: var(--button-disabled-color);\n  color: var(--button-disabled-text-color);\n  box-shadow: none;\n}\nbutton:not(:last-child) {\n    margin-right: 0.5rem;\n}\n\nbutton.secondary {\n  background: var(--button2-color);\n  border: var(--button2-border);\n  color: var(--button2-text-color);\n  box-shadow: var(--button2-shadow);\n}\nbutton.secondary:hover {\n  background-color: var(--button2-hover-color);\n}\nbutton.secondary:active {\n  background-color: var(--button2-active-color);\n}\n\nlabel {\n  margin: 0 0.7143rem 0.2857rem 0;\n}\n\ninput {\n  background-color: var(--input-background-color);\n  padding: 0.3571rem 0.8571rem;\n  line-height: unset;\n  border-width: var(--input-border-width);\n  border-radius: 0.2143rem 0.2143rem 0.1429rem 0.1429rem;\n  border-color: var(--input-border-color);\n  outline-style: none;\n  overflow: visible;\n  margin-bottom: 1.4286rem;\n}\ninput:focus {\n  border-color: var(--input-focus-border-color);\n  border-bottom-color: var(--input-focus-border-bottom-color);\n}\n\n[type=checkbox], [type=radio] {\n  padding: 0;\n  margin-right: 0.5rem;\n}\n\nhr {\n  border: 0;\n  height: 1px;\n  background: var(--border-color);\n}\n\n/* Text styling classes */\n\n.medium {\n  font-size: 1rem;\n}\n.small {\n  font-size: 0.8571rem;\n}\n.smaller {\n  font-size: 0.7143rem;\n}\n.large {\n  font-size: 1.2857rem;\n}\n.larger {\n  font-size: 1.7143rem;\n}\n.danger, .warning, .alert, .error {\n  color: var(--warning-color);\n}\n\n\n/* Font */\n\n@font-face {\n  font-family: 'Segoe UI Web';\n  src: url('https://static2.sharepointonline.com/files/fabric/assets/fonts/segoeui-westeuropean/segoeui-regular.woff2') format('woff2'), url('https://static2.sharepointonline.com/files/fabric/assets/fonts/segoeui-westeuropean/segoeui-regular.woff') format('woff');\n  font-weight: 400;\n  font-style: normal;\n}\n\nbody {\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  font-family: 'Segoe UI', 'Segoe UI Web', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif;\n}\n</code></pre> <p>This CSS contains basic stylings for Teams UI. After applying the styles, the existing web app gets more consistent look-and-feel to Teams client.</p> <p>The CSS also includes dark and high-contrast mode. The color switch is done with CSS variables. In the next step, you will enable the theme switching functionality in JavaScript.</p>"},{"location":"bespoke/B04-after-apply-styling/#step-2-import-the-new-css","title":"Step 2: Import the new CSS","text":"<p>To import the <code>teamstyle.css</code> so it is loaded in all pages, add this statement at the top of your northwind.css file.</p> <pre><code>@import \"teamstyle.css\";\n</code></pre>"},{"location":"bespoke/B04-after-apply-styling/#exercise-2-update-and-run-the-project","title":"Exercise 2: Update and run the project","text":""},{"location":"bespoke/B04-after-apply-styling/#step-1-modify-modulesteamshelpersjs","title":"Step 1: Modify modules\\teamsHelpers.js","text":"<p>The Teams client supports three themes: light mode, dark mode, and high contrast mode, which is an acceissibility feature for users with low visual acuity. As the users switch the themes, your application should also switch its theme so as to blend in. To detect theme switching in Teams client we'll have to use the global <code>microsoftTeams</code>'s context.</p> <p>We 'll add a function <code>setTheme()</code> to switch the css between the application's native style and the team's themes. Add this code to teamsHelpers.js:</p> <pre><code>// Set the CSS to reflect the desired theme\nfunction setTheme(theme) {\n    const el = document.documentElement;\n    el.setAttribute('data-theme', theme);\n};\n</code></pre> <p>In order to display the application in a particular theme, <code>setTheme()</code> applies a data-theme value in the root of the content, like, <code>&lt;html data-theme='dark'&gt;</code>, so the <code>teamstyle.css</code> will use a correct set of colors &amp; styles for each theme. The color change is done with the CSS variables.</p> <p>Now add in-line code into teamsHelpers.js to detect current context with <code>getContext()</code> and set the theme to match the current theme in Microsoft Teams. The code also registers an event handler that updates the application's theme when a user changes the theme in Microsoft Teams. Note that some browsers and the Teams desktop client will not honor the <code>await</code> keyword for inline code; therefore this code has been wrapped in an immediately-invoked function expression.</p> <p>Copy and paste below code block for this purpose:</p> <pre><code>// Inline code to set theme on any page using teamsHelpers\n(async () =&gt; {\n    await ensureTeamsSdkInitialized();\n    const context = await microsoftTeams.app.getContext();\n    setTheme(context.app.theme);\n\n    // When the theme changes, update the CSS again\n    microsoftTeams.registerOnThemeChangeHandler((theme) =&gt; {\n        setTheme(theme);\n    });    \n})();\n</code></pre>"},{"location":"bespoke/B04-after-apply-styling/#step-2-start-your-local-project","title":"Step 2: Start your local project","text":"<p>Now it's time to run your updated application and run it in Microsoft Teams. Start the application by running below command: </p> <pre><code>npm start\n</code></pre>"},{"location":"bespoke/B04-after-apply-styling/#step-3-run-the-application-in-teams-client","title":"Step 3: Run the application in Teams client","text":"<p>Once the teams tab app is added, the personal tab will open <code>My Orders</code> tab. The application will now have the team's native look and feel.</p> <p></p> <p>Here's how to change themes in teams client. Notice how the teams tab app also detects and changes its theme.</p> <p></p>      function showCompletionPopup() {         let path = window.location.pathname;         path = path.endsWith('/') ? path.slice(0, -1) : path;         let pathArray = path.split('/');         let leafFolder = pathArray[pathArray.length-1];          let height = window.outerHeight / 1.5;         let width = window.outerWidth / 2;          window.open(`${window.origin}/app-camp/congrats/${leafFolder}`,                     'Congratulations!',                     `width=${width}, height=${height}, left=100, top=100,`);     }"},{"location":"bespoke/B04-after-apply-styling/#congratulations","title":"Congratulations!","text":"<p>When you have finished this lab,please click this button to let us know!</p> <p>No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!</p>"},{"location":"bespoke/B04-after-apply-styling/#next-steps","title":"Next steps","text":"<p>Congratulations! You have completed all core application development labs in path B. </p> <p>It's time to choose your own adventure by doing some or all of the extended labs! Note that the extended lab files are based on the \"A\" path; specifically they are based on the lab A03 solution files. So you have two choices:</p> <ol> <li> <p>Switch to Path A now by doing the labs or make a copy of the A03 solution files and apply your .env file settings there. The rest of the setup should be the same.</p> </li> <li> <p>Live dangerously and try following the labs building on the solution to lab B04 that you just completed. It has been said to work but isn't as thoroughly tested, so it's up to you if you're willing to debug the code.</p> </li> </ol> <p>Here are the extended labs:</p> <ul> <li>Add a Configurable Tab</li> <li>Add a Deep link to a personal Tab</li> <li>Add a Dialog </li> <li>Add a Meeting app</li> <li>Add a Message Extension</li> <li>Selling Your SaaS-based Teams Extension</li> </ul> <p></p>"},{"location":"congrats/A01-begin-app/","title":"A01 begin app","text":""},{"location":"congrats/A01-begin-app/#congratulations","title":"Congratulations!","text":"<p>You have completed App Camp lab A-01! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!)</p> <p>Close</p> <p></p>"},{"location":"congrats/A02-after-teams-sso/","title":"A02 after teams sso","text":""},{"location":"congrats/A02-after-teams-sso/#congratulations","title":"Congratulations!","text":"<p>You have completed App Camp lab A-02! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!)</p> <p>Close</p> <p></p>"},{"location":"congrats/A03-after-apply-styling/","title":"A03 after apply styling","text":""},{"location":"congrats/A03-after-apply-styling/#congratulations","title":"Congratulations!","text":"<p>You have completed App Camp lab A-03! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!)</p> <p>Close</p> <p></p>"},{"location":"congrats/B01-begin-app/","title":"B01 begin app","text":""},{"location":"congrats/B01-begin-app/#congratulations","title":"Congratulations!","text":"<p>You have completed App Camp lab B-01! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!)</p> <p>Close</p> <p></p>"},{"location":"congrats/B02-after-teams-login/","title":"B02 after teams login","text":""},{"location":"congrats/B02-after-teams-login/#congratulations","title":"Congratulations!","text":"<p>You have completed App Camp lab B-02! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!)</p> <p>Close</p> <p></p>"},{"location":"congrats/B03-after-teams-sso/","title":"B03 after teams sso","text":""},{"location":"congrats/B03-after-teams-sso/#congratulations","title":"Congratulations!","text":"<p>You have completed App Camp lab B-03! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!)</p> <p>Close</p> <p></p>"},{"location":"congrats/B04-after-apply-styling/","title":"B04 after apply styling","text":""},{"location":"congrats/B04-after-apply-styling/#congratulations","title":"Congratulations!","text":"<p>You have completed App Camp lab B-04! Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!)</p> <p>Close</p> <p></p>"},{"location":"congrats/ConfigurableTab/","title":"ConfigurableTab","text":""},{"location":"congrats/ConfigurableTab/#congratulations","title":"Congratulations!","text":"<p>You have completed the Configurable Tab lab in App Camp!</p> <p>Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!)</p> <p>Close</p> <p></p>"},{"location":"congrats/Deeplink/","title":"Deeplink","text":""},{"location":"congrats/Deeplink/#congratulations","title":"Congratulations!","text":"<p>You have completed the Deep Link lab in App Camp!</p> <p>Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!)</p> <p>Close</p> <p></p>"},{"location":"congrats/Dialog/","title":"Dialog","text":""},{"location":"congrats/Dialog/#congratulations","title":"Congratulations!","text":"<p>You have completed the Dialog lab in App Camp!</p> <p>Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!)</p> <p>Close</p> <p></p>"},{"location":"congrats/MeetingConfigurableTab/","title":"MeetingConfigurableTab","text":""},{"location":"congrats/MeetingConfigurableTab/#congratulations","title":"Congratulations!","text":"<p>You have completed the Meeting App with Configurable Tablab in App Camp!</p> <p>Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!)</p> <p>Close</p> <p></p>"},{"location":"congrats/MessagingExtension/","title":"MessagingExtension","text":""},{"location":"congrats/MessagingExtension/#congratulations","title":"Congratulations!","text":"<p>You have completed the Messaging Extension lab in App Camp!</p> <p>Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!)</p> <p>Close</p> <p></p>"},{"location":"congrats/Monetization/","title":"Monetization","text":""},{"location":"congrats/Monetization/#congratulations","title":"Congratulations!","text":"<p>You have completed the Monetization lab in App Camp!</p> <p>Thanks for participating in App Camp and for allowing us to count your lab completion. (No personal is collected; we only want to count how many people have completed the labs so we can continue to fund this work!)</p> <p>Close</p> <p></p>"},{"location":"in-a-box/","title":"Lead your own App Camp","text":""},{"location":"in-a-box/#microsoft-teams-app-camp-in-a-box","title":"Microsoft Teams App Camp \"In a Box\"","text":"<p>Migrate applications into Microsoft Teams</p> <p>Teams App Camp is a self-paced, online workshop, but it also makes a great live workshop, either online on in person! The App Camp team has conducted several online workshops and we'd like to share our materials with you.</p> <p>This material can be used to lead:</p> <ul> <li>One-to-many hands-on bootcamps</li> <li>Tailored workshops for individual partners or customers</li> <li>Internal training for enterprise development teams</li> </ul> <p>Tip</p> <p> \u27a1\ufe0f Download all the materials here! \u2b05\ufe0f </p> <p>Two types of workshop are offered here, complete with agendas, slides, and other materials. The first type is an Envisioning Workshop, which is intended to help attendees envision and plan a Teams application. This is appropriate for a mix of business and technical stakeholders. The second is an App Camp Hands-on workshop, which is technical and aims to teach attendees to migrate apps to Microsoft Teams or build new apps with any tool chain.</p> <p>Sample agendas are available for enterprise developers and ISV's; they're very similar but the ISV workshops include details on monetizing apps in the Microsoft Teams App Store.</p> <p>Please don't feel the need to use the agendas and workshop outlines as-is! It's a lot better to understand your audience first, and then build an agenda tailored to their needs, so please mix and match, skip content that's not relevant, and add additional content as needed.</p> <p>The PowerPoint decks include extensive speaker notes; don't miss them!</p>"},{"location":"in-a-box/#preparing-to-teach-app-camp","title":"Preparing to teach App Camp","text":"<p>Teams App Camp is written for professional developers; students and especially instructors should feel comfortable coding in modern JavaScript and should understand the basics of RESTful web services. Please review the App Camp videos and do the labs - even if you're already an expert - so you know what's there for students.</p> <p>A lot of the PowerPoint slides shared here were used in the App Camp videos. Watching them is a good way to prepare, especially if you're new to Teams application development.</p> <p>You may also want to review the article Understanding ISV's in the App Camp wiki. It compares the needs of enterprise developers, including systems integrators who build bespoke apps for enterprises, with the needs of ISV's who host Software as a Service applications.</p>"},{"location":"in-a-box/#envisioning-workshop","title":"Envisioning Workshop","text":"<p>The Envisioning Workshop is intended for business and technical audiences alike to help them envision a Teams application to be developed. It's structured for a single customer or partner, but it could be adapted for a larger audience. The goal is to envision one or more Teams apps, either as extensions of existing apps or as new ones, and to understand the business impact of these applications.</p> <p>Envisioning Workshop sample agendas are here:</p> This is an embedded Microsoft Office document, powered by Office. Enterprise Envisioning Workshop This is an embedded Microsoft Office document, powered by Office. ISV Envisioning Workshop"},{"location":"in-a-box/#discovery","title":"Discovery","text":"<p>The Envisioning agenda begins with Discovery - that is, discovering the situation. This includes reviewing existing apps that might be extended to Microsoft Teams, or work processes that could benefit from a Teams application. It's useful to hear from as many stakeholders as possible during this discussion and to ask the customer or partner to demonstrate existing applications. Ask what works well in this application or work process, and what doesn't work so well? Are there unmet opportunities? How do people collaborate when they're using this applicaiton or doing a work process? Are users going through extra steps unnecessarily?</p> <p>Write it all down on a whiteboard (physical or virtual) so everyone knows their thoughts were heard, and to allow them to be reviewed and prioritized. Prioritize the issues and feature ideas as a group, and narrow it down to the top 2 or 3. Consider the impact if these issues could be addressed, or new features introduced - how would it help the end customer? Would it make people more productive, encourage collaboration or better decision-making, or perhaps reduce the risk of error inherent in human handoffs?</p>"},{"location":"in-a-box/#opportunity-to-grow-with-microsoft-teams-apps-isvs-only","title":"Opportunity to Grow with Microsoft Teams Apps (ISV's only)","text":"<p>This presentation explains the business opportunity for building Teams applications and selling them as SaaS applications in the Teams app store and Microsoft App Source. You can watch the video or present it yourself.</p> This is an embedded Microsoft Office presentation, powered by Office. PowerPoint <p>The presentation discusses three case studies of successful Teams apps:</p> <ol> <li> <p>Law Toolbox (Case study, Video)</p> </li> <li> <p>Breakthru (Article, video)</p> </li> <li> <p>Mural (Overview, video</p> </li> </ol> <p>There are more video case studies here; select the ones that will be most relevant to your audience.</p>"},{"location":"in-a-box/#microsoft-teams-application-overview","title":"Microsoft Teams Application Overview","text":"<p>Following Discovery, everyone in the workshop should have a shared understanding of the present situation. In this segment, the workshop facilitator will explain how Teams apps work and what they can do. As you're doing this, constantly refer back to what you learned in Discovery - how could each feature be used to address the ideas that were discussed?</p> <p>This deck contains a slide for each major capability of Teams applications, such as a personal tab or message extension, plus some general concepts such as Azure AD Single Sign-on. Each slide defines the concept along with a screen shot or other visual, and lists the end-user benefits that it brings.</p> This is an embedded Microsoft Office presentation, powered by Office. <p>It's best to accompany each slide with a demonstration. You can use the completed App Camp labs, of course, however it's a pretty bare-bones application. It's really intended to teach the technical concepts, not to demonstrate business value. So including other demos is also a great idea.</p> <p>A good sample to show is the Contoso HR Talent App, which presents a business scenario - recruiting new talent - that's familiar to many. The app includes all the major Teams app features, including more message extension options and bot features than App Camp. It's available in .NET and NodeJS, and includes its own lab with setup instructions.</p>"},{"location":"in-a-box/#envisioning-whiteboard-discussion","title":"Envisioning whiteboard discussion","text":"<p>At this point, everyone in the room should understand the partner or customer's situation, any existing apps, and the capabilities of Teams apps. Now take the time to brainstorm ideas for how a Teams app might work. Could existing web pages become tabs? Would they be personal or shared? Could messaging extensions assist with handoffs or keep groups informed? Sketch the application and list use cases.</p>"},{"location":"in-a-box/#app-camp-hands-on-workshop","title":"App Camp Hands-on workshop","text":"<p>The App Camp Hands-on workshop is intended for technical audiences to help them understand how Teams apps work so they can integrate an app with Teams. Two agendas are available: one for enterprises and systems integrators who will build apps for use within specific enterprise(s) and one for ISV's which adds content on monetizing apps in the Microsoft Teams app store.</p> This is an embedded Microsoft Office document, powered by Office. Enterprise App Camp Hands-on Workshop This is an embedded Microsoft Office document, powered by Office. ISV App Camp Hands-on Workshop"},{"location":"in-a-box/#introduction-to-teams-apps","title":"Introduction to Teams Apps","text":"<p>This segment begins with a briefing on the App Camp labs and a brief demonstration of the Northwind Orders app. It then continues by explaining the basics of Teams applications, such as the capabilities and manifest.</p> This is an embedded Microsoft Office presentation, powered by Office. <p>If you want to provide more detail on the capabilities of Teams apps, consider adding content from the Microsoft Teams Application Overview here as well.</p> IDEA: Reduce workshop duration by assigning prework <p>One option that can save time is to ask students to watch one or more of these videos as pre-work. We had success with this approach in live workshops, where we opened with a quiz on the Teams material.</p> <p> Get started building Microsoft Teams apps Understanding Single Sign-On (SSO) with Azure AD Multi-tenant architecture for SaaS apps with Microsoft 365 and Azure Active Directory (may not be relevant to enterprise audiences) </p>"},{"location":"in-a-box/#labs-a01-a03-or-b01-b04","title":"Labs A01-A03 or B01-B04","text":"<p>Most students should pursue the \u201cA Path\u201d (labs A01-A03). The extended labs are all based on completing lab A-03.Use these labs if your students:</p> <ul> <li>already use Azure AD for authentication OR</li> <li>do not authenticate users OR</li> <li>are building new applications</li> </ul> <p>Use the \"B Path\" (labs B01-B04) if your students want to build a Teams app based on an existing app that uses a non-Azure AD identity system such as Auth0, Identity Server, Okta, Ping Federate, or Azure AD B2C, or a bespoke identity system such as ASP.NET SQL based authentication</p> <p>Note that the solution files for the extended labs are all built on the A-03 solution; they have been tested building on B-04 but students will need to understand the code and adapt the instructions in order to make this work.</p> <p>Here is the deck to introduce these initial labs.</p> This is an embedded Microsoft Office presentation, powered by Office. Labs A01-A03 This is an embedded Microsoft Office presentation, powered by Office. Labs B01-B03 <p>The sample agenda suggests interrupting these labs and presenting the next segment, \"Understanding Azure AD\", as a lecture. This will help students understand what they're doing with Azure AD as they're doing the labs, and will provide a break from doing the labs.</p>"},{"location":"in-a-box/#understanding-azure-ad","title":"Understanding Azure AD","text":"<p>Students will have to work with Azure AD throughout any Teams app project, as a way to authenticate users (hopefully with Single Sign-on) and to call back-end services such as the Microsoft Graph and Marketplace API. In addition, the Azure Bot Framework uses Azure AD, however many of the details are handled by the Bot Builder SDK. In any case - having a command of Azure AD concepts early on can save a lot of confusion!</p> <p>This deck contains the Azure AD slides from Teams App camp as well as some additional ones. </p> This is an embedded Microsoft Office presentation, powered by Office. <p>Consider demonstrating Azure AD as part of this segment. An easy way to do this is to use the Graph Explorer. </p> <ul> <li>Before the demo, go into Enterprise Applications in the Azure AD admin center and delete the entry for Microsoft Graph Explorer. </li> <li>Then make some assorted Graph calls with Graph explorer and you'll have to grant every permission. This is a good place to discuss the permission and consent models. Grant some permissions as an administrator and others as a user, and explain the difference.</li> <li>Then return to Enterprise Apps and show that the permissions have been granted.</li> <li>Finally, show the App Camp app registration and explain that Graph Explorer is registered the same way in Microsoft's tenant. Walk them through the settings used in the lab and explain them.</li> </ul>"},{"location":"in-a-box/#extended-labs","title":"Extended Labs","text":"<p>Here are the decks for the extended labs, along with concept slides that introduce each topic. Demonstrate the completed lab as part of each presentation, and point out any steps you found to be tricky when you did the labs.</p> This is an embedded Microsoft Office presentation, powered by Office. Configurable Tabs Lab This is an embedded Microsoft Office presentation, powered by Office. Meeting App with Configurable Tab Lab This is an embedded Microsoft Office presentation, powered by Office. Deep Linking Lab This is an embedded Microsoft Office presentation, powered by Office. Dialogs Lab This is an embedded Microsoft Office presentation, powered by Office. Message Extension Lab"},{"location":"in-a-box/#monetization-segments-for-isvs","title":"Monetization segments for ISV's","text":"<p>The ISV workshop includes additional content introducing the Microsoft Commercial Marketplace. These loosely correspond to App Camp videos; please review them as you're preparing to deliver the content.</p>"},{"location":"in-a-box/#opportunity-to-build-and-grow-with-microsoft-teams","title":"Opportunity to Build and Grow with Microsoft Teams","text":"<p>This presentation discusses the business value of Teams applications, with links to video case studies that show how apps can work within Teams and Microsoft 365. The deck is based on this video.</p>"},{"location":"in-a-box/#guide-to-teams-app-monetization","title":"Guide to Teams App Monetization","text":"<p>This presentation explains the steps to monetizing a Teams application, with lots of advice to make the process easier. It's available as a PDF file here and corresponds to this video from the App Camp technical briefing on Monetizing your Teams Application.</p>"},{"location":"in-a-box/#anatomy-of-a-saas-offer","title":"Anatomy of a SaaS Offer","text":"<p>This presentation explains the idea of a SaaS Offer, and the implementation of a landing page, web hooks, and licensing service to support it. This deck corresponds to this video from the App Camp technical briefing of the same name.</p> This is an embedded Microsoft Office presentation, powered by Office."},{"location":"in-a-box/#monetization-lab","title":"Monetization Lab","text":"<p>This presentation accompanies the monetization lab, Selling your SaaS-based Teams Extension</p> This is an embedded Microsoft Office presentation, powered by Office."},{"location":"in-a-box/quiz/","title":"App Camp Quiz Questions","text":"<p>Quizzes don't have to be a dreaded activity with closed books and grading. App Camp should be fun! However a simple quiz or two, in which questions and answers are discussed openly with a whole classroom, can be a great way to ensure students understand. It also can serve as a review, as you or the students who do understand review the correct answers and common misconceptions. Quizzes can even be gamified with use of a tool like Kahoot!.</p> <p>These questions have been play tested in live App Camp workshops; they're designed to provoke discussion of key concepts and to dispel common misconceptions. The correct answers are marked with a \"*\"; in some cases there is more than one correct answer.</p>"},{"location":"in-a-box/quiz/#teams-app-concepts","title":"Teams App Concepts","text":"<ol> <li> <p>Microsoft Graph is a charting tool for use in Microsoft 365</p> <p>a. True</p> <p>b. False *</p> <p>DISCUSS: Microsoft Graph is the main API for accessing all the content in a Microsoft 365 tenant.</p> </li> <li> <p>Where do Microsoft Teams applications run?</p> <p>a. Teams Application Host</p> <p>b. Teams Shared Service Provider</p> <p>c. Anywhere on the Internet *</p> <p>d. Skype Spaces</p> <p>DISCUSS: Teams apps can run anywhere on the Internet. Microsoft Teams accesses the application using information in the Teams app manifest, and stitches the app into the Teams user interface.</p> </li> <li> <p>You can show _____ on an adaptive card:</p> <p>a. Images *</p> <p>b. Input fields *</p> <p>c. Custom styles</p> <p>d. Action buttons *</p> <p>DISCUSS: Adaptive cards are designed to blend in with the hosting application, so custom styles are not available. These cards run in Teams, Outlook, and several other products, and each hosting product has its own styling.</p> </li> <li> <p>A Teams app manifest is a _____ file</p> <p>a. JavaScript</p> <p>b. JSON *</p> <p>c. JSX</p> <p>d. YAML</p> <p>DISCUSS: It's a JSON file that is placed in a .zip archive with two icons to create a Teams application package that would be uploaded to Teams or placed in the Teams app store</p> </li> <li> <p>ngrok is a _____</p> <p>a. Space mission to Mars</p> <p>b. Tunneling program *</p> <p>c. Relational database</p> <p>d. Machine learning</p> <p>DISCUSS: ngrok provides a tunnel so requests from the Azure Bot Channel Service can be delivered to your locally running application during development. It also handles host naming and HTTPS termination. The name may well be a reference to Robert Heinlein's science fiction classic \"Stranger in a Strange Land\", in which it is a Martian word meaning to understand something intuitively or empathetically.</p> </li> <li> <p>What do you get when you join the Microsoft 365 Developer program?</p> <p>a. A free Microsoft 365 developer tenant with 10 users (E3 licensing)</p> <p>b. A discount on a Microsoft 365 developer tenant with 1 user (E3 licensing)</p> <p>c. A discount on a Microsoft 365 developer tenant with 10 users (E5 licensing)</p> <p>d. A free Microsoft 365 developer tenant with 25 users (E5 licensing) *</p> <p>DISCUSS: This is a great deal! The developer tenant is free and includes 25 of the higher-end E5 licenses so you can test your application. These tenants are for development use only, and are given for 90 days, which will automatically renew if the system gets signals that you are still doing development.</p> </li> <li> <p>When your bot recieves an activity from Microsoft Teams, _____ creates a turn</p> <p>a. Bot adapter *</p> <p>b. Bot builder</p> <p>c. Channel</p> <p>d. Bob the builder</p> <p>DISCUSS: The Bot Builder SDK's adapter object is responsible for handling turns. A turn is an exchange of one or more \"activities\" which a bot's web server processes in one run.</p> </li> </ol>"},{"location":"in-a-box/quiz/#azure-ad-concepts","title":"Azure AD Concepts","text":"<ol> <li> <p>In the context of Teams applications, SSO stands for _____</p> <p>a. Single Sign-On *</p> <p>b. Simple Sign-On</p> <p>c. Sales Service Order</p> <p>d. Singapore Symphony Orchestra</p> <p>DISCUSS: Single Sign-On means different things in different products, and is often used in marketing claims, so the exact meaning tends to vary depending on the product(s) involved.</p> </li> <li> <p>In the context of Teams applications, Single Sign-on means:</p> <p>a. Users can use the same username and password for your application as they do for Microsoft 365</p> <p>b. Users don't have to retype their username or password when using your application in Teams</p> <p>c. Users are never prompted to log into your application even if they switch to using it on a new device</p> <p>d. All of these are part of Teams SSO *</p> <p>DISCUSS: Microsoft Teams has a fairly rigorous definition of SSO. Microsoft Azure uses the term to cover a wider set of scenarios.</p> </li> <li> <p>What kind of Azure AD permission lets you act on behalf of the logged-in user?</p> <p>a. application</p> <p>b. conditional</p> <p>c. delegated *</p> <p>d. user</p> <p>DISCUSS: Delegated permission allows an application to act on behalf of a user when calling an API such as the Microsoft Graph. Application permission allows an application to act on its own behalf, and always requires an administrator to consent.</p> </li> <li> <p>Microsoft Teams SSO makes it easy for an application to request an access token. What can you access using this token?</p> <p>a. Microsoft Teams JavaScript SDK</p> <p>b. The Microsoft Graph API</p> <p>c. The application's own back-end service *</p> <p>d. Nothing; this call returns an Identity token not an access token</p> <p>DISCUSS: It's a common misconception that these are ID tokens! If you inspect one in https://jwt.ms, you can see the audience claim is set to the application ID of your application, meaning it is an access token targeting your own back-end service.</p> </li> <li> <p>Who can consent to granting permissions to an application within a Microsoft 365 tenant?</p> <p>a. Any user</p> <p>b. Any user, but only for certain delegated permissions that are less sensitive *</p> <p>c. A tenant administrator *</p> <p>d. Microsoft, by making a request to the M365 Core Services team</p> <p>DISCUSS: For some simple delegated permissions, a user can consent. For anything sensitive (as documented in the Microsoft Graph API for example), as well as for any application permissions, an administrator must consent. If an app wants to avoid prompting users, it may want to prompt the administrator for all the permission needed, for example in the app's landing page that's shown when the app is purchased in the Teams app store.</p> </li> <li> <p>If your Teams SSO application wants to call the Microsoft Graph API, how should it obtain an access token to do this?</p> <p>a. Simply request it from Teams SSO</p> <p>b. Use the Microsoft Authentication Library (MSAL)</p> <p>c. On your application's server, exchange the app's own access token for a Graph access token using the On Behalf Of flow *</p> <p>d. Pass the username and password instead of a token</p> <p>DISCUSS: The OBO flow is used to exchange the app's token for a Graph access token. This must be done on a \"confidential client\" such as a web server, where the app secret can be safely used. It's a best practice not to send this token back to the client, where a user could obtain it and use it for other purposes until the token expires. So the app should make any Graph calls from the server and pass results, rather than the token, back to the client side.</p> </li> </ol>"},{"location":"in-a-box/quiz/#commercial-marketplace-and-app-monetization-questions","title":"Commercial Marketplace and App Monetization questions","text":"<ol> <li> <p>When you sell in the Microsoft Teams app store, your app's licenses will appear in the Microsoft 365 Admin portal alongside Microsoft product licenses.</p> <p>a. True</p> <p>b. False *</p> <p>DISCUSS: This is a common area of confusion; partners or customers look in the same place for Teams app licenses as they already do for Microsoft 365 licenses. However the app licenses are different and are managed by the application itself, so generally there is some kind of settings or administrator page within each app to manage its licenses.</p> </li> <li> <p>How can you reach out to buyers through Microsoft Commercial Marketplace?</p> <p>a. Direct (Buyers coming to Teams Store / App Source / Teams Admin Portal)</p> <p>b. Microsoft's partner channel (90K partners around the world)</p> <p>c. Microsoft's field sellers</p> <p>d. All of the above *</p> <p>DISCUSS: All these methods are available once your transactable SaaS offer is published in Partner Center and linked to an application in the Teams App Store. If your SaaS offer runs on Azure, you can have the same offer available in Azure Marketplace and Azure Portal.</p> </li> <li> <p>Partners set up the information needed to purchase their app (a \"Transactable SaaS Offer\") in what tool?</p> <p>a. Azure Portal</p> <p>b. Commerce Server Catalog Manager</p> <p>c. Partner Center *</p> <p>d. Teams Developer Portal</p> <p>DISCUSS: Partner Center is where partners set up the details Microsoft needs to sell subscriptions to their applications.</p> </li> <li> <p>Do you have a Partner Center account?</p> <p>a. Yes, all set!</p> <p>b. Nope</p> <p>c. Not sure but I know who to ask</p> <p>d. Not sure and I'm not sure who in my org to ask</p> <p>DISCUSSION: _This is more of a survey than a quiz question. It's worth getting an early start in setting this up as there are legal aspects that may require approvals within an ISV's organization. For details, please visit What is Partner Center?.</p> </li> <li> <p>Customers will be able to purchase your Teams application in:</p> <p>a. App source *</p> <p>b. Aure Marketplace (* sometimes - see below)</p> <p>c. Microsoft Store</p> <p>d. Microsoft Teams App Store *</p> <p>DISCUSSION: This is a tricky question. Monetized Teams apps appear in App Source and the Teams App Store. If a SaaS offer is running on Azure, then you can purchase it in the Azure Marketplace and Azure Portal as well. The Windows store is for consumers and thus will not show applications for commercial customers.</p> </li> <li> <p>Microsoft Teams can be coupled with which type of Commercial Marketplace solution?</p> <p>a. SaaS *</p> <p>b. Azure Managed Application</p> <p>c. Virtual Machine</p> <p>d. All of the above</p> <p>DISCUSSION: Teams apps are considered SaaS offerings. Azure Managed Apps and Virtual Machines are specific to Microsoft Azure.</p> </li> <li> <p>How much does Microsoft keep when you sell your Teams application in the Teams app store or App Source?</p> <p>a. 3% *</p> <p>b. 7%</p> <p>c. 20%</p> <p>d. 22%</p> <p>DISCUSSION: 3% is similar to a credit card transaction fee, and Microsoft Commercial Marketplace offers more than just a transaction. It provides a channel through 90,000 Microsoft partners, includes go-to-market activities, etc.</p> </li> </ol>"},{"location":"includes/a-path-links/","title":"A path links","text":"<ul> <li>A01 - Start with Azure Active Directory</li> <li>A02 - Create a Teams app with Azure AD Single Sign-On</li> <li>A03 - Teams styling and themes</li> </ul>"},{"location":"includes/are-you-on-the-right-path/","title":"Are you on the right path","text":"Are you on the right path? Expand these notes to find out! <p>There are two options for doing the labs:</p> <ul> <li> <p>The \"A\" path is for developers with apps that are already based on Azure Active Directory. The starting app uses Azure Active Directory and the Microsoft Authentication Library (MSAL).</p> </li> <li> <p>the \"B\" path is for developers with apps that use some other identity system. It includes a simple (and not secure!) cookie-based auth system based on the Employees table in the Northwind database. You will use an identity mapping scheme to allow your existing users to log in directly or via Azure AD Single Sign-On.</p> </li> </ul>"},{"location":"includes/b-path-links/","title":"B path links","text":"<ul> <li>B01 - Start with a non-Azure Active Directory Identity System</li> <li>B02 - Teams App with Bespoke Authentication</li> <li>B03 - Enable Azure AD Single Sign-On</li> <li>B04 - Teams styling and themes</li> </ul>"},{"location":"includes/extended-lab-intro/","title":"Extended lab intro","text":"<p>Important!</p> <p>This lab builds on the completed solution to lab A03-after-apply-styling.md, which is the last of the \"core\" labs. If you haven't done them, you can start here.</p>"},{"location":"includes/extended-lab-links/","title":"Extended lab links","text":"<ul> <li>Add a Configurable Tab</li> <li>Add a Deep link to a personal Tab</li> <li>Add a Dialog </li> <li>Add a Meeting app</li> <li>Add a Message Extension</li> <li>Selling Your SaaS-based Teams Extension</li> </ul>"},{"location":"includes/heading/","title":"Heading","text":""},{"location":"includes/i-finished/","title":"I finished","text":""},{"location":"includes/i-finished/#congratulations","title":"Congratulations!","text":"<p>When you have finished this lab,please click this button to let us know!</p> <p>No personal information is collected; we only want to count how many people have completed the labs so we can continue to fund this work!</p>"},{"location":"includes/issuesLink/","title":"issuesLink","text":"<p>For the latest issues, or to file a bug report, see the github issues list for this repository.</p>"},{"location":"internal/labFormat/","title":"labFormat","text":""},{"location":"internal/labFormat/#guide-to-formatting-lab-content","title":"Guide to formatting lab content","text":""},{"location":"internal/labFormat/#formatting-text-elements","title":"Formatting text elements","text":"<p>These text elements are embedded into the lab instructions, so the formatting is always in-line</p> Element Treatment Example Function names monospaced with parenthesis Then, call <code>myFunction()</code> to do something ... Language keywords monospaced ... insert at the top of the <code>try</code> block ... Symbols in code (variable, object names etc.) monospaced ... the <code>foo</code> object contains something random ... File and folder names bold Copy the contents of foo.js into the bar folder Text on screen enclose in double quotes Now click on the \"foo\" button"},{"location":"internal/labFormat/#includes","title":"Includes","text":"<p>To include content from the /docs/includes folder, use this format:</p>"},{"location":"internal/labFormat/#hyperlinks","title":"Hyperlinks","text":"<p>Links within the labs can be relative and should open within the current window like this.</p> <p>Links that go outside the labs, including links to source code in the same repo, should open a new window like this</p> <p>Please add this query string to links to Microsoft documentation: ?WT.mc_id=m365-58890-cxa</p>"},{"location":"internal/labFormat/#admonitions","title":"Admonitions","text":"<p>Challenge</p> <p>Here's something to try on your own</p> <p>Note</p> <p>Use this format to emphasize or clarify the instructions</p> <p>Tip</p> <p>Use this format to show tips and best practices</p> <p>Warning</p> <p>Use this format to warn the student about a common pitfall in completing the labs</p> <p>Danger</p> <p>Use this format to warn the student about security issues or stability issues that may arise in a production application</p> Video briefing <p> Caption </p> Video briefing <p> Caption </p> More information <p> Caption 1 Caption 2 Caption 3 </p> TL;DR <p>Use this format to provide ancillary details that may be of interest but are not essential</p>"},{"location":"internal/labOutlineOrTemplate/","title":"labOutlineOrTemplate","text":""},{"location":"internal/labOutlineOrTemplate/#lab-xxx-lab-title","title":"Lab xxx: [Lab title]","text":""},{"location":"internal/labOutlineOrTemplate/#overview","title":"Overview","text":"<p>Describe the lab here</p> <p>The completed solution can be found in the A02-after-teams-sso folder, but the instructions will guide you through modifying the app running in your working folder. </p> <p>In this lab you will learn to:</p> <ul> <li>first thing</li> <li>second thing</li> <li>more things</li> </ul> Video briefing <p> xxx Lab Briefing </p> Table of Contents (open to display \u25ba) <ul> <li>Overview</li> <li>Features</li> <li>Project structure</li> <li>Exercise 1: Authorize Microsoft Teams to log users into your application<ul> <li>Step 1: Return to your app registration</li> <li>Step 2: Add the Teams client applications</li> </ul> </li> <li>Known issues</li> <li>References</li> <li>Next Steps</li> </ul>"},{"location":"internal/labOutlineOrTemplate/#features","title":"Features","text":"<ul> <li>First feature added in the lab</li> <li>Second feature added in the lab</li> <li>...</li> </ul>"},{"location":"internal/labOutlineOrTemplate/#project-structure","title":"Project structure","text":"Project files before and after this lab (open to display \u25ba) <p>The project structure when you start of this lab and end of this lab is as follows. Use this depiction for comparison. On your left is the contents of folder  <code>A03-after-apply-styling</code> and on your right is the contents of folder <code>xxx</code>.</p> <ul> <li> <p>\ud83c\udd95 New files/folders</p> </li> <li> <p>\ud83d\udd3aFiles changed</p> </li> </ul> <p> Project Structure Before  Project Structure After <pre>\nA03-after-apply-styling\n    \u251c\u2500\u2500 client\n    \u2502   \u251c\u2500\u2500 components\n    \u2502       \u251c\u2500\u2500 navigation.js\n    \u2502   \u2514\u2500\u2500 identity\n    \u2502       \u251c\u2500\u2500 identityClient.js\n    \u2502       \u2514\u2500\u2500 userPanel.js\n    \u251c\u2500\u2500 modules\n    \u2502   \u2514\u2500\u2500 env.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 teamsHelpers.js\n    \u251c\u2500\u2500 pages\n    \u2502   \u2514\u2500\u2500 categories.html\n    \u2502   \u2514\u2500\u2500 categories.js\n    \u2502   \u2514\u2500\u2500 categoryDetails.html\n    \u2502   \u2514\u2500\u2500 categoryDetails.js\n    \u2502   \u2514\u2500\u2500 myOrders.html\n    \u2502   \u2514\u2500\u2500 orderDetail.html\n    \u2502   \u2514\u2500\u2500 orderDetail.js\n    \u2502   \u2514\u2500\u2500 privacy.html\n    \u2502   \u2514\u2500\u2500 productDetail.html\n    \u2502   \u2514\u2500\u2500 productDetail.js\n    \u2502   \u2514\u2500\u2500 termsofuse.html\n    \u251c\u2500\u2500 index.html\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 northwind.css\n    \u251c\u2500\u2500 teamstyle.css\n    \u251c\u2500\u2500 manifest\n    \u2502   \u2514\u2500\u2500 makePackage.js\n    \u2502   \u2514\u2500\u2500 manifest.template.json\n    \u2502   \u2514\u2500\u2500 northwind32.png\n    \u2502   \u2514\u2500\u2500 northwind192.png\n    \u2502   \u2514\u2500\u2500 constants.js\n    \u2502   \u2514\u2500\u2500 identityService.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 server.js\n    \u251c\u2500\u2500 .env_Sample\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 package.json\n    \u2514\u2500\u2500 README.md\n</pre> <pre>\nxxx (this lab) -- add \ud83c\udd95 and \ud83d\udd3a\n    \u251c\u2500\u2500 client\n    \u2502   \u251c\u2500\u2500 components\n    \u2502       \u251c\u2500\u2500 navigation.js\n    \u2502   \u2514\u2500\u2500 identity\n    \u2502       \u251c\u2500\u2500 identityClient.js\n    \u2502       \u2514\u2500\u2500 userPanel.js\n    \u251c\u2500\u2500 modules\n    \u2502   \u2514\u2500\u2500 env.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 teamsHelpers.js\n    \u251c\u2500\u2500 pages\n    \u2502   \u2514\u2500\u2500 categories.html\n    \u2502   \u2514\u2500\u2500 categories.js\n    \u2502   \u2514\u2500\u2500 categoryDetails.html\n    \u2502   \u2514\u2500\u2500 categoryDetails.js\n    \u2502   \u2514\u2500\u2500 myOrders.html\n    \u2502   \u2514\u2500\u2500 orderDetail.html\n    \u2502   \u2514\u2500\u2500 orderDetail.js\n    \u2502   \u2514\u2500\u2500 privacy.html\n    \u2502   \u2514\u2500\u2500 productDetail.html\n    \u2502   \u2514\u2500\u2500 productDetail.js\n    \u2502   \u2514\u2500\u2500 termsofuse.html\n    \u251c\u2500\u2500 index.html\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 northwind.css\n    \u251c\u2500\u2500 teamstyle.css\n    \u251c\u2500\u2500 manifest\n    \u2502   \u2514\u2500\u2500 makePackage.js\n    \u2502   \u2514\u2500\u2500 manifest.template.json\n    \u2502   \u2514\u2500\u2500 northwind32.png\n    \u2502   \u2514\u2500\u2500 northwind192.png\n    \u2502   \u2514\u2500\u2500 constants.js\n    \u2502   \u2514\u2500\u2500 identityService.js\n    \u2502   \u2514\u2500\u2500 northwindDataService.js\n    \u2502   \u2514\u2500\u2500 server.js\n    \u251c\u2500\u2500 .env_Sample\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 package.json\n    \u2514\u2500\u2500 README.md\n</pre> </p>"},{"location":"internal/labOutlineOrTemplate/#exercise-1-high-level-description","title":"Exercise 1: (High-level description)","text":""},{"location":"internal/labOutlineOrTemplate/#step-1-do-a-thing","title":"Step 1: (do a thing)","text":""},{"location":"internal/labOutlineOrTemplate/#step-2-do-another-thing","title":"Step 2: (do another thing)","text":""},{"location":"internal/labOutlineOrTemplate/#known-issues","title":"Known issues","text":"<p>For the latest issues, or to file a bug report, see the github issues list for this repository.</p>"},{"location":"internal/labOutlineOrTemplate/#references","title":"References","text":"<p>Single sign-on (SSO) support for Tabs</p>"},{"location":"internal/labOutlineOrTemplate/#next-steps","title":"Next Steps","text":"<p>After completing this lab, you may continue to the next lab in this learning path, A03-after-apply-styling: Teams styling and themes.</p>"},{"location":"supplemental/MonetizationLabSetup/","title":"MonetizationLabSetup","text":""},{"location":"supplemental/MonetizationLabSetup/#deploying-the-sample-app-source-simulator-and-licensing-service","title":"Deploying the sample App Source Simulator and Licensing service","text":"<p>The lab Selling your SaaS-based Teams Extension utilizes a sample \"App Source\" (which stands in for the real App Source or the Teams app store) and a licensing service (which you would write for your own application).</p> <p>If you wish to install these services yourself, here are the instructions.</p> Table of Contents (open to display \u25ba) <ul> <li>Exercise 1: Download source code for lab</li> <li>Exercise 2:  Deploy resources to Azure</li> <li>Step 1: Update ARM parameters file</li> <li>Step 2: Overcoming install errors</li> <li>Step 3: Deploy the ARM template with PowerShell</li> <li>Step 4: Deploy the applications to Azure</li> <li>Step 5: Update .env file with deployed resources.</li> <li>Exercise 3: Set application permissions</li> <li>Step 1: Return to the Northwind Orders app registration</li> <li>Step 2: Add permission to call the licensing application</li> <li>Step 2A (ONLY IF NEEDED): Add permission across tenants</li> <li>Step 3: Consent to the permission</li> <li>Exercise 4: Northwind Orders calls the licensing service</li> <li>Step 1: Add a server side function to validate the user has a license</li> <li>Step 2: Add a server side API to validate the user's license</li> <li>Step 3: Add client pages to display a license error</li> <li>Step 4: Check if the user has a license</li> <li>Step 5: Call the license API</li> <li>Exercise 5: Run the application</li> <li>Step 1: Run Teams without a license</li> <li>Step 2: \"Purchase\" a subscription and set licensing policy</li> <li>Step 3: Run the application in Teams</li> </ul> <p>Over the course of these exercises you will complete the following lab goals.</p> <ol> <li>Deploy the AppSource simulator and sample SaaS fulfillment and licensing service in Microsoft Azure.</li> <li>Observe the interactions between AppSource and a SaaS landing page in a simulated environment</li> <li>Connect the Northwind Orders application to the sample SaaS licensing service to enforce licenses for Microsoft Teams users</li> </ol>"},{"location":"supplemental/MonetizationLabSetup/#features-added-in-this-lab","title":"Features added in this lab","text":"<ul> <li>*AppSource* simulator enabling a customer can \"purchase\" a subscription to your application</li> <li>Sample web service that fulfills this purchase and manages licenses for Microsoft Teams users to use the Northwind Orders application</li> <li>Northwind Orders application checks to ensure Microsoft Teams users are licensed or displays an error page</li> </ul>"},{"location":"supplemental/MonetizationLabSetup/#lab-prerequisites","title":"Lab prerequisites","text":"<p>This lab requires the following prerequisites.</p> <ol> <li>An active Azure subscription on your own Azure tenant.</li> <li>An active M365 tenant, which can be the one you created in the prerequisites lab.</li> <li>PowerShell 7 (This is cross-platform and will run on MacOS and Linux)</li> <li>.NET Core 3.1 SDK (This is cross-platform and will run on MacOS and Linux)</li> <li>.NET Framework 4.8 Developer Pack</li> </ol> <p>Note</p> <p>If you want to run or modify these applications locally, you may find it helpful to install Visual Studio 2022 for Windows. The free Community edition will work fine. During installation, select the following modules to be added to Visual Studio.</p> <ol> <li> <p>ASP.NET and web development</p> </li> <li> <p>Azure development</p> </li> <li> <p>Office/SharePoint development</p> </li> <li> <p>.NET cross-platform development</p> </li> </ol>"},{"location":"supplemental/MonetizationLabSetup/#install-the-prerequisites","title":"Install the prerequisites","text":"<ol> <li>Install PowerShell 7</li> <li> <p>Install the following PowerShell modules (You will need an elevated prompt)</p> <ul> <li>Microsoft Graph PowerShell SDK </li> </ul> <p><code>powershell   Install-Module Microsoft.Graph -AllowClobber -Force</code></p> <ul> <li> <p>Azure Az PowerShell module</p> <p><code>powershell Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -AllowClobber -Force</code> 3. Install .NET Core 3.1 SDK 4. .NET Framework 4.8 Developer Pack</p> </li> </ul> </li> </ol>"},{"location":"supplemental/MonetizationLabSetup/#exercise-1-download-source-code-for-lab","title":"Exercise 1: Download source code for lab","text":"<p>To complete this lab you'll deploy the following to Azure. </p> <ul> <li>Northwind Web App - The Northwind SaaS application</li> <li>License Service Web API - An API that serves as a licensing service</li> <li>AppSource Simulator - An application that simulates the AppSource </li> <li>SQL Server and database</li> </ul> <p>You'll create the three applications and their supporting infrastructure using automated deployment scripts called ARM templates.</p> <p>Download the source code needed for these services</p> <ol> <li>Go to https://github.com/OfficeDev/office-add-in-saas-monetization-sample.</li> <li>Clone or download the project to your local machine.</li> </ol>"},{"location":"supplemental/MonetizationLabSetup/#exercise-2-deploy-resources-to-azure","title":"Exercise 2:  Deploy resources to Azure","text":"<p>In this exercise you will deploy resources into your Azure subscription using an ARM template. These resources will all share the same resource group. They include the three web applications and a SQL server instance with a database.</p>"},{"location":"supplemental/MonetizationLabSetup/#step-1-update-arm-parameters-file","title":"Step 1: Update ARM parameters file","text":"<ol> <li>In the project you just downloaded in Exercise 1, Step 2, go to folder <code>office-add-in-saas-monetization-sample/Deployment_SaaS_Resources/</code> in your text editor.</li> <li>Open the <code>ARMParameters.json</code> file and note the following parameters.     <code>text         - webAppSiteName         - webApiSiteName         - resourceMockWebSiteName         - domainName         - directoryId (Directory (tenant) ID)         - sqlAdministratorLogin         - sqlAdministratorLoginPassword         - sqlMockDatabaseName         - sqlSampleDatabaseName</code></li> <li>Enter a unique name for each web app and web site in the parameter list shown below because each one must have a unique name across all of Azure.  All of the parameters that correspond to web apps and sites in the following list end in SiteName.</li> </ol> <p>Note</p> <p>If you need assistance findinn your domainName and directoryId, please refer to this article.</p> <p>Based on the subscription you are using, you may change the location where your azure resources are deployed. To change this, find the <code>DeployTemplate.ps1</code> file and search for variable <code>$location</code>.     By default it is <code>centralus</code> but you can change it to a region near you, such as <code>eastus</code>.</p> <p>Leave the rest of the configuration in file <code>ARMParameters.json</code> as is, this will be automatically filled in after scripts deploy the resources.</p> <ol> <li> <p>In a Powershell 7 window, change to the ./Deployment_SaaS_Resources directory.</p> </li> <li> <p>Run the following command. You will be prompted to sign in and accept a Permissions requested dialog as shown below.</p> <p><code>powershell Connect-Graph -Scopes \"Application.ReadWrite.All, Directory.AccessAsUser.All DelegatedPermissionGrant.ReadWrite.All Directory.ReadWrite.All\"</code></p> </li> </ol> <p></p> <ol> <li>Click Accept.</li> </ol> <p>Once accepted, the browser will redirect and show the below message. You can close the browser and continue with the PowerShell command line.</p> <p></p> <ol> <li>In the same PowerShell terminal window run <code>.\\InstallApps.ps1</code>.</li> </ol> <p>Note</p> <p>This step adds <code>Microsoft Graph PowerShell</code> in Azure Active Directory under Enterprise Applications with the necessary permissions so we can create the needed applications for this particular exercise using its commands.</p> <p>Warning</p> <p>You might get an error as shown below. It depends on the execution policy settings in PowerShell. If you do get the error, move to Step 2. If you do not get the error keep going.</p> <p></p> <ol> <li>Copy the values from the output and later you will need  these values to update the code and .<code>env</code> file for deploying add-ins. These values will also be pre-populated in <code>ARMParameters.json</code>. Do not change this file.</li> <li>Note how the <code>ARMParameters.json</code> file is now updated with the values of applications deployed.</li> <li>Since you did not get the PowerShell error, move to Step 3.</li> </ol>"},{"location":"supplemental/MonetizationLabSetup/#step-2-overcoming-install-errors","title":"Step 2: Overcoming install errors","text":"<p>Note</p> <p>This step is only needed if the previous step ended in an error.</p> <p>The error you experienced above is likely due to the execution policy of your PowerShell terminal. Here you will set the PowerShell execution policy to be less restrictive and then re-run the install script.</p> <p>You will set the execution policy to <code>Bypass</code> for now. Read more on execution policies here.</p> <ol> <li>Run below PowerShell command.     <code>powershell     Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass</code></li> <li> <p>Now re-run <code>.\\InstallApps.ps1</code></p> <p>The script should now run to create all three applications in Azure AD. At the end of the script, your command line should display below information.:</p> </li> </ol> <p></p> <ol> <li> <p>Copy the values from the output and later you will need  these values to update the code and .env file for deploying Add-ins. These values will also be pre-populated in <code>ARMParameters.json</code>. Do not change this file.</p> </li> <li> <p>Notice how the <code>ARMParameters.json</code> file is now updated with the values of applications deployed.</p> </li> </ol>"},{"location":"supplemental/MonetizationLabSetup/#step-3-deploy-the-arm-template-with-powershell","title":"Step 3: Deploy the ARM template with PowerShell","text":"<ol> <li>Open PowerShell 7 and run the Powershell command <code>Connect-AzAccount</code>. This will redirect you to login page.</li> <li>Confirm with the Global admin credentials. You will be redirected to a page displaying below.</li> </ol> <ol> <li>Close the browser and continue with PowerShell. You will see similar output to that shown below in your command line, if everything is okay.</li> </ol> <ol> <li>Run the script <code>.\\DeployTemplate.ps1</code>.      When prompted, enter the name of the resource group to create.</li> </ol> <p>Your resources will start to get deployed one after the other and you'll see the output as shown below if everything is okay.</p> <p></p> <p>You'll get a message on the command line that the ARM Template deployment was successfully as shown below.</p> <p></p> <ol> <li>Go to the <code>App registrations</code> in Azure AD in Azure portal. Use this link to navigate to it.</li> </ol> <p>Under All applications,  filter with Display name <code>Contoso Monetization</code>. You should see three apps as shown in the screen below:</p> <p></p>"},{"location":"supplemental/MonetizationLabSetup/#step-4-deploy-the-applications-to-azure","title":"Step 4: Deploy the applications to Azure","text":"<p>Here you'll deploy the server side code for the three applications.</p> <ol> <li>In the command line, change to the <code>.\\MonetizationCodeSample</code> directory.</li> <li>Run the script <code>.\\PublishSaaSApps.ps1</code>.</li> <li>When prompted, enter the same resource group name you chose earlier.     You will see the source code in your local machine getting built and packaged.</li> </ol> <p></p> <p>Note</p> <p>You may see some warnings about file expiration, please ignore.</p> <p>The final messages may look like the image below.</p> <p></p>"},{"location":"supplemental/MonetizationLabSetup/#step-5-complete-the-monetization-lab","title":"Step 5: Complete the monetization lab","text":"<p>At this point you should be able to complete the Selling your SaaS-based Teams Extension lab using these values in the .env file, and granting permission to the application your just registered.</p> <pre><code>SAAS_API=https://(webApiSiteName).azurewebsites.net/api/Subscriptions/CheckOrActivateLicense\nSAAS_SCOPES=api://(webApiClientId)/user_impersonation\nOFFER_ID=contoso_o365_addin\n</code></pre> <p>Replace the values &lt;webApiSiteName&gt; and &lt;webApiClientId&gt; with the values from your <code>ARMParameters.json</code> file.</p> <p>Try visiting the AppSource simulator, which is at <code>https://(webAppSiteName).azurewebsites.net</code>; you should be able to log in using your tenant administrator account. Don't purchase a subscription yet, however!</p> <p></p>"},{"location":"supplemental/ngrokReferences/","title":"ngrokReferences","text":""},{"location":"supplemental/ngrokReferences/#ngrok-url-reset-instructions","title":"ngrok URL reset instructions","text":"<p>The free version of ngrok generates a new URL every time you run it, so if you put the labs aside and return to them later you will need to update the URL. This page lists all the places where the ngrok URL is used so you can return to them and update them.</p> <p>Following these steps, you'll need to upgrade the app in Teams with the new app package you've built so it gets the updated ngrok URL.</p> Lab Exercise Step(s) Use A01 4 2 Redirect URL in the app registration (under \"Authentication\") A01 4 5 Application URI contains the ngrok URL A01 5 4 HOST_NAME in the .env file contains the hostname portion of the ngrok URL A01 5 5 Browse to the ngrok URL A02 2 5 Build the application package ALSO be sure to update the revision number in the app package so Teams will allow the update B01 2 3 Browse to the ngrok URL B02 3 3 HOST_NAME in the .env file contains the hostname portion of the ngrok URL B02 2 5 Build the application package Rebuild the app package AFTER fixing the ngrok URL in your .env file so the new package includes the updated URL. ALSO be sure to update the revision number in the app package so Teams will allow the update B03 1 1 Redirect URL in the app registration (under \"Authentication\") B03 1 3 Application URI contains the ngrok URL Message extension 1 2 Application URI contains the ngrok URL <p></p>"}]}